{"version":3,"sources":["nft/utils/roundAndPluralize.ts","nft/utils/x2y2.ts","nft/utils/listNfts.ts","nft/components/profile/modal/ListingModal.css.ts","nft/components/profile/modal/utils.ts","nft/components/profile/modal/ListingButton.tsx","nft/components/profile/modal/ListingSection.tsx","nft/components/profile/modal/ListingModal.tsx"],"names":["roundAndPluralize","i","word","rounded","Math","floor","pluralize","number","orderItemParamType","orderParamTypes","orderParamType","signOrderData","web3Provider","order","a","orderData","defaultAbiCoder","encode","salt","user","network","intent","delegateType","deadline","currency","dataMask","items","length","orderHash","keccak256","send","orderSig","r","slice","s","v","parseInt","fixSignature","data","encodeOrder","createSellOrder","randomHex","BigNumber","from","randomBytes","toHexString","hexZeroPad","randomSalt","AddressZero","map","item","price","tokens","signVersion","ListingMarkets","name","fee","icon","createConsiderationItem","basisPoints","recipient","amount","getConsiderationItems","asset","signerAddress","openSeaBasisPoints","OPENSEA_DEFAULT_FEE","INVERSE_BASIS_POINTS","creatorFeeBasisPoints","creatorPercentage","sellerBasisPoints","openseaFee","mul","div","toString","creatorFee","sellerFee","OPENSEA_FEE_ADDRESS","asset_contract","payout_address","undefined","approveCollection","operator","collectionAddress","signer","setStatus","ERC721Contract","Contract","ERC721","getAddress","ListingStatus","PENDING","isApprovedForAll","APPROVED","SIGNING","setApprovalForAll","approvalTransaction","wait","status","FAILED","code","REJECTED","signListing","marketplace","provider","looksRareNonce","seaport","Seaport","conduitKeyToConduit","OPENSEA_KEY_TO_CONDUIT","overrides","defaultConduitKey","OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY","listingPrice","newListings","find","listing","expirationTime","listingInWei","parseEther","considerationItems","filter","createOrder","offer","itemType","ItemType","token","address","identifier","tokenId","consideration","endTime","zone","OPENSEA_DEFAULT_ZONE","restrictedByZone","allowPartialFills","executeAllActions","PostOpenSeaSellOrder","OPENSEA_LISTINGS_API_PATH","addresses","addressesByNetwork","SupportedChainId","MAINNET","currentTime","round","Date","now","makerOrder","isOrderAsk","collection","strategy","STRATEGY_STANDARD_SALE","WETH","nonce","startTime","minPercentageToAsk","sub","add","toNumber","params","signMakerOrder","process","REACT_APP_LOOKSRARE_MARKETPLACE_CONTRACT","signatureHash","payload","signature","createLooksRareOrder","res","orderItem","parseFloat","isBundle","bundleName","bundleDesc","orderIds","changePrice","isCollection","newX2Y2Order","resp","chevron","chevronDown","sectionDivider","button","listingModalIcon","warningTooltip","listingSectionBorder","updateStatus","newStatus","rows","setRows","callback","rowsCopy","index","findIndex","n","approveCollectionRow","collectionRow","collectionsRequiringApproval","setCollectionsRequiringApproval","looksRareAddress","pauseAllRows","spender","OPENSEA_CROSS_CHAIN_CONDUIT","REACT_APP_X2Y2_TRANSFER_CONTRACT","signListingRow","listings","setListings","getLooksRareNonce","setLooksRareNonce","getTotalEthValue","sellAssets","total","reduce","maxListing","b","Number","EPSILON","getListings","newCollectionsToApprove","forEach","marketplaces","newListing","images","image_preview_url","DEFINED","push","some","newCollectionRow","image_url","getListingState","allListingsPending","allListingsDefined","allListingsApproved","allCollectionsPending","allCollectionsDefined","anyActiveSigning","anyActiveFailures","anyActiveRejections","anyPaused","PAUSED","verifyStatus","pauseRow","row","resetRow","ListingButton","onClick","buttonText","showWarningOverride","useSellAsset","state","addMarketplaceWarning","removeAllMarketplaceWarnings","listingStatus","useNFTList","setListingStatus","useState","showWarning","setShowWarning","canContinue","setCanContinue","warningRef","useRef","useOnClickOutside","useEffect","useMemo","noMarketplacesSelected","missingExpiration","invalidExpiration","isNaN","overMaxExpiration","listingsMissingPrice","listingsBelowFloor","listingsAboveSellOrderFloor","invalidPrices","floorPrice","overrideFloorPrice","floor_sell_order_price","continueCheck","disableListButton","warningMessage","warningWrappedClick","message","addWarningMessages","position","width","className","bodySmall","styles","transition","color","zIndex","borderRadius","backgroundColor","height","maxWidth","left","bottom","flexWrap","style","ref","marginLeft","marginRight","paddingTop","fill","cursor","as","border","includes","type","opacity","CONTINUE","gap","stroke","ListingSection","sectionTitle","caption","title","openIndex","isSuccessScreen","isOpen","setIsOpen","notAllApproved","removeAssetMarketplace","removeRow","getListingRowPrice","listingRow","allApproved","subhead","marginTop","marginBottom","clsx","Box","fontWeight","badge","image","src","alt","textOverflow","overflow","sm","md","formatEthPrice","numberToWei","fontSize","justifyContent","buttonTextSmall","e","stopPropagation","ListingModal","useWeb3React","getSigner","setOpenIndex","allCollectionsApproved","setAllCollectionsApproved","toggleCart","useBag","toggleBag","looksRareNonceRef","isMobile","useIsMobile","subscribe","current","totalEthListingValue","every","signListings","startListingFlow","looksRareNonceFetcher","TRANSFER_MANAGER_ERC721","allListingsSigned","paused","logListing","showSuccessScreen","paddingBottom","paddingLeft","paddingRight","headlineSmall","display","themeVars","colors","textPrimary","overflowX","overflowY","maxHeight","subheadSmall","resetAllRows"],"mappings":"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","file":"static/js/17.cdefb52b.chunk.js","sourcesContent":["export const roundAndPluralize = (i: number, word: string) => {\n  const rounded = Math.floor(i)\n\n  return `${rounded} ${word}${rounded === 1 ? '' : 's'}`\n}\n\nexport const pluralize = (number: number) => (number !== 1 ? 's' : '')\n","import { defaultAbiCoder } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from '@ethersproject/bignumber'\nimport { hexZeroPad } from '@ethersproject/bytes'\nimport { AddressZero } from '@ethersproject/constants'\nimport { keccak256 } from '@ethersproject/keccak256'\nimport type { Web3Provider } from '@ethersproject/providers'\nimport { randomBytes } from '@ethersproject/random'\n\nconst dataParamType = `tuple(address token, uint256 tokenId)[]`\nconst orderItemParamType = `tuple(uint256 price, bytes data)`\nconst orderParamTypes = [\n  `uint256`,\n  `address`,\n  `uint256`,\n  `uint256`,\n  `uint256`,\n  `uint256`,\n  `address`,\n  `bytes`,\n  `uint256`,\n  `${orderItemParamType}[]`,\n]\nconst orderParamType = `tuple(uint256 salt, address user, uint256 network, uint256 intent, uint256 delegateType, uint256 deadline, address currency, bytes dataMask, ${orderItemParamType}[] items, bytes32 r, bytes32 s, uint8 v, uint8 signVersion)`\n\nexport type OfferItem = {\n  price: BigNumber\n  tokens: {\n    token: string\n    tokenId: BigNumberish\n  }[]\n}\n\ntype OrderItem = {\n  price: BigNumberish\n  data: string\n}\n\ntype Order = {\n  salt: BigNumberish\n  user: string\n  network: BigNumberish\n  intent: BigNumberish\n  delegateType: BigNumberish\n  deadline: BigNumberish\n  currency: string\n  dataMask: string\n  items: OrderItem[]\n  // signature\n  r: string\n  s: string\n  v: number\n  signVersion: number\n}\n\nexport type OrderPayload = {\n  order: string\n  isBundle: boolean\n  bundleName: string\n  bundleDesc: string\n  orderIds: number[]\n  changePrice: boolean\n  isCollection: boolean\n}\n\nexport type OrderResp = {\n  success: boolean\n  code: number\n  error?: string\n}\n\nconst randomSalt = () => {\n  const randomHex = BigNumber.from(randomBytes(16)).toHexString()\n  return hexZeroPad(randomHex, 64)\n}\n\nconst encodeItemData = (data: { token: string; tokenId: BigNumberish }[]) => {\n  return defaultAbiCoder.encode([dataParamType], [data])\n}\n\nexport const signOrderData = async (web3Provider: Web3Provider, order: Order) => {\n  const orderData = defaultAbiCoder.encode(orderParamTypes, [\n    order.salt,\n    order.user,\n    order.network,\n    order.intent,\n    order.delegateType,\n    order.deadline,\n    order.currency,\n    order.dataMask,\n    order.items.length,\n    order.items,\n  ])\n  const orderHash = keccak256(orderData)\n  const orderSig = (await web3Provider.send('personal_sign', [orderHash, order.user])) as string\n  order.r = `0x${orderSig.slice(2, 66)}`\n  order.s = `0x${orderSig.slice(66, 130)}`\n  order.v = parseInt(orderSig.slice(130, 132), 16)\n  fixSignature(order)\n}\n\nconst fixSignature = (data: Order) => {\n  // in geth its always 27/28, in ganache its 0/1. Change to 27/28 to prevent\n  // signature malleability if version is 0/1\n  // see https://github.com/ethereum/go-ethereum/blob/v1.8.23/internal/ethapi/api.go#L465\n  if (data.v < 27) {\n    data.v = data.v + 27\n  }\n}\n\nexport const encodeOrder = (order: Order): string => {\n  return defaultAbiCoder.encode([orderParamType], [order])\n}\n\nexport const createSellOrder = (user: string, deadline: number, items: OfferItem[]): Order => {\n  const salt = randomSalt()\n  const network = 1 // mainnet\n  const intent = 1 // INTENT_SELL\n  const delegateType = 1 // DELEGATION_TYPE_ERC721\n  const currency = AddressZero // ETH\n  return {\n    salt,\n    user,\n    network,\n    intent,\n    delegateType,\n    deadline,\n    currency,\n    dataMask: '0x',\n    items: items.map((item) => ({\n      price: item.price,\n      data: encodeItemData(item.tokens),\n    })),\n    r: '',\n    s: '',\n    v: 0,\n    signVersion: 1,\n  }\n}\n","import { Signer } from '@ethersproject/abstract-signer'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { Contract } from '@ethersproject/contracts'\nimport type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { parseEther } from '@ethersproject/units'\nimport { addressesByNetwork, MakerOrder, signMakerOrder, SupportedChainId } from '@looksrare/sdk'\nimport { Seaport } from '@opensea/seaport-js'\nimport { ItemType } from '@opensea/seaport-js/lib/constants'\nimport { ConsiderationInputItem } from '@opensea/seaport-js/lib/types'\nimport {\n  OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\n  OPENSEA_DEFAULT_ZONE,\n  OPENSEA_KEY_TO_CONDUIT,\n  OPENSEA_LISTINGS_API_PATH,\n} from 'nft/queries/openSea'\n\nimport ERC721 from '../../abis/erc721.json'\nimport { createLooksRareOrder, newX2Y2Order, PostOpenSeaSellOrder } from '../queries'\nimport { INVERSE_BASIS_POINTS, OPENSEA_DEFAULT_FEE, OPENSEA_FEE_ADDRESS } from '../queries/openSea'\nimport { ListingMarket, ListingStatus, WalletAsset } from '../types'\nimport { createSellOrder, encodeOrder, OfferItem, OrderPayload, signOrderData } from './x2y2'\n\nexport const ListingMarkets: ListingMarket[] = [\n  {\n    name: 'LooksRare',\n    fee: 2.0,\n    icon: '/nft/svgs/marketplaces/looksrare.svg',\n  },\n  {\n    name: 'OpenSea',\n    fee: 2.5,\n    icon: '/nft/svgs/marketplaces/opensea.svg',\n  },\n  {\n    name: 'X2Y2',\n    fee: 0.5,\n    icon: '/nft/svgs/marketplaces/x2y2.svg',\n  },\n]\n\nconst createConsiderationItem = (basisPoints: string, recipient: string): ConsiderationInputItem => {\n  return {\n    amount: basisPoints,\n    recipient,\n  }\n}\n\nconst getConsiderationItems = (\n  asset: WalletAsset,\n  price: BigNumber,\n  signerAddress: string\n): {\n  sellerFee: ConsiderationInputItem\n  openseaFee: ConsiderationInputItem\n  creatorFee?: ConsiderationInputItem\n} => {\n  const openSeaBasisPoints = OPENSEA_DEFAULT_FEE * INVERSE_BASIS_POINTS\n  const creatorFeeBasisPoints = asset.creatorPercentage * INVERSE_BASIS_POINTS\n  const sellerBasisPoints = INVERSE_BASIS_POINTS - openSeaBasisPoints - creatorFeeBasisPoints\n\n  const openseaFee = price.mul(BigNumber.from(openSeaBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\n  const creatorFee = price\n    .mul(BigNumber.from(creatorFeeBasisPoints))\n    .div(BigNumber.from(INVERSE_BASIS_POINTS))\n    .toString()\n  const sellerFee = price.mul(BigNumber.from(sellerBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\n\n  return {\n    sellerFee: createConsiderationItem(sellerFee, signerAddress),\n    openseaFee: createConsiderationItem(openseaFee, OPENSEA_FEE_ADDRESS),\n    creatorFee:\n      creatorFeeBasisPoints > 0 ? createConsiderationItem(creatorFee, asset.asset_contract.payout_address) : undefined,\n  }\n}\n\nexport async function approveCollection(\n  operator: string,\n  collectionAddress: string,\n  signer: Signer,\n  setStatus: (newStatus: ListingStatus) => void\n): Promise<void> {\n  // This will work for both 721s & 1155s because they both have the\n  // setApprovalForAll() method\n  const ERC721Contract = new Contract(collectionAddress, ERC721, signer)\n  const signerAddress = await signer.getAddress()\n  setStatus(ListingStatus.PENDING)\n  try {\n    const approved = await ERC721Contract.isApprovedForAll(signerAddress, operator)\n    if (approved) {\n      setStatus(ListingStatus.APPROVED)\n      return\n    }\n\n    setStatus(ListingStatus.SIGNING)\n    const approvalTransaction = await ERC721Contract.setApprovalForAll(operator, true)\n\n    setStatus(ListingStatus.PENDING)\n    const tx = await approvalTransaction.wait()\n\n    tx.status === 1 ? setStatus(ListingStatus.APPROVED) : setStatus(ListingStatus.FAILED)\n  } catch (error) {\n    if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n    else setStatus(ListingStatus.FAILED)\n  }\n}\n\nexport async function signListing(\n  marketplace: ListingMarket,\n  asset: WalletAsset,\n  signer: JsonRpcSigner,\n  provider: Web3Provider,\n  looksRareNonce = 0,\n  setStatus: (newStatus: ListingStatus) => void\n): Promise<boolean> {\n  const seaport = new Seaport(provider, {\n    conduitKeyToConduit: OPENSEA_KEY_TO_CONDUIT,\n    overrides: {\n      defaultConduitKey: OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY,\n    },\n  })\n\n  const signerAddress = await signer.getAddress()\n  const listingPrice = asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price\n  if (!listingPrice || !asset.expirationTime) return false\n  switch (marketplace.name) {\n    case 'OpenSea':\n      try {\n        const listingInWei = parseEther(`${listingPrice}`)\n        const { sellerFee, openseaFee, creatorFee } = getConsiderationItems(asset, listingInWei, signerAddress)\n        const considerationItems = [sellerFee, openseaFee, creatorFee].filter(\n          (item): item is ConsiderationInputItem => item !== undefined\n        )\n\n        const { executeAllActions } = await seaport.createOrder(\n          {\n            offer: [\n              {\n                itemType: ItemType.ERC721,\n                token: asset.asset_contract.address,\n                identifier: asset.tokenId,\n                amount: '1',\n              },\n            ],\n            consideration: considerationItems,\n            endTime: asset.expirationTime.toString(),\n            zone: OPENSEA_DEFAULT_ZONE,\n            restrictedByZone: true,\n            allowPartialFills: true,\n          },\n          signerAddress\n        )\n\n        const order = await executeAllActions()\n        const res = await PostOpenSeaSellOrder(OPENSEA_LISTINGS_API_PATH, order)\n        if (res) setStatus(ListingStatus.APPROVED)\n        return true\n      } catch (error) {\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n        else setStatus(ListingStatus.FAILED)\n        return false\n      }\n    case 'LooksRare':\n      const addresses = addressesByNetwork[SupportedChainId.MAINNET]\n      const currentTime = Math.round(Date.now() / 1000)\n      const makerOrder: MakerOrder = {\n        // true --> ask / false --> bid\n        isOrderAsk: true,\n        // signer address of the maker order\n        signer: signerAddress,\n        // collection address\n        collection: asset.asset_contract.address,\n        // Price in WEI\n        price: parseEther(listingPrice.toString()),\n        // Token ID\n        tokenId: BigNumber.from(asset.tokenId),\n        // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\n        amount: BigNumber.from(1),\n        // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice), see addresses in the SDK\n        strategy: addresses.STRATEGY_STANDARD_SALE,\n        // currency address\n        currency: addresses.WETH,\n        // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\n        nonce: BigNumber.from(looksRareNonce),\n        // startTime timestamp in seconds\n        startTime: BigNumber.from(currentTime),\n        // endTime timestamp in seconds\n        endTime: BigNumber.from(asset.expirationTime),\n        // minimum ratio to be received by the user (per 10000)\n        minPercentageToAsk: BigNumber.from(10000)\n          .sub(BigNumber.from(200).add(BigNumber.from(asset.creatorPercentage * 10000)))\n          .toNumber(),\n        // params (e.g., price, target account for private sale)\n        params: [],\n      }\n\n      try {\n        const signatureHash = await signMakerOrder(\n          signer,\n          SupportedChainId.MAINNET,\n          makerOrder,\n          process.env.REACT_APP_LOOKSRARE_MARKETPLACE_CONTRACT || ''\n        )\n        setStatus(ListingStatus.PENDING)\n        const payload = {\n          signature: signatureHash,\n          tokenId: asset.tokenId,\n          collection: asset.asset_contract.address,\n          strategy: addresses.STRATEGY_STANDARD_SALE,\n          currency: addresses.WETH,\n          signer: signerAddress,\n          isOrderAsk: true,\n          nonce: looksRareNonce,\n          amount: 1,\n          price: parseEther(listingPrice.toString()).toString(),\n          startTime: currentTime,\n          endTime: asset.expirationTime,\n          minPercentageToAsk: 10000 - (200 + asset.creatorPercentage * 10000),\n          params: [],\n        }\n        const res = await createLooksRareOrder(payload)\n        if (res) setStatus(ListingStatus.APPROVED)\n        return res\n      } catch (error) {\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n        else setStatus(ListingStatus.FAILED)\n        return false\n      }\n\n    case 'X2Y2':\n      const orderItem: OfferItem = {\n        price: parseEther(listingPrice.toString()),\n        tokens: [\n          {\n            token: asset.asset_contract.address,\n            tokenId: BigNumber.from(parseFloat(asset.tokenId)),\n          },\n        ],\n      }\n      const order = createSellOrder(signerAddress, asset.expirationTime, [orderItem])\n      try {\n        await signOrderData(provider, order)\n        const payload: OrderPayload = {\n          order: encodeOrder(order),\n          isBundle: false,\n          bundleName: '',\n          bundleDesc: '',\n          orderIds: [],\n          changePrice: false,\n          isCollection: false,\n        }\n        setStatus(ListingStatus.PENDING)\n        // call server api\n        const resp = await newX2Y2Order(payload)\n        if (resp) setStatus(ListingStatus.APPROVED)\n        return resp\n      } catch (error) {\n        if (error.code === 4001) setStatus(ListingStatus.REJECTED)\n        else setStatus(ListingStatus.FAILED)\n        return false\n      }\n\n    default:\n      return false\n  }\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/profile/modal/ListingModal.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/profile/modal/ListingModal.css.ts.vanilla.css\\\",\\\"source\\\":\\\"LnN1OHY5azIgewogIHRyYW5zZm9ybTogcm90YXRlKDE4MGRlZyk7Cn0KLnN1OHY5azYgewogIGxpbmUtaGVpZ2h0OiAxOHB4Owp9Ci5zdTh2OWs4IHsKICBib3gtc2l6aW5nOiBib3JkZXItYm94OwogIG1hcmdpbi1sZWZ0OiAtMnB4Owp9Ci5zdTh2OWthIHsKICBib3gtc2hhZG93OiAwcHggNHB4IDE2cHggcmdiYSgxMCwgMTAsIDU5LCAwLjIpOwp9\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var chevron = 'rgw6ez17a rgw6ez10s rgw6ez6n2 rgw6ezns rgw6ezo4';\nexport var chevronDown = 'su8v9k2';\nexport var sectionDivider = 'rgw6ez6a6 rgw6ezug rgw6ez14g rgw6ez6hy rgw6ez692 rgw6ez4qg';\nexport var button = 'su8v9k6 rgw6ez17s rgw6ez14g rgw6ez40y rgw6ezcg rgw6ezag rgw6ez3zg rgw6ez34 rgw6ez42a rgw6ez4g rgw6ez69u';\nexport var listingModalIcon = 'su8v9k8 rgw6ez6i2 rgw6ez692 rgw6ez4qm';\nexport var warningTooltip = 'su8v9ka rgw6ez2jg rgw6ez2dy rgw6ez22y rgw6ez28s';\nexport var listingSectionBorder = 'rgw6ez2oy rgw6ez69m rgw6ez4qg rgw6ez692 rgw6ez6i2';","import { BigNumber } from '@ethersproject/bignumber'\nimport type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { ConsiderationInputItem } from '@opensea/seaport-js/lib/types'\nimport {\n  INVERSE_BASIS_POINTS,\n  OPENSEA_CROSS_CHAIN_CONDUIT,\n  OPENSEA_DEFAULT_FEE,\n  OPENSEA_FEE_ADDRESS,\n} from 'nft/queries/openSea'\nimport { AssetRow, CollectionRow, ListingMarket, ListingRow, ListingStatus, WalletAsset } from 'nft/types'\nimport { approveCollection, signListing } from 'nft/utils/listNfts'\nimport { Dispatch } from 'react'\n\nexport const updateStatus = ({\n  listing,\n  newStatus,\n  rows,\n  setRows,\n  callback,\n}: {\n  listing: AssetRow\n  newStatus: ListingStatus\n  rows: AssetRow[]\n  setRows: Dispatch<AssetRow[]>\n  callback?: () => Promise<void>\n}) => {\n  const rowsCopy = [...rows]\n  const index = rows.findIndex((n) => n === listing)\n  listing.status = newStatus\n  if (callback) listing.callback = callback\n  rowsCopy[index] = listing\n  setRows(rowsCopy)\n}\n\nexport async function approveCollectionRow(\n  collectionRow: CollectionRow,\n  collectionsRequiringApproval: CollectionRow[],\n  setCollectionsRequiringApproval: Dispatch<CollectionRow[]>,\n  signer: JsonRpcSigner,\n  looksRareAddress: string,\n  pauseAllRows: () => void\n) {\n  updateStatus({\n    listing: collectionRow,\n    newStatus: ListingStatus.SIGNING,\n    rows: collectionsRequiringApproval,\n    setRows: setCollectionsRequiringApproval as Dispatch<AssetRow[]>,\n    callback: () =>\n      approveCollectionRow(\n        collectionRow,\n        collectionsRequiringApproval,\n        setCollectionsRequiringApproval,\n        signer,\n        looksRareAddress,\n        pauseAllRows\n      ),\n  })\n  const { marketplace, collectionAddress } = collectionRow\n  const spender =\n    marketplace.name === 'OpenSea'\n      ? OPENSEA_CROSS_CHAIN_CONDUIT\n      : marketplace.name === 'Rarible'\n      ? process.env.REACT_APP_LOOKSRARE_MARKETPLACE_CONTRACT\n      : marketplace.name === 'X2Y2'\n      ? process.env.REACT_APP_X2Y2_TRANSFER_CONTRACT\n      : looksRareAddress\n  await approveCollection(spender ?? '', collectionAddress, signer, (newStatus: ListingStatus) =>\n    updateStatus({\n      listing: collectionRow,\n      newStatus,\n      rows: collectionsRequiringApproval,\n      setRows: setCollectionsRequiringApproval as Dispatch<AssetRow[]>,\n    })\n  )\n  if (collectionRow.status === ListingStatus.REJECTED || collectionRow.status === ListingStatus.FAILED) pauseAllRows()\n}\n\nexport async function signListingRow(\n  listing: ListingRow,\n  listings: ListingRow[],\n  setListings: Dispatch<ListingRow[]>,\n  signer: JsonRpcSigner,\n  provider: Web3Provider,\n  getLooksRareNonce: () => number,\n  setLooksRareNonce: (nonce: number) => void,\n  pauseAllRows: () => void\n) {\n  const looksRareNonce = getLooksRareNonce()\n  updateStatus({\n    listing,\n    newStatus: ListingStatus.SIGNING,\n    rows: listings,\n    setRows: setListings as Dispatch<AssetRow[]>,\n    callback: () => {\n      return signListingRow(\n        listing,\n        listings,\n        setListings,\n        signer,\n        provider,\n        getLooksRareNonce,\n        setLooksRareNonce,\n        pauseAllRows\n      )\n    },\n  })\n  const { asset, marketplace } = listing\n  const res = await signListing(marketplace, asset, signer, provider, looksRareNonce, (newStatus: ListingStatus) =>\n    updateStatus({\n      listing,\n      newStatus,\n      rows: listings,\n      setRows: setListings as Dispatch<AssetRow[]>,\n    })\n  )\n  if (listing.status === ListingStatus.REJECTED) pauseAllRows()\n  else {\n    res && listing.marketplace.name === 'LooksRare' && setLooksRareNonce(looksRareNonce + 1)\n    const newStatus = res ? ListingStatus.APPROVED : ListingStatus.FAILED\n    updateStatus({\n      listing,\n      newStatus,\n      rows: listings,\n      setRows: setListings as Dispatch<AssetRow[]>,\n    })\n  }\n}\n\nexport const getTotalEthValue = (sellAssets: WalletAsset[]) => {\n  const total = sellAssets.reduce((total, asset: WalletAsset) => {\n    if (asset.newListings?.length) {\n      const maxListing = asset.newListings.reduce((a, b) => ((a.price ?? 0) > (b.price ?? 0) ? a : b))\n      return (\n        total +\n        (maxListing.price ?? 0) -\n        (maxListing.price ?? 0) * (maxListing.marketplace.fee / 100 + asset.creatorPercentage)\n      )\n    }\n    return total\n  }, 0)\n  return total ? Math.round(total * 100 + Number.EPSILON) / 100 : 0\n}\n\nexport const getListings = (sellAssets: WalletAsset[]): [CollectionRow[], ListingRow[]] => {\n  const newCollectionsToApprove: CollectionRow[] = []\n\n  const newListings: ListingRow[] = []\n  sellAssets.forEach((asset) => {\n    asset.marketplaces?.forEach((marketplace: ListingMarket) => {\n      const newListing = {\n        images: [asset.image_preview_url, marketplace.icon],\n        name: asset.name || `#${asset.tokenId}`,\n        status: ListingStatus.DEFINED,\n        asset,\n        marketplace,\n      }\n      newListings.push(newListing)\n      if (\n        !newCollectionsToApprove.some(\n          (collectionRow: CollectionRow) =>\n            collectionRow.collectionAddress === asset.asset_contract.address &&\n            collectionRow.marketplace.name === marketplace.name\n        )\n      ) {\n        const newCollectionRow = {\n          images: [asset.asset_contract.image_url, marketplace.icon],\n          name: asset.asset_contract.name,\n          status: ListingStatus.DEFINED,\n          collectionAddress: asset.asset_contract.address,\n          marketplace,\n        }\n        newCollectionsToApprove.push(newCollectionRow)\n      }\n    })\n  })\n  return [newCollectionsToApprove, newListings]\n}\n\nexport type ListingState = {\n  allListingsPending: boolean\n  allListingsDefined: boolean\n  allListingsApproved: boolean\n  allCollectionsPending: boolean\n  allCollectionsDefined: boolean\n  anyActiveSigning: boolean\n  anyActiveFailures: boolean\n  anyActiveRejections: boolean\n  anyPaused: boolean\n}\n\nexport const getListingState = (\n  collectionsRequiringApproval: CollectionRow[],\n  listings: ListingRow[]\n): ListingState => {\n  let allListingsPending = true\n  let allListingsDefined = true\n  let allListingsApproved = true\n  let allCollectionsPending = true\n  let allCollectionsDefined = true\n  let anyActiveSigning = false\n  let anyActiveFailures = false\n  let anyActiveRejections = false\n  let anyPaused = false\n\n  if (collectionsRequiringApproval.length === 0) {\n    allCollectionsDefined = allCollectionsPending = false\n  }\n  for (const collection of collectionsRequiringApproval) {\n    if (collection.status !== ListingStatus.PENDING) allCollectionsPending = false\n    if (collection.status !== ListingStatus.DEFINED) allCollectionsDefined = false\n    if (collection.status === ListingStatus.SIGNING) anyActiveSigning = true\n    else if (collection.status === ListingStatus.FAILED) anyActiveFailures = true\n    else if (collection.status === ListingStatus.REJECTED) anyActiveRejections = true\n    else if (collection.status === ListingStatus.PAUSED) anyPaused = true\n  }\n\n  if (listings.length === 0) {\n    allListingsApproved = allListingsDefined = allListingsPending = false\n  }\n  for (const listing of listings) {\n    if (listing.status !== ListingStatus.PENDING) allListingsPending = false\n    if (listing.status !== ListingStatus.DEFINED) allListingsDefined = false\n    if (listing.status !== ListingStatus.APPROVED) allListingsApproved = false\n    if (listing.status === ListingStatus.SIGNING) anyActiveSigning = true\n    else if (listing.status === ListingStatus.FAILED) anyActiveFailures = true\n    else if (listing.status === ListingStatus.REJECTED) anyActiveRejections = true\n    else if (listing.status === ListingStatus.PAUSED) anyPaused = true\n  }\n  return {\n    allListingsPending,\n    allListingsDefined,\n    allListingsApproved,\n    allCollectionsPending,\n    allCollectionsDefined,\n    anyActiveSigning,\n    anyActiveFailures,\n    anyActiveRejections,\n    anyPaused,\n  }\n}\n\nexport const verifyStatus = (status: ListingStatus) => {\n  return status !== ListingStatus.PAUSED && status !== ListingStatus.APPROVED\n}\n\nexport const pauseRow = (row: AssetRow, rows: AssetRow[], setRows: Dispatch<AssetRow[]>) => {\n  if (row.status === ListingStatus.PENDING || row.status === ListingStatus.DEFINED)\n    updateStatus({\n      listing: row,\n      newStatus: ListingStatus.PAUSED,\n      rows,\n      setRows,\n    })\n}\n\nexport const resetRow = (row: AssetRow, rows: AssetRow[], setRows: Dispatch<AssetRow[]>) => {\n  if (\n    row.status === ListingStatus.PAUSED ||\n    row.status === ListingStatus.FAILED ||\n    row.status === ListingStatus.REJECTED\n  )\n    updateStatus({\n      listing: row,\n      newStatus: ListingStatus.DEFINED,\n      rows,\n      setRows,\n    })\n}\n\nconst createConsiderationItem = (basisPoints: string, recipient: string): ConsiderationInputItem => {\n  return {\n    amount: basisPoints,\n    recipient,\n  }\n}\n\nexport const getConsiderationItems = (\n  asset: WalletAsset,\n  price: BigNumber,\n  signerAddress: string\n): {\n  sellerFee: ConsiderationInputItem\n  openseaFee: ConsiderationInputItem\n  creatorFee?: ConsiderationInputItem\n} => {\n  const openSeaBasisPoints = OPENSEA_DEFAULT_FEE * INVERSE_BASIS_POINTS\n  const creatorFeeBasisPoints = asset.creatorPercentage * INVERSE_BASIS_POINTS\n  const sellerBasisPoints = INVERSE_BASIS_POINTS - openSeaBasisPoints - creatorFeeBasisPoints\n\n  const openseaFee = price.mul(BigNumber.from(openSeaBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\n  const creatorFee = price\n    .mul(BigNumber.from(creatorFeeBasisPoints))\n    .div(BigNumber.from(INVERSE_BASIS_POINTS))\n    .toString()\n  const sellerFee = price.mul(BigNumber.from(sellerBasisPoints)).div(BigNumber.from(INVERSE_BASIS_POINTS)).toString()\n\n  return {\n    sellerFee: createConsiderationItem(sellerFee, signerAddress),\n    openseaFee: createConsiderationItem(openseaFee, OPENSEA_FEE_ADDRESS),\n    creatorFee:\n      creatorFeeBasisPoints > 0 ? createConsiderationItem(creatorFee, asset.asset_contract.payout_address) : undefined,\n  }\n}\n","import { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport ms from 'ms.macro'\nimport { Box } from 'nft/components/Box'\nimport { Row } from 'nft/components/Flex'\nimport { ArrowRightIcon, HazardIcon, LoadingIcon, XMarkIcon } from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { useNFTList, useSellAsset } from 'nft/hooks'\nimport { Listing, ListingStatus, WalletAsset } from 'nft/types'\nimport { pluralize } from 'nft/utils/roundAndPluralize'\nimport { useEffect, useMemo, useRef, useState } from 'react'\n\nimport * as styles from './ListingModal.css'\nimport { getListings } from './utils'\n\ninterface ListingButtonProps {\n  onClick: () => void\n  buttonText: string\n  showWarningOverride?: boolean\n}\n\nexport const ListingButton = ({ onClick, buttonText, showWarningOverride = false }: ListingButtonProps) => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const addMarketplaceWarning = useSellAsset((state) => state.addMarketplaceWarning)\n  const removeAllMarketplaceWarnings = useSellAsset((state) => state.removeAllMarketplaceWarnings)\n  const listingStatus = useNFTList((state) => state.listingStatus)\n  const setListingStatus = useNFTList((state) => state.setListingStatus)\n  const setListings = useNFTList((state) => state.setListings)\n  const setCollectionsRequiringApproval = useNFTList((state) => state.setCollectionsRequiringApproval)\n  const [showWarning, setShowWarning] = useState(false)\n  const [canContinue, setCanContinue] = useState(false)\n  const warningRef = useRef<HTMLDivElement>(null)\n  useOnClickOutside(warningRef, () => {\n    setShowWarning(false)\n  })\n\n  useEffect(() => {\n    const [newCollectionsToApprove, newListings] = getListings(sellAssets)\n    setListings(newListings)\n    setCollectionsRequiringApproval(newCollectionsToApprove)\n    setListingStatus(ListingStatus.DEFINED)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sellAssets])\n\n  const [\n    noMarketplacesSelected,\n    missingExpiration,\n    invalidExpiration,\n    overMaxExpiration,\n    listingsMissingPrice,\n    listingsBelowFloor,\n    listingsAboveSellOrderFloor,\n    invalidPrices,\n  ] = useMemo(() => {\n    const noMarketplacesSelected = sellAssets.some(\n      (asset: WalletAsset) => asset.marketplaces === undefined || asset.marketplaces.length === 0\n    )\n    const missingExpiration = sellAssets.some((asset) => {\n      return asset.expirationTime != null && asset.expirationTime - Date.now() < ms`60 seconds`\n    })\n    const invalidExpiration = sellAssets.some((asset) => {\n      return asset.expirationTime != null && isNaN(asset.expirationTime)\n    })\n    const overMaxExpiration = sellAssets.some((asset) => {\n      return asset.expirationTime != null && asset.expirationTime - Date.now() > ms`180 days`\n    })\n    const listingsMissingPrice: [WalletAsset, Listing][] = []\n    const listingsBelowFloor: [WalletAsset, Listing][] = []\n    const listingsAboveSellOrderFloor: [WalletAsset, Listing][] = []\n    const invalidPrices: [WalletAsset, Listing][] = []\n    for (const asset of sellAssets) {\n      if (asset.newListings) {\n        for (const listing of asset.newListings) {\n          if (!listing.price) listingsMissingPrice.push([asset, listing])\n          else if (isNaN(listing.price) || listing.price < 0) invalidPrices.push([asset, listing])\n          else if (listing.price < asset.floorPrice && !listing.overrideFloorPrice)\n            listingsBelowFloor.push([asset, listing])\n          else if (asset.floor_sell_order_price && listing.price > asset.floor_sell_order_price)\n            listingsAboveSellOrderFloor.push([asset, listing])\n        }\n      }\n    }\n    const continueCheck = listingsBelowFloor.length === 0 && listingsAboveSellOrderFloor.length === 0\n    setCanContinue(continueCheck)\n    return [\n      noMarketplacesSelected,\n      missingExpiration,\n      invalidExpiration,\n      overMaxExpiration,\n      listingsMissingPrice,\n      listingsBelowFloor,\n      listingsAboveSellOrderFloor,\n      invalidPrices,\n    ]\n  }, [sellAssets])\n\n  const [disableListButton, warningMessage] = useMemo(() => {\n    const disableListButton =\n      noMarketplacesSelected ||\n      missingExpiration ||\n      invalidExpiration ||\n      overMaxExpiration ||\n      invalidPrices.length > 0 ||\n      listingsMissingPrice.length > 0\n\n    const warningMessage = noMarketplacesSelected\n      ? 'No marketplaces selected'\n      : missingExpiration\n      ? 'Set duration'\n      : invalidExpiration\n      ? 'Invalid duration'\n      : overMaxExpiration\n      ? 'Max duration is 6 months'\n      : listingsMissingPrice.length > 0\n      ? `${listingsMissingPrice.length} item price${pluralize(listingsMissingPrice.length)} not set`\n      : invalidPrices.length > 0\n      ? `${invalidPrices.length} price${pluralize(invalidPrices.length)} are invalid`\n      : listingsBelowFloor.length > 0\n      ? `${listingsBelowFloor.length} item${pluralize(listingsBelowFloor.length)} listed below floor`\n      : listingsAboveSellOrderFloor.length > 0\n      ? `${listingsAboveSellOrderFloor.length} item${pluralize(listingsAboveSellOrderFloor.length)} already listed`\n      : ''\n    return [disableListButton, warningMessage]\n  }, [\n    noMarketplacesSelected,\n    missingExpiration,\n    invalidExpiration,\n    overMaxExpiration,\n    listingsMissingPrice,\n    invalidPrices,\n    listingsBelowFloor,\n    listingsAboveSellOrderFloor,\n  ])\n\n  useEffect(() => {\n    setShowWarning(false)\n  }, [warningMessage])\n\n  const addWarningMessages = () => {\n    removeAllMarketplaceWarnings()\n    if (!missingExpiration && !noMarketplacesSelected) {\n      if (listingsMissingPrice.length > 0) {\n        for (const [asset, listing] of listingsMissingPrice) {\n          addMarketplaceWarning(asset, {\n            message: 'PLEASE SET A PRICE',\n            marketplace: listing.marketplace,\n          })\n        }\n      } else if (invalidPrices.length > 0) {\n        for (const [asset, listing] of invalidPrices) {\n          !listing.overrideFloorPrice &&\n            addMarketplaceWarning(asset, {\n              message: `INVALID PRICE`,\n              marketplace: listing.marketplace,\n            })\n        }\n      }\n    }\n    setShowWarning(true)\n  }\n\n  const warningWrappedClick = () => {\n    if ((!disableListButton && canContinue) || showWarningOverride) onClick()\n    else addWarningMessages()\n  }\n\n  return (\n    <Box position=\"relative\" width=\"full\">\n      {!showWarningOverride && showWarning && warningMessage.length > 0 && (\n        <Row\n          className={`${bodySmall} ${styles.warningTooltip}`}\n          transition=\"250\"\n          onClick={() => setShowWarning(false)}\n          color=\"textSecondary\"\n          zIndex=\"3\"\n          borderRadius=\"4\"\n          backgroundColor=\"backgroundSurface\"\n          height={!disableListButton ? '64' : '36'}\n          maxWidth=\"276\"\n          position=\"absolute\"\n          left=\"24\"\n          bottom=\"52\"\n          flexWrap={!disableListButton ? 'wrap' : 'nowrap'}\n          style={{ maxWidth: !disableListButton ? '225px' : '' }}\n          ref={warningRef}\n        >\n          <HazardIcon />\n          <Box marginLeft=\"4\" marginRight=\"8\">\n            {warningMessage}\n          </Box>\n          {!!disableListButton ? (\n            <Box paddingTop=\"6\">\n              <XMarkIcon fill=\"textSecondary\" height=\"20\" width=\"20\" />\n            </Box>\n          ) : (\n            <Row\n              marginLeft=\"72\"\n              cursor=\"pointer\"\n              color=\"genieBlue\"\n              onClick={() => {\n                setShowWarning(false)\n                setCanContinue(true)\n                onClick()\n              }}\n            >\n              Continue\n              <ArrowRightIcon height=\"20\" width=\"20\" />\n            </Row>\n          )}\n        </Row>\n      )}\n      <Box\n        as=\"button\"\n        border=\"none\"\n        backgroundColor=\"genieBlue\"\n        cursor={\n          [ListingStatus.APPROVED, ListingStatus.PENDING, ListingStatus.SIGNING].includes(listingStatus) ||\n          disableListButton\n            ? 'default'\n            : 'pointer'\n        }\n        color=\"explicitWhite\"\n        className={styles.button}\n        onClick={() => listingStatus !== ListingStatus.APPROVED && warningWrappedClick()}\n        type=\"button\"\n        style={{\n          opacity:\n            ![ListingStatus.DEFINED, ListingStatus.FAILED, ListingStatus.CONTINUE].includes(listingStatus) ||\n            disableListButton\n              ? 0.3\n              : 1,\n        }}\n      >\n        {listingStatus === ListingStatus.SIGNING || listingStatus === ListingStatus.PENDING ? (\n          <Row gap=\"8\">\n            <LoadingIcon stroke=\"backgroundSurface\" height=\"20\" width=\"20\" />\n            {listingStatus === ListingStatus.PENDING ? 'Pending' : 'Proceed in wallet'}\n          </Row>\n        ) : listingStatus === ListingStatus.APPROVED ? (\n          'Complete!'\n        ) : listingStatus === ListingStatus.PAUSED ? (\n          'Paused'\n        ) : listingStatus === ListingStatus.FAILED ? (\n          'Try again'\n        ) : listingStatus === ListingStatus.CONTINUE ? (\n          'Continue'\n        ) : (\n          buttonText\n        )}\n      </Box>\n    </Box>\n  )\n}\n","import clsx from 'clsx'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ApprovedCheckmarkIcon, ChevronUpIcon, FailedListingIcon, LoadingIcon } from 'nft/components/icons'\nimport { badge, bodySmall, buttonTextSmall, subhead } from 'nft/css/common.css'\nimport { useSellAsset } from 'nft/hooks'\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\nimport { formatEthPrice, numberToWei } from 'nft/utils/currency'\nimport { useEffect, useState } from 'react'\n\nimport * as styles from './ListingModal.css'\n\nexport const ListingSection = ({\n  sectionTitle,\n  caption = undefined,\n  title = undefined,\n  rows,\n  index,\n  openIndex,\n  isSuccessScreen = false,\n}: {\n  sectionTitle: string\n  caption?: string\n  title?: string\n  rows: AssetRow[]\n  index: number\n  openIndex: number\n  isSuccessScreen?: boolean\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const notAllApproved = rows.some((row: AssetRow) => row.status !== ListingStatus.APPROVED)\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\n\n  const removeRow = (row: any) => {\n    // collections\n    if (index === 1) {\n      for (const asset of sellAssets)\n        if (asset.asset_contract.address === row.collectionAddress) removeAssetMarketplace(asset, row.marketplace)\n    }\n    // listings\n    else removeAssetMarketplace(row.asset, row.marketplace)\n  }\n\n  useEffect(() => {\n    setIsOpen(index === openIndex)\n  }, [index, openIndex])\n\n  function getListingRowPrice(row: AssetRow): number | undefined {\n    const listingRow = row as ListingRow\n    const newListings = listingRow.asset.newListings\n    return newListings?.find((listing) => listing.marketplace.name === listingRow.marketplace.name)?.price ?? 0\n  }\n\n  const allApproved = !notAllApproved && rows.length > 0 && !isSuccessScreen\n\n  return (\n    <Row\n      flexWrap=\"wrap\"\n      className={subhead}\n      marginTop=\"10\"\n      marginBottom=\"10\"\n      onClick={() => rows.length > 0 && setIsOpen(!isOpen)}\n      color={allApproved ? 'green' : 'textPrimary'}\n    >\n      {allApproved && <ApprovedCheckmarkIcon style={{ marginRight: '8px' }} />}\n      {sectionTitle}\n      {!isSuccessScreen && <ChevronUpIcon className={clsx(`${isOpen ? '' : styles.chevronDown} ${styles.chevron}`)} />}\n      {(isOpen || isSuccessScreen) && (\n        <Column\n          gap=\"12\"\n          width=\"full\"\n          paddingTop={isSuccessScreen ? '28' : 'auto'}\n          className={clsx(!isSuccessScreen && styles.listingSectionBorder)}\n        >\n          {caption && (\n            <Box color=\"textPrimary\" fontWeight=\"normal\" className={caption}>\n              {caption}\n            </Box>\n          )}\n          {title && (\n            <Box color=\"textSecondary\" className={badge}>\n              {title}\n            </Box>\n          )}\n          <Column gap=\"8\">\n            {rows.map((row: AssetRow, index) => {\n              return (\n                <Column key={index} gap=\"8\">\n                  <Row>\n                    {row.images.map((image, index) => {\n                      return (\n                        <Box\n                          as=\"img\"\n                          height=\"20\"\n                          width=\"20\"\n                          borderRadius={index === 0 && (row as CollectionRow).collectionAddress ? 'round' : '4'}\n                          style={{ zIndex: 2 - index }}\n                          className={styles.listingModalIcon}\n                          src={image}\n                          alt={row.name}\n                          key={index}\n                        />\n                      )\n                    })}\n                    <Box\n                      marginLeft=\"8\"\n                      marginRight=\"auto\"\n                      fontWeight=\"normal\"\n                      color=\"textPrimary\"\n                      textOverflow=\"ellipsis\"\n                      overflow=\"hidden\"\n                      maxWidth={{\n                        sm: 'max',\n                        md:\n                          row.status === ListingStatus.REJECTED || row.status === ListingStatus.FAILED ? '120' : 'full',\n                      }}\n                      className={bodySmall}\n                    >\n                      {row.name}\n                    </Box>\n                    {isSuccessScreen ? (\n                      getListingRowPrice(row) &&\n                      `${formatEthPrice(numberToWei(getListingRowPrice(row) ?? 0).toString())} ETH`\n                    ) : row.status === ListingStatus.APPROVED ? (\n                      <ApprovedCheckmarkIcon height=\"20\" width=\"20\" />\n                    ) : row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED ? (\n                      <Row gap=\"4\">\n                        <Box fontWeight=\"normal\" fontSize=\"14\" color=\"textSecondary\">\n                          {row.status}\n                        </Box>\n                        <FailedListingIcon />\n                      </Row>\n                    ) : (\n                      row.status === ListingStatus.SIGNING && <LoadingIcon height=\"20\" width=\"20\" stroke=\"#4673FA\" />\n                    )}\n                  </Row>\n                  {(row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED) && (\n                    <Row gap=\"8\" justifyContent=\"center\">\n                      <Box\n                        width=\"120\"\n                        as=\"button\"\n                        className={buttonTextSmall}\n                        borderRadius=\"12\"\n                        border=\"none\"\n                        color=\"red400\"\n                        height=\"32\"\n                        cursor=\"pointer\"\n                        style={{ backgroundColor: '#FA2B391A' }}\n                        onClick={async (e) => {\n                          e.stopPropagation()\n                          removeRow(row)\n                        }}\n                      >\n                        Remove\n                      </Box>\n                      <Box\n                        width=\"120\"\n                        as=\"button\"\n                        className={buttonTextSmall}\n                        borderRadius=\"12\"\n                        border=\"none\"\n                        color=\"genieBlue\"\n                        height=\"32\"\n                        cursor=\"pointer\"\n                        style={{ backgroundColor: '#4C82FB29' }}\n                        onClick={async (e) => {\n                          e.stopPropagation()\n                          if (row.callback) {\n                            await row.callback()\n                          }\n                        }}\n                      >\n                        Try again\n                      </Box>\n                    </Row>\n                  )}\n                </Column>\n              )\n            })}\n          </Column>\n        </Column>\n      )}\n    </Row>\n  )\n}\n","import { addressesByNetwork, SupportedChainId } from '@looksrare/sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ChevronLeftIcon, XMarkIcon } from 'nft/components/icons'\nimport { caption, headlineSmall, subhead, subheadSmall } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { useBag, useIsMobile, useNFTList, useSellAsset } from 'nft/hooks'\nimport { logListing, looksRareNonceFetcher } from 'nft/queries'\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\nimport { pluralize } from 'nft/utils/roundAndPluralize'\nimport { Dispatch, useEffect, useMemo, useRef, useState } from 'react'\n\nimport { ListingButton } from './ListingButton'\nimport * as styles from './ListingModal.css'\nimport { ListingSection } from './ListingSection'\nimport { approveCollectionRow, getTotalEthValue, pauseRow, resetRow, signListingRow, verifyStatus } from './utils'\n\nconst ListingModal = () => {\n  const { provider } = useWeb3React()\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const signer = provider?.getSigner()\n  const listings = useNFTList((state) => state.listings)\n  const setListings = useNFTList((state) => state.setListings)\n  const collectionsRequiringApproval = useNFTList((state) => state.collectionsRequiringApproval)\n  const setCollectionsRequiringApproval = useNFTList((state) => state.setCollectionsRequiringApproval)\n  const [openIndex, setOpenIndex] = useState(0)\n  const listingStatus = useNFTList((state) => state.listingStatus)\n  const setListingStatus = useNFTList((state) => state.setListingStatus)\n  const [allCollectionsApproved, setAllCollectionsApproved] = useState(false)\n  const looksRareNonce = useNFTList((state) => state.looksRareNonce)\n  const setLooksRareNonce = useNFTList((state) => state.setLooksRareNonce)\n  const getLooksRareNonce = useNFTList((state) => state.getLooksRareNonce)\n  const toggleCart = useBag((state) => state.toggleBag)\n  const looksRareNonceRef = useRef(looksRareNonce)\n  const isMobile = useIsMobile()\n\n  useEffect(() => {\n    useNFTList.subscribe((state) => (looksRareNonceRef.current = state.looksRareNonce))\n  }, [])\n\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\n\n  // when all collections have been approved, auto start the signing process\n  useEffect(() => {\n    collectionsRequiringApproval?.length &&\n      setAllCollectionsApproved(\n        collectionsRequiringApproval.every((collection: CollectionRow) => collection.status === ListingStatus.APPROVED)\n      )\n    if (\n      allCollectionsApproved &&\n      (listingStatus === ListingStatus.PENDING || listingStatus === ListingStatus.CONTINUE)\n    ) {\n      signListings()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [collectionsRequiringApproval, allCollectionsApproved])\n\n  // handles the modal wide listing state based on conglomeration of the wallet, collection, and listing states\n\n  const startListingFlow = async () => {\n    if (!signer) return\n    setListingStatus(ListingStatus.SIGNING)\n    const addresses = addressesByNetwork[SupportedChainId.MAINNET]\n    const signerAddress = await signer.getAddress()\n    const nonce = await looksRareNonceFetcher(signerAddress)\n    setLooksRareNonce(nonce ?? 0)\n\n    if (!collectionsRequiringApproval?.some((collection) => collection.status === ListingStatus.PAUSED)) {\n      setListingStatus(ListingStatus.SIGNING)\n      setOpenIndex(1)\n    }\n    const looksRareAddress = addresses.TRANSFER_MANAGER_ERC721\n    // for all unqiue collection, marketplace combos -> approve collections\n    for (const collectionRow of collectionsRequiringApproval) {\n      verifyStatus(collectionRow.status) &&\n        approveCollectionRow(\n          collectionRow,\n          collectionsRequiringApproval,\n          setCollectionsRequiringApproval,\n          signer,\n          looksRareAddress,\n          pauseAllRows\n        )\n    }\n  }\n\n  const signListings = async () => {\n    if (!signer || !provider) return\n    setListingStatus(ListingStatus.SIGNING)\n    setOpenIndex(2)\n    // sign listings\n    for (const listing of listings) {\n      verifyStatus(listing.status) &&\n        (await signListingRow(\n          listing,\n          listings,\n          setListings,\n          signer,\n          provider,\n          getLooksRareNonce,\n          setLooksRareNonce,\n          pauseAllRows\n        ))\n    }\n    const allListingsSigned = listings.every((listing: ListingRow) => listing.status === ListingStatus.APPROVED)\n    const paused = listings.some((listing: ListingRow) => listing.status === ListingStatus.PAUSED)\n    if (allListingsSigned) {\n      setOpenIndex(0)\n      setListingStatus(ListingStatus.APPROVED)\n    } else if (!paused) {\n      setListingStatus(ListingStatus.FAILED)\n    }\n    await logListing(listings, (await signer?.getAddress()) ?? '')\n  }\n\n  const pauseAllRows = () => {\n    for (const collection of collectionsRequiringApproval) {\n      pauseRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\n    }\n    for (const listing of listings) {\n      pauseRow(listing, listings, setListings as Dispatch<AssetRow[]>)\n    }\n  }\n\n  const resetAllRows = () => {\n    for (const collection of collectionsRequiringApproval) {\n      resetRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\n    }\n    for (const listing of listings) {\n      resetRow(listing, listings, setListings as Dispatch<AssetRow[]>)\n    }\n  }\n\n  const clickStopListing = () => {\n    pauseAllRows()\n  }\n\n  const clickStartListingFlow = () => {\n    resetAllRows()\n    allCollectionsApproved ? signListings() : startListingFlow()\n  }\n\n  const showSuccessScreen = useMemo(() => listingStatus === ListingStatus.APPROVED, [listingStatus])\n\n  return (\n    <Column paddingTop=\"20\" paddingBottom=\"20\" paddingLeft=\"12\" paddingRight=\"12\">\n      <Row className={headlineSmall} marginBottom=\"10\">\n        {isMobile && !showSuccessScreen && (\n          <Box paddingTop=\"4\" marginRight=\"4\" onClick={toggleCart}>\n            <ChevronLeftIcon height={28} width={28} />\n          </Box>\n        )}\n        {showSuccessScreen ? 'Success!' : `Listing ${sellAssets.length} NFTs`}\n        <Box\n          as=\"button\"\n          border=\"none\"\n          color=\"textSecondary\"\n          backgroundColor=\"backgroundSurface\"\n          marginLeft=\"auto\"\n          marginRight=\"0\"\n          paddingRight=\"0\"\n          display={{ sm: 'flex', md: 'none' }}\n          cursor=\"pointer\"\n          onClick={toggleCart}\n        >\n          <XMarkIcon height={28} width={28} fill={themeVars.colors.textPrimary} />\n        </Box>\n      </Row>\n      <Column overflowX=\"hidden\" overflowY=\"auto\" style={{ maxHeight: '60vh' }}>\n        {showSuccessScreen ? (\n          <ListingSection\n            sectionTitle={`Listed ${listings.length} item${pluralize(listings.length)} for sale`}\n            rows={listings}\n            index={0}\n            openIndex={openIndex}\n            isSuccessScreen={true}\n          />\n        ) : (\n          <>\n            <ListingSection\n              sectionTitle={`Approve ${collectionsRequiringApproval.length} collection${pluralize(\n                collectionsRequiringApproval.length\n              )}`}\n              title=\"COLLECTIONS\"\n              rows={collectionsRequiringApproval}\n              index={1}\n              openIndex={openIndex}\n            />\n            <ListingSection\n              sectionTitle={`Confirm ${listings.length} listing${pluralize(listings.length)}`}\n              caption=\"Now you can sign to list each item\"\n              title=\"NFTS\"\n              rows={listings}\n              index={2}\n              openIndex={openIndex}\n            />\n          </>\n        )}\n      </Column>\n      <hr className={styles.sectionDivider} />\n      <Row className={subhead} marginTop=\"12\" marginBottom={showSuccessScreen ? '8' : '20'}>\n        Return if sold\n        <Row className={subheadSmall} marginLeft=\"auto\" marginRight=\"0\">\n          {totalEthListingValue}\n          &nbsp;ETH\n        </Row>\n      </Row>\n      {showSuccessScreen ? (\n        <Box as=\"span\" className={caption} color=\"textSecondary\">\n          Status:{' '}\n          <Box as=\"span\" color=\"green200\">\n            Confirmed\n          </Box>\n        </Box>\n      ) : (\n        <ListingButton onClick={clickStartListingFlow} buttonText={'Start listing'} showWarningOverride={isMobile} />\n      )}\n      {(listingStatus === ListingStatus.PENDING || listingStatus === ListingStatus.SIGNING) && (\n        <Box\n          as=\"button\"\n          border=\"none\"\n          backgroundColor=\"backgroundSurface\"\n          cursor=\"pointer\"\n          color=\"orange\"\n          className={styles.button}\n          onClick={clickStopListing}\n          type=\"button\"\n        >\n          Stop listing\n        </Box>\n      )}\n    </Column>\n  )\n}\n\nexport default ListingModal\n"],"sourceRoot":""}