{"version":3,"sources":["nft/components/profile/list/NFTListingsGrid.tsx","nft/components/profile/list/ListPage.css.ts","nft/components/profile/list/SetDurationModal.tsx","nft/components/profile/list/SelectMarketplacesDropdown.tsx","nft/components/profile/list/ListPage.tsx","nft/pages/profile/profile.tsx","nft/pages/profile/profile.css.ts"],"names":["SetPriceMethod","WarningType","NFTListingsGrid","selectedMarkets","sellAssets","useSellAsset","state","useState","globalPriceMethod","setGlobalPriceMethod","globalPrice","setGlobalPrice","priceDropdownOptions","useMemo","displayText","onClick","SAME_PRICE","FLOOR_PRICE","PREV_LISTING","marginTop","marginLeft","length","transition","className","bodySmall","color","flex","sm","md","subheadSmall","SortDropdown","dropDownOptions","mini","miniPrompt","display","textAlign","style","map","asset","indexOf","PriceTextInput","listPrice","setListPrice","isGlobalPrice","setGlobalOverride","globalOverride","warning","focused","setFocused","NONE","warningType","setWarningType","removeMarketplaceWarning","removeSellAsset","inputRef","useRef","useEffect","current","value","undefined","floorPrice","BELOW_FLOOR","floor_sell_order_price","ALREADY_LISTED","gap","position","height","width","padding","borderRadius","borderWidth","borderStyle","borderColor","as","pattern","body","placeholder","default","marginRight","backgroundColor","onFocus","onBlur","ref","onChange","v","currentTarget","val","parseFloat","isNaN","Box","cursor","top","badge","lastPrice","formatEth","message","EthPriceDisplay","ethPrice","ethConversion","setEthConversion","fetchPrice","then","price","justifyContent","formatUsdPrice","Duration","ErrorState","MarketplaceRow","removeMarket","showMarketplaceLogo","showGlobalPrice","setAssetListPrice","removeAssetMarketplace","hovered","setHovered","handleHover","marketplaceFee","markets","max","forEach","market","fee","maxMarketFee","royalties","name","LOOKS_RARE_CREATOR_BASIS_POINTS","basisPoints","feeInEth","userReceives","profit","profitPercent","Math","round","marketplace","listingWarnings","listingWarning","onMouseEnter","onMouseLeave","e","stopPropagation","visibility","src","alt","objectFit","icon","toFixed","fontSize","NFTListRow","expandMarketplaceRows","setExpandMarketplaceRows","removeAsset","localMarkets","setLocalMarkets","JSON","parse","stringify","marginBottom","flexWrap","minWidth","maxWidth","opacity","imageUrl","paddingRight","overflow","textOverflow","whiteSpace","tokenId","collection","collectionIsVerified","index","splice","MarketplaceRowWrapper","styled","Row","theme","backgroundInteractive","MarketplaceDropdownIcon","img","FeeText","div","textSecondary","HeaderButtonWrap","backgroundModule","SMALL_MEDIA_BREAKPOINT","HeaderButtonContentWrapper","MarketIcon","totalSelected","Chevron","ChevronUpIcon","textPrimary","duration","fast","isOpen","ModalWrapper","DropdownWrapper","Column","Z_INDEX","modalBackdrop","SelectMarketplacesDropdown","setSelectedMarkets","useReducer","s","toggleIsOpen","dropdownDisplayText","useOnClickOutside","buttonTextMedium","secondaryColor","themeVars","colors","ListingMarkets","isSelected","includes","toggleHovered","toggleSelected","filter","selected","BodyPrimary","caption","Checkbox","checked","preventDefault","InputWrapper","isInvalid","accentCritical","backgroundOutline","ThemedText","ErrorMessage","WarningIcon","AlertTriangle","SetDurationModal","day","setDuration","displayDuration","setDisplayDuration","amount","setAmount","valid","errorState","setErrorState","setGlobalExpiration","selectDuration","durationOptions","hour","week","month","expiration","convertDurationToExpiration","Date","now","empty","overMax","type","event","target","flexShrink","pluralize","left","durationFactor","MarketWrap","section","ListingHeader","GridWrapper","MobileListButtonWrapper","ListPage","setSellPageState","useProfilePageState","setProfilePageState","setGlobalMarketplaces","toggleBag","useBag","listings","useNFTList","collectionsRequiringApproval","listingStatus","setListingStatus","isMobile","useIsMobile","getListingState","allListingsApproved","ListingStatus","APPROVED","anyPaused","anyActiveFailures","anyActiveSigning","anyActiveRejections","PAUSED","SIGNING","allListingsPending","allCollectionsPending","allListingsDefined","PENDING","FAILED","CONTINUE","fill","ProfilePageStateType","VIEWING","headlineSmall","headlineLarge","ListingButton","buttonText","ProfileContent","sellPageState","removeAllMarketplaceWarnings","resetSellAssets","reset","clearCollectionFilters","useWalletCollections","DEFINED","account","useWeb3React","accountRef","toggleWalletModal","useToggleWalletModal","cartExpanded","bagExpanded","page","PageName","NFT_PROFILE_PAGE","shouldLogImpression","ProfilePage","minHeight","flexDirection","headlineMedium","buttonMedium","Profile","fallback","ProfilePageLoadingSkeleton"],"mappings":"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","file":"static/js/9.96c99cac.chunk.js","sourcesContent":["import { Box } from 'nft/components/Box'\nimport { SortDropdown } from 'nft/components/common/SortDropdown'\nimport { Column, Row } from 'nft/components/Flex'\nimport { AttachPriceIcon, EditPriceIcon, RowsCollpsedIcon, RowsExpandedIcon, VerifiedIcon } from 'nft/components/icons'\nimport { NumericInput } from 'nft/components/layout/Input'\nimport { badge, body, bodySmall, subheadSmall } from 'nft/css/common.css'\nimport { useSellAsset } from 'nft/hooks'\nimport { DropDownOption, ListingMarket, ListingWarning, WalletAsset } from 'nft/types'\nimport { LOOKS_RARE_CREATOR_BASIS_POINTS } from 'nft/utils'\nimport { formatEth, formatUsdPrice } from 'nft/utils/currency'\nimport { fetchPrice } from 'nft/utils/fetchPrice'\nimport { Dispatch, FormEvent, useEffect, useMemo, useRef, useState } from 'react'\n\nimport * as styles from './ListPage.css'\n\nenum SetPriceMethod {\n  SAME_PRICE,\n  FLOOR_PRICE,\n  PREV_LISTING,\n}\n\nexport const NFTListingsGrid = ({ selectedMarkets }: { selectedMarkets: ListingMarket[] }) => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const [globalPriceMethod, setGlobalPriceMethod] = useState<SetPriceMethod>()\n  const [globalPrice, setGlobalPrice] = useState<number>()\n\n  const priceDropdownOptions: DropDownOption[] = useMemo(\n    () => [\n      {\n        displayText: 'Same price',\n        onClick: () => setGlobalPriceMethod(SetPriceMethod.SAME_PRICE),\n      },\n      {\n        displayText: 'Floor price',\n        onClick: () => setGlobalPriceMethod(SetPriceMethod.FLOOR_PRICE),\n      },\n      {\n        displayText: 'Prev. listing',\n        onClick: () => setGlobalPriceMethod(SetPriceMethod.PREV_LISTING),\n      },\n    ],\n    []\n  )\n\n  return (\n    <Column>\n      <Row marginTop=\"20\">\n        <Column\n          marginLeft={selectedMarkets.length > 1 ? '36' : '0'}\n          transition=\"500\"\n          className={bodySmall}\n          color=\"textSecondary\"\n          flex=\"2\"\n        >\n          NFT\n        </Column>\n        <Row flex={{ sm: '1.5', md: '3' }}>\n          <Column className={subheadSmall} flex=\"1.5\">\n            <SortDropdown dropDownOptions={priceDropdownOptions} mini miniPrompt=\"Set price by\" />\n          </Column>\n          <Column\n            className={bodySmall}\n            color=\"textSecondary\"\n            flex=\"1\"\n            display={{ sm: 'none', md: 'flex' }}\n            textAlign=\"right\"\n          >\n            Marketplace fee\n          </Column>\n          <Column\n            className={bodySmall}\n            color=\"textSecondary\"\n            flex=\"1\"\n            display={{ sm: 'none', md: 'flex' }}\n            textAlign=\"right\"\n          >\n            Royalties\n          </Column>\n          <Column\n            className={bodySmall}\n            color=\"textSecondary\"\n            style={{ flex: '1.5' }}\n            display={{ sm: 'none', md: 'flex' }}\n            textAlign=\"right\"\n          >\n            You receive\n          </Column>\n        </Row>\n      </Row>\n      {sellAssets.map((asset) => {\n        return (\n          <>\n            <NFTListRow\n              asset={asset}\n              globalPriceMethod={globalPriceMethod}\n              globalPrice={globalPrice}\n              setGlobalPrice={setGlobalPrice}\n              selectedMarkets={selectedMarkets}\n            />\n            {sellAssets.indexOf(asset) < sellAssets.length - 1 && <hr className={styles.nftDivider} />}\n          </>\n        )\n      })}\n    </Column>\n  )\n}\n\nenum WarningType {\n  BELOW_FLOOR = 'LISTING BELOW FLOOR ',\n  ALREADY_LISTED = 'ALREADY LISTED FOR ',\n  NONE = '',\n}\n\ninterface PriceTextInputProps {\n  listPrice?: number\n  setListPrice: Dispatch<number | undefined>\n  isGlobalPrice: boolean\n  setGlobalOverride: Dispatch<boolean>\n  globalOverride: boolean\n  warning?: ListingWarning\n  asset: WalletAsset\n}\n\nconst PriceTextInput = ({\n  listPrice,\n  setListPrice,\n  isGlobalPrice,\n  setGlobalOverride,\n  globalOverride,\n  warning,\n  asset,\n}: PriceTextInputProps) => {\n  const [focused, setFocused] = useState(false)\n  const [warningType, setWarningType] = useState(WarningType.NONE)\n  const removeMarketplaceWarning = useSellAsset((state) => state.removeMarketplaceWarning)\n  const removeSellAsset = useSellAsset((state) => state.removeSellAsset)\n  const inputRef = useRef() as React.MutableRefObject<HTMLInputElement>\n\n  useEffect(() => {\n    inputRef.current.value = listPrice !== undefined ? `${listPrice}` : ''\n    setWarningType(WarningType.NONE)\n    if (!warning && listPrice) {\n      if (listPrice < asset.floorPrice) setWarningType(WarningType.BELOW_FLOOR)\n      else if (asset.floor_sell_order_price && listPrice >= asset.floor_sell_order_price)\n        setWarningType(WarningType.ALREADY_LISTED)\n    } else if (warning && listPrice && listPrice >= 0) removeMarketplaceWarning(asset, warning)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [listPrice])\n\n  return (\n    <Column gap=\"12\" position=\"relative\">\n      <Row\n        color=\"textTertiary\"\n        height=\"44\"\n        width=\"min\"\n        padding=\"4\"\n        borderRadius=\"8\"\n        borderWidth=\"1px\"\n        borderStyle=\"solid\"\n        borderColor={\n          warningType !== WarningType.NONE && !focused\n            ? 'orange'\n            : isGlobalPrice\n            ? 'genieBlue'\n            : listPrice != null\n            ? 'textSecondary'\n            : 'gray700'\n        }\n      >\n        <NumericInput\n          as=\"input\"\n          pattern=\"[0-9]\"\n          borderStyle=\"none\"\n          className={body}\n          color={{ placeholder: 'textSecondary', default: 'textPrimary' }}\n          placeholder=\"0\"\n          marginRight=\"0\"\n          marginLeft=\"14\"\n          backgroundColor=\"none\"\n          style={{ width: '68px' }}\n          onFocus={() => setFocused(true)}\n          onBlur={() => {\n            setFocused(false)\n          }}\n          ref={inputRef}\n          onChange={(v: FormEvent<HTMLInputElement>) => {\n            if (!listPrice && v.currentTarget.value === '0.') {\n              return\n            }\n            const val = parseFloat(v.currentTarget.value)\n            setListPrice(isNaN(val) ? undefined : val)\n          }}\n        />\n        <Box color={listPrice && listPrice >= 0 ? 'textPrimary' : 'textSecondary'} marginRight=\"16\">\n          &nbsp;ETH\n        </Box>\n        <Box\n          cursor=\"pointer\"\n          display={isGlobalPrice || globalOverride ? 'block' : 'none'}\n          position=\"absolute\"\n          style={{ marginTop: '-36px', marginLeft: '124px' }}\n          backgroundColor=\"backgroundSurface\"\n          onClick={() => setGlobalOverride(!globalOverride)}\n        >\n          {globalOverride ? <AttachPriceIcon /> : <EditPriceIcon />}\n        </Box>\n      </Row>\n      <Row\n        top=\"52\"\n        width=\"max\"\n        className={badge}\n        color={warningType === WarningType.BELOW_FLOOR && !focused ? 'orange' : 'textSecondary'}\n        position=\"absolute\"\n      >\n        {focused ? (\n          <>\n            <Row display={asset.lastPrice ? 'flex' : 'none'} marginRight=\"8\">\n              LAST: {formatEth(asset.lastPrice)} ETH\n            </Row>\n            <Row display={asset.floorPrice ? 'flex' : 'none'}>FLOOR: {formatEth(asset.floorPrice)} ETH</Row>\n          </>\n        ) : (\n          <>\n            {warning\n              ? warning.message\n              : warningType !== WarningType.NONE && (\n                  <>\n                    {warningType}\n                    {warningType === WarningType.BELOW_FLOOR\n                      ? formatEth(asset.floorPrice)\n                      : formatEth(asset.floor_sell_order_price)}\n                    ETH\n                    <Box\n                      color={warningType === WarningType.BELOW_FLOOR ? 'genieBlue' : 'orange'}\n                      marginLeft=\"8\"\n                      cursor=\"pointer\"\n                      onClick={() => {\n                        warningType === WarningType.ALREADY_LISTED && removeSellAsset(asset)\n                        setWarningType(WarningType.NONE)\n                      }}\n                    >\n                      {warningType === WarningType.BELOW_FLOOR ? 'DISMISS' : 'REMOVE ITEM'}\n                    </Box>\n                  </>\n                )}\n          </>\n        )}\n      </Row>\n    </Column>\n  )\n}\n\nconst EthPriceDisplay = ({ ethPrice = 0 }: { ethPrice?: number }) => {\n  const [ethConversion, setEthConversion] = useState(3000)\n  useEffect(() => {\n    fetchPrice().then((price) => {\n      setEthConversion(price ?? 0)\n    })\n  }, [])\n\n  return (\n    <Column width=\"full\">\n      <Row width=\"full\" justifyContent=\"flex-end\">\n        {ethPrice !== 0 ? (\n          <Box className={body} color=\"textSecondary\" marginLeft=\"12\" marginRight=\"0\">\n            {formatUsdPrice(ethPrice * ethConversion)}\n          </Box>\n        ) : (\n          '- ETH'\n        )}\n      </Row>\n    </Column>\n  )\n}\n\nfunction maxMarketFee(markets: ListingMarket[]): number {\n  let max = -1\n  markets.forEach((market) => {\n    if (market.fee > max) {\n      max = market.fee\n    }\n  })\n  return max\n}\n\ninterface MarketplaceRowProps {\n  globalPriceMethod?: SetPriceMethod\n  globalPrice?: number\n  setGlobalPrice: Dispatch<number | undefined>\n  selectedMarkets: ListingMarket[]\n  removeMarket?: () => void\n  asset: WalletAsset\n  showMarketplaceLogo: boolean\n}\n\nconst MarketplaceRow = ({\n  globalPriceMethod,\n  globalPrice,\n  setGlobalPrice,\n  selectedMarkets,\n  removeMarket = undefined,\n  asset,\n  showMarketplaceLogo,\n}: MarketplaceRowProps) => {\n  const [listPrice, setListPrice] = useState<number>()\n  const [globalOverride, setGlobalOverride] = useState(false)\n  const showGlobalPrice = globalPriceMethod === SetPriceMethod.SAME_PRICE && !globalOverride && globalPrice\n  const setAssetListPrice = useSellAsset((state) => state.setAssetListPrice)\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const marketplaceFee = selectedMarkets.length > 0 ? maxMarketFee(selectedMarkets) : 0\n  const price = showGlobalPrice ? globalPrice : listPrice\n  // LooksRare is a unique case where royalties for creators are a flat 0.5% or 50 basis points\n  const royalties =\n    (selectedMarkets.length === 1 && selectedMarkets[0].name === 'LooksRare'\n      ? LOOKS_RARE_CREATOR_BASIS_POINTS\n      : asset.basisPoints) * 0.01\n  const feeInEth = price && (price * (royalties + marketplaceFee)) / 100\n  const userReceives = price && feeInEth && price - feeInEth\n  const profit = userReceives && asset.lastPrice && userReceives - asset.lastPrice\n  const profitPercent = profit && asset.lastPrice && Math.round(profit && (profit / asset.lastPrice) * 100)\n\n  useEffect(() => {\n    if (globalPriceMethod === SetPriceMethod.FLOOR_PRICE) {\n      setListPrice(asset.floorPrice)\n      setGlobalPrice(asset.floorPrice)\n    } else if (globalPriceMethod === SetPriceMethod.PREV_LISTING) {\n      setListPrice(asset.lastPrice)\n      setGlobalPrice(asset.lastPrice)\n    } else if (globalPriceMethod === SetPriceMethod.SAME_PRICE)\n      listPrice && !globalPrice ? setGlobalPrice(listPrice) : setListPrice(globalPrice)\n\n    setGlobalOverride(false)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [globalPriceMethod])\n\n  useEffect(() => {\n    if (selectedMarkets.length)\n      for (const marketplace of selectedMarkets) setAssetListPrice(asset, listPrice, marketplace)\n    else setAssetListPrice(asset, listPrice)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [listPrice])\n\n  useEffect(() => {\n    let price: number | undefined = undefined\n    if (globalOverride) {\n      if (!listPrice) setListPrice(globalPrice)\n      price = listPrice ? listPrice : globalPrice\n    } else {\n      price = globalPrice\n    }\n    if (selectedMarkets.length) for (const marketplace of selectedMarkets) setAssetListPrice(asset, price, marketplace)\n    else setAssetListPrice(asset, price)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [globalOverride])\n\n  useEffect(() => {\n    if (globalPriceMethod === SetPriceMethod.SAME_PRICE && !globalOverride) {\n      if (selectedMarkets.length)\n        for (const marketplace of selectedMarkets) setAssetListPrice(asset, globalPrice, marketplace)\n      else setAssetListPrice(asset, globalPrice)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [globalPrice])\n\n  let warning: ListingWarning | undefined = undefined\n  if (asset.listingWarnings && asset.listingWarnings?.length > 0) {\n    if (showMarketplaceLogo) {\n      for (const listingWarning of asset.listingWarnings) {\n        if (listingWarning.marketplace.name === selectedMarkets[0].name) warning = listingWarning\n      }\n    } else {\n      warning = asset.listingWarnings[0]\n    }\n  }\n\n  return (\n    <Row transition=\"500\" marginLeft={selectedMarkets.length > 1 ? '20' : '0'}>\n      {showMarketplaceLogo && (\n        <Column\n          position=\"relative\"\n          cursor=\"pointer\"\n          onMouseEnter={handleHover}\n          onMouseLeave={handleHover}\n          style={{ marginLeft: '-28px' }}\n          onClick={(e) => {\n            e.stopPropagation()\n            removeAssetMarketplace(asset, selectedMarkets[0])\n            removeMarket && removeMarket()\n          }}\n        >\n          <Box className={styles.removeMarketplace} visibility={hovered ? 'visible' : 'hidden'} position=\"absolute\">\n            <Box as=\"img\" width=\"32\" src=\"/nft/svgs/minusCircle.svg\" alt=\"Remove item\" />\n          </Box>\n          <Box\n            as=\"img\"\n            alt={selectedMarkets[0].name}\n            width=\"28\"\n            height=\"28\"\n            borderRadius=\"4\"\n            objectFit=\"cover\"\n            src={selectedMarkets[0].icon}\n            marginRight=\"16\"\n          />\n        </Column>\n      )}\n      <Column style={{ flex: '1.5' }}>\n        {globalPriceMethod === SetPriceMethod.SAME_PRICE && !globalOverride ? (\n          <PriceTextInput\n            listPrice={globalPrice}\n            setListPrice={setGlobalPrice}\n            isGlobalPrice={true}\n            setGlobalOverride={setGlobalOverride}\n            globalOverride={globalOverride}\n            warning={warning}\n            asset={asset}\n          />\n        ) : (\n          <PriceTextInput\n            listPrice={listPrice}\n            setListPrice={setListPrice}\n            isGlobalPrice={false}\n            setGlobalOverride={setGlobalOverride}\n            globalOverride={globalOverride}\n            warning={warning}\n            asset={asset}\n          />\n        )}\n      </Column>\n      <Row flex=\"1\" display={{ sm: 'none', md: 'flex' }}>\n        <Box className={body} color=\"textSecondary\" width=\"full\" textAlign=\"right\">\n          {marketplaceFee > 0 ? marketplaceFee + (selectedMarkets.length > 1 ? '% MAX' : '%') : '--%'}\n        </Box>\n      </Row>\n      <Row flex=\"1\" display={{ sm: 'none', md: 'flex' }}>\n        <Box className={body} color=\"textSecondary\" width=\"full\" textAlign=\"right\">\n          {royalties.toFixed(1)}%\n        </Box>\n      </Row>\n      <Row style={{ flex: '1.5' }} display={{ sm: 'none', md: 'flex' }}>\n        <Column width=\"full\">\n          <EthPriceDisplay ethPrice={userReceives} />\n          {(showGlobalPrice ? globalPrice && globalPrice !== 0 : listPrice !== 0) && (\n            <Row marginTop=\"4\" width=\"full\" fontSize=\"12\" color=\"textSecondary\">\n              {profit ? <Box marginLeft=\"auto\">Profit: {formatEth(profit)} ETH</Box> : null}\n              {profitPercent ? (\n                <Box marginLeft=\"8\" marginRight=\"0\">\n                  ({profitPercent > 0 && '+'}\n                  {profitPercent > 1000 ? Math.round(profitPercent / 1000) + 'K' : profitPercent}%)\n                </Box>\n              ) : null}\n            </Row>\n          )}\n        </Column>\n      </Row>\n    </Row>\n  )\n}\n\nexport interface NFTListRowProps {\n  asset: WalletAsset\n  globalPriceMethod?: SetPriceMethod\n  setGlobalPrice: Dispatch<number | undefined>\n  globalPrice?: number\n  selectedMarkets: ListingMarket[]\n}\n\nconst NFTListRow = ({ asset, globalPriceMethod, globalPrice, setGlobalPrice, selectedMarkets }: NFTListRowProps) => {\n  const [expandMarketplaceRows, setExpandMarketplaceRows] = useState(false)\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const [localMarkets, setLocalMarkets] = useState([])\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  useEffect(() => {\n    setLocalMarkets(JSON.parse(JSON.stringify(selectedMarkets)))\n    selectedMarkets.length < 2 && setExpandMarketplaceRows(false)\n  }, [selectedMarkets])\n\n  return (\n    <Row marginTop=\"24\" marginBottom=\"24\">\n      <Row flexWrap=\"nowrap\" flex=\"2\" marginTop=\"0\" marginBottom=\"auto\" minWidth=\"0\">\n        <Box\n          transition=\"500\"\n          style={{\n            maxWidth: localMarkets.length > 1 ? '28px' : '0',\n            opacity: localMarkets.length > 1 ? '1' : '0',\n          }}\n          cursor=\"pointer\"\n          onClick={() => setExpandMarketplaceRows(!expandMarketplaceRows)}\n        >\n          {expandMarketplaceRows ? <RowsExpandedIcon /> : <RowsCollpsedIcon />}\n        </Box>\n        <Box\n          position=\"relative\"\n          cursor=\"pointer\"\n          onMouseEnter={handleHover}\n          onMouseLeave={handleHover}\n          onClick={() => {\n            removeAsset(asset)\n          }}\n        >\n          <Box className={styles.removeAsset} visibility={hovered ? 'visible' : 'hidden'} position=\"absolute\">\n            <Box as=\"img\" width=\"32\" src=\"/nft/svgs/minusCircle.svg\" alt=\"Remove item\" />\n          </Box>\n          <Box\n            as=\"img\"\n            alt={asset.name}\n            width=\"48\"\n            height=\"48\"\n            borderRadius=\"8\"\n            marginLeft={localMarkets.length > 1 ? '8' : '0'}\n            marginRight=\"8\"\n            transition=\"500\"\n            src={asset.imageUrl || '/nft/svgs/image-placeholder.svg'}\n          />\n        </Box>\n        <Column gap=\"4\" minWidth=\"0\">\n          <Box paddingRight=\"8\" overflow=\"hidden\" textOverflow=\"ellipsis\" whiteSpace=\"nowrap\" className={subheadSmall}>\n            {asset.name ? asset.name : `#${asset.tokenId}`}\n          </Box>\n          <Box paddingRight=\"8\" overflow=\"hidden\" textOverflow=\"ellipsis\" whiteSpace=\"nowrap\" className={bodySmall}>\n            {asset.collection?.name}\n            {asset.collectionIsVerified && <VerifiedIcon style={{ marginBottom: '-5px' }} />}\n          </Box>\n        </Column>\n      </Row>\n      <Column flex={{ sm: '1', md: '3' }} gap=\"24\">\n        {expandMarketplaceRows ? (\n          localMarkets.map((market, index) => {\n            return (\n              <MarketplaceRow\n                globalPriceMethod={globalPriceMethod}\n                globalPrice={globalPrice}\n                setGlobalPrice={setGlobalPrice}\n                selectedMarkets={[market]}\n                removeMarket={() => localMarkets.splice(index, 1)}\n                asset={asset}\n                showMarketplaceLogo={true}\n                key={index}\n              />\n            )\n          })\n        ) : (\n          <MarketplaceRow\n            globalPriceMethod={globalPriceMethod}\n            globalPrice={globalPrice}\n            setGlobalPrice={setGlobalPrice}\n            selectedMarkets={localMarkets}\n            asset={asset}\n            showMarketplaceLogo={false}\n          />\n        )}\n      </Column>\n    </Row>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/profile/list/ListPage.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/profile/list/ListPage.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xb2xxcTRuNCB7CiAgdHJhbnNmb3JtOiByb3RhdGUoMTgwZGVnKTsKfQouXzFvbHFxNG41IHsKICBib3gtc2hhZG93OiAwcHggNHB4IDE2cHggdmFyKC0tZ2VuaWUtY29sb3JzLWJhY2tncm91bmRTdXJmYWNlKTsKICBtYXJnaW4tbGVmdDogLTEycHg7Cn0KLl8xb2xxcTRuNiB7CiAgdG9wOiAzMXB4OwogIGxlZnQ6IDhweDsKfQouXzFvbHFxNG43IHsKICB0b3A6IDExcHg7CiAgcmlnaHQ6IDE0cHg7Cn0=\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var buttonSelected = 'rgw6ez7j5 rgw6ez79p rgw6ez4zx';\nexport var nftDivider = 'rgw6ez169 rgw6ez153 rgw6ez7b9 rgw6ez7j1 rgw6ez79p rgw6ez4y3';\nexport var chevronDown = '_1olqq4n4';\nexport var dropdown = '_1olqq4n5';\nexport var removeAsset = '_1olqq4n6';\nexport var removeMarketplace = '_1olqq4n7';","import ms from 'ms.macro'\nimport { SortDropdown } from 'nft/components/common/SortDropdown'\nimport { Column, Row } from 'nft/components/Flex'\nimport { NumericInput } from 'nft/components/layout/Input'\nimport { bodySmall, buttonTextMedium, caption } from 'nft/css/common.css'\nimport { useSellAsset } from 'nft/hooks'\nimport { DropDownOption } from 'nft/types'\nimport { pluralize } from 'nft/utils/roundAndPluralize'\nimport { useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle } from 'react-feather'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nconst ModalWrapper = styled(Column)`\n  gap: 4px;\n  position: relative;\n`\n\nconst InputWrapper = styled(Row)<{ isInvalid: boolean }>`\n  padding: 12px 8px 12px 12px;\n  border: 1px solid;\n  position: relative;\n  height: 44px;\n  border-radius: 8px;\n  border-color: ${({ isInvalid, theme }) => (isInvalid ? theme.accentCritical : theme.backgroundOutline)};\n`\n\nconst DropdownWrapper = styled(ThemedText.BodyPrimary)`\n  cursor: pointer;\n  display: flex;\n  justify-content: flex-end;\n  height: min-content;\n  width: 80px;\n  &:hover {\n    background-color: ${({ theme }) => theme.backgroundInteractive};\n  }\n  border-radius: 12px;\n  padding: 8px;\n`\n\nconst ErrorMessage = styled(Row)`\n  color: ${({ theme }) => theme.accentCritical};\n  gap: 4px;\n  position: absolute;\n  top: 44px;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 16px;\n  color: ${({ theme }) => theme.accentCritical};\n`\n\nenum Duration {\n  hour = 'hour',\n  day = 'day',\n  week = 'week',\n  month = 'month',\n}\n\nenum ErrorState {\n  valid,\n  empty,\n  overMax,\n}\n\nexport const SetDurationModal = () => {\n  const [duration, setDuration] = useState(Duration.day)\n  const [displayDuration, setDisplayDuration] = useState(Duration.day)\n  const [amount, setAmount] = useState(7)\n  const [errorState, setErrorState] = useState(ErrorState.valid)\n  const setGlobalExpiration = useSellAsset((state) => state.setGlobalExpiration)\n  const setCustomExpiration = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setAmount(!!event.target.value.length ? parseFloat(event.target.value) : 0)\n    setDuration(displayDuration)\n  }\n  const selectDuration = (duration: Duration) => {\n    setDuration(duration)\n    setDisplayDuration(duration)\n  }\n  const durationOptions: DropDownOption[] = useMemo(\n    () => [\n      {\n        displayText: 'Hours',\n        onClick: () => selectDuration(Duration.hour),\n      },\n      {\n        displayText: 'Days',\n        onClick: () => selectDuration(Duration.day),\n      },\n      {\n        displayText: 'Weeks',\n        onClick: () => selectDuration(Duration.week),\n      },\n      {\n        displayText: 'Months',\n        onClick: () => selectDuration(Duration.month),\n      },\n    ],\n    []\n  )\n  useEffect(() => {\n    const expiration = convertDurationToExpiration(amount, duration)\n    if (expiration * 1000 - Date.now() < ms`60 seconds`) setErrorState(ErrorState.empty)\n    else if (expiration * 1000 - Date.now() > ms`180 days`) setErrorState(ErrorState.overMax)\n    else setErrorState(ErrorState.valid)\n    setGlobalExpiration(expiration)\n  }, [amount, duration, setGlobalExpiration])\n\n  return (\n    <ModalWrapper>\n      <InputWrapper isInvalid={errorState !== ErrorState.valid}>\n        <NumericInput\n          as=\"input\"\n          type=\"number\"\n          pattern=\"[0-9]\"\n          borderStyle=\"none\"\n          className={bodySmall}\n          color={{ placeholder: 'textSecondary', default: 'textPrimary' }}\n          value={amount}\n          width=\"32\"\n          marginRight=\"4\"\n          backgroundColor=\"none\"\n          onChange={setCustomExpiration}\n          flexShrink=\"0\"\n        />\n        <DropdownWrapper className={buttonTextMedium}>\n          <SortDropdown\n            dropDownOptions={durationOptions}\n            mini\n            miniPrompt={displayDuration + (displayDuration === duration ? pluralize(amount) : 's')}\n            left={38}\n            top={38}\n          />\n        </DropdownWrapper>\n      </InputWrapper>\n      {errorState !== ErrorState.valid && (\n        <ErrorMessage className={caption}>\n          {' '}\n          <WarningIcon /> {errorState === ErrorState.overMax ? 'Maximum 6 months' : 'Set duration'}\n        </ErrorMessage>\n      )}\n    </ModalWrapper>\n  )\n}\n\nconst convertDurationToExpiration = (amount: number, duration: Duration) => {\n  const durationFactor = () => {\n    switch (duration) {\n      case Duration.hour:\n        return 1\n      case Duration.day:\n        return 24\n      case Duration.week:\n        return 24 * 7\n      default: // month\n        return 24 * 30\n    }\n  }\n  return Math.round((Date.now() + ms`1 hour` * durationFactor() * amount) / 1000)\n}\n","import { SMALL_MEDIA_BREAKPOINT } from 'components/Tokens/constants'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ChevronUpIcon } from 'nft/components/icons'\nimport { Checkbox } from 'nft/components/layout/Checkbox'\nimport { buttonTextMedium, caption } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { ListingMarket } from 'nft/types'\nimport { ListingMarkets } from 'nft/utils/listNfts'\nimport { Dispatch, FormEvent, useMemo, useReducer, useRef } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { Z_INDEX } from 'theme/zIndex'\n\nconst MarketplaceRowWrapper = styled(Row)`\n  gap: 6px;\n  height: 44px;\n  width: 100%;\n  cursor: pointer;\n  justify-content: space-between;\n  padding: 0px 16px;\n  &:hover {\n    background-color: ${({ theme }) => theme.backgroundInteractive};\n  }\n  border-radius: 12px;\n`\n\nconst MarketplaceDropdownIcon = styled.img`\n  width: 24px;\n  height: 24px;\n  border-radius: 4px;\n  object-fit: cover;\n`\n\nconst FeeText = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n`\n\ninterface MarketplaceRowProps {\n  market: ListingMarket\n  setSelectedMarkets: Dispatch<ListingMarket[]>\n  selectedMarkets: ListingMarket[]\n}\n\nconst MarketplaceRow = ({ market, setSelectedMarkets, selectedMarkets }: MarketplaceRowProps) => {\n  const isSelected = selectedMarkets.includes(market)\n  const [hovered, toggleHovered] = useReducer((s) => !s, false)\n\n  const toggleSelected = () => {\n    if (selectedMarkets.length === 1 && isSelected) return\n    isSelected\n      ? setSelectedMarkets(selectedMarkets.filter((selected: ListingMarket) => selected !== market))\n      : setSelectedMarkets([...selectedMarkets, market])\n  }\n\n  const handleCheckbox = (e: FormEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n  }\n  return (\n    <MarketplaceRowWrapper onMouseEnter={toggleHovered} onMouseLeave={toggleHovered} onClick={toggleSelected}>\n      <Row gap=\"12\" onClick={toggleSelected}>\n        <MarketplaceDropdownIcon alt={market.name} src={market.icon} />\n        <Column>\n          <ThemedText.BodyPrimary>{market.name}</ThemedText.BodyPrimary>\n          <FeeText className={caption}>{market.fee}% fee</FeeText>\n        </Column>\n      </Row>\n\n      <Checkbox hovered={hovered} checked={isSelected} onClick={handleCheckbox}>\n        <span />\n      </Checkbox>\n    </MarketplaceRowWrapper>\n  )\n}\n\nconst HeaderButtonWrap = styled(Row)`\n  padding: 12px;\n  border-radius: 12px;\n  width: 180px;\n  justify-content: space-between;\n  background: ${({ theme }) => theme.backgroundModule};\n  cursor: pointer;\n  &:hover {\n    background-color: ${({ theme }) => theme.backgroundInteractive};\n  }\n  @media screen and (min-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    width: 220px;\n  }\n`\n\nconst HeaderButtonContentWrapper = styled.div`\n  display: flex;\n`\n\nconst MarketIcon = styled.img<{ index: number; totalSelected: number }>`\n  height: 20px;\n  width: 20px;\n  margin-right: 8px;\n  border: 1px solid;\n  border-color: ${({ theme }) => theme.backgroundInteractive};\n  border-radius: 4px;\n  z-index: ${({ index, totalSelected }) => totalSelected - index};\n  margin-left: ${({ index }) => `${index === 0 ? 0 : -18}px`};\n`\n\nconst Chevron = styled(ChevronUpIcon)<{ isOpen: boolean }>`\n  height: 20px;\n  width: 20px;\n  fill: ${({ theme }) => theme.textPrimary};\n  transition: ${({\n    theme: {\n      transition: { duration },\n    },\n  }) => `${duration.fast} transform`};\n  transform: ${({ isOpen }) => `rotate(${isOpen ? 0 : 180}deg)`};\n`\n\nconst ModalWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`\n\nconst DropdownWrapper = styled(Column)<{ isOpen: boolean }>`\n  padding: 16px 0px;\n  background-color: ${({ theme }) => theme.backgroundModule};\n  display: ${({ isOpen }) => (isOpen ? 'flex' : 'none')};\n  position: absolute;\n  top: 52px;\n  width: 100%;\n  border-radius: 12px;\n  gap: 12px;\n  z-index: ${Z_INDEX.modalBackdrop};\n`\n\nexport const SelectMarketplacesDropdown = ({\n  setSelectedMarkets,\n  selectedMarkets,\n}: {\n  setSelectedMarkets: Dispatch<ListingMarket[]>\n  selectedMarkets: ListingMarket[]\n}) => {\n  const [isOpen, toggleIsOpen] = useReducer((s) => !s, false)\n  const dropdownDisplayText = useMemo(\n    () => (selectedMarkets.length === 1 ? selectedMarkets[0].name : 'Multiple'),\n    [selectedMarkets]\n  )\n  const ref = useRef<HTMLDivElement>(null)\n  useOnClickOutside(ref, () => isOpen && toggleIsOpen())\n  return (\n    <ModalWrapper ref={ref}>\n      <HeaderButtonWrap className={buttonTextMedium} onClick={toggleIsOpen}>\n        <HeaderButtonContentWrapper>\n          {selectedMarkets.map((market, index) => {\n            return (\n              <MarketIcon\n                key={index}\n                alt={market.name}\n                src={market.icon}\n                totalSelected={selectedMarkets.length}\n                index={index}\n              />\n            )\n          })}\n          {dropdownDisplayText}\n        </HeaderButtonContentWrapper>\n\n        <Chevron isOpen={isOpen} secondaryColor={themeVars.colors.textPrimary} />\n      </HeaderButtonWrap>\n      <DropdownWrapper isOpen={isOpen}>\n        {ListingMarkets.map((market) => {\n          return MarketplaceRow({ market, setSelectedMarkets, selectedMarkets })\n        })}\n      </DropdownWrapper>\n    </ModalWrapper>\n  )\n}\n","import { SMALL_MEDIA_BREAKPOINT } from 'components/Tokens/constants'\nimport { ListingButton } from 'nft/components/bag/profile/ListingButton'\nimport { getListingState } from 'nft/components/bag/profile/utils'\nimport { Column, Row } from 'nft/components/Flex'\nimport { BackArrowIcon } from 'nft/components/icons'\nimport { headlineLarge, headlineSmall } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { useBag, useIsMobile, useNFTList, useProfilePageState, useSellAsset } from 'nft/hooks'\nimport { ListingStatus, ProfilePageStateType } from 'nft/types'\nimport { ListingMarkets } from 'nft/utils/listNfts'\nimport { useEffect, useState } from 'react'\nimport styled from 'styled-components/macro'\n\nimport { NFTListingsGrid } from './NFTListingsGrid'\nimport { SelectMarketplacesDropdown } from './SelectMarketplacesDropdown'\nimport { SetDurationModal } from './SetDurationModal'\n\nconst MarketWrap = styled.section`\n  gap: 48px;\n  margin: 0px auto;\n  padding: 0px 16px;\n  max-width: 1200px;\n  width: 100%;\n\n  @media screen and (min-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    padding: 0px 44px;\n  }\n`\n\nconst ListingHeader = styled(Row)`\n  align-items: center;\n  justify-content: space-between;\n  flex-wrap: wrap;\n  margin-top: 18px;\n\n  @media screen and (min-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    margin-top: 40px;\n  }\n`\n\nconst GridWrapper = styled.div`\n  margin-top: 24px;\n\n  @media screen and (min-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    margin-left: 40px;\n  }\n`\n\nconst MobileListButtonWrapper = styled.div`\n  display: flex;\n  margin: 14px 16px 32px 16px;\n\n  @media screen and (min-width: ${SMALL_MEDIA_BREAKPOINT}) {\n    display: none;\n  }\n`\n\nexport const ListPage = () => {\n  const { setProfilePageState: setSellPageState } = useProfilePageState()\n  const setGlobalMarketplaces = useSellAsset((state) => state.setGlobalMarketplaces)\n  const [selectedMarkets, setSelectedMarkets] = useState([ListingMarkets[0]]) // default marketplace: x2y2\n  const toggleBag = useBag((s) => s.toggleBag)\n  const listings = useNFTList((state) => state.listings)\n  const collectionsRequiringApproval = useNFTList((state) => state.collectionsRequiringApproval)\n  const listingStatus = useNFTList((state) => state.listingStatus)\n  const setListingStatus = useNFTList((state) => state.setListingStatus)\n  const isMobile = useIsMobile()\n\n  useEffect(() => {\n    const state = getListingState(collectionsRequiringApproval, listings)\n\n    if (state.allListingsApproved) setListingStatus(ListingStatus.APPROVED)\n    else if (state.anyPaused && !state.anyActiveFailures && !state.anyActiveSigning && !state.anyActiveRejections) {\n      setListingStatus(ListingStatus.CONTINUE)\n    } else if (state.anyPaused) setListingStatus(ListingStatus.PAUSED)\n    else if (state.anyActiveSigning) setListingStatus(ListingStatus.SIGNING)\n    else if (state.allListingsPending || (state.allCollectionsPending && state.allListingsDefined))\n      setListingStatus(ListingStatus.PENDING)\n    else if (state.anyActiveFailures && listingStatus !== ListingStatus.PAUSED) setListingStatus(ListingStatus.FAILED)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [listings, collectionsRequiringApproval])\n\n  useEffect(() => {\n    setGlobalMarketplaces(selectedMarkets)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [selectedMarkets])\n\n  return (\n    <Column>\n      <MarketWrap>\n        <ListingHeader>\n          <Row gap=\"4\" marginBottom={{ sm: '18', md: '0' }}>\n            <BackArrowIcon\n              height={isMobile ? 20 : 32}\n              width={isMobile ? 20 : 32}\n              fill={themeVars.colors.textSecondary}\n              onClick={() => setSellPageState(ProfilePageStateType.VIEWING)}\n              cursor=\"pointer\"\n            />\n            <div className={isMobile ? headlineSmall : headlineLarge}>Sell NFTs</div>\n          </Row>\n          <Row gap=\"12\">\n            <SelectMarketplacesDropdown setSelectedMarkets={setSelectedMarkets} selectedMarkets={selectedMarkets} />\n            <SetDurationModal />\n          </Row>\n        </ListingHeader>\n        <GridWrapper>\n          <NFTListingsGrid selectedMarkets={selectedMarkets} />\n        </GridWrapper>\n      </MarketWrap>\n      <MobileListButtonWrapper>\n        <ListingButton onClick={toggleBag} buttonText=\"Continue listing\" />\n      </MobileListButtonWrapper>\n    </Column>\n  )\n}\n","import { Trace } from '@uniswap/analytics'\nimport { PageName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box } from 'nft/components/Box'\nimport { Center, Column } from 'nft/components/Flex'\nimport { ListPage } from 'nft/components/profile/list/ListPage'\nimport { ProfilePage } from 'nft/components/profile/view/ProfilePage'\nimport { ProfilePageLoadingSkeleton } from 'nft/components/profile/view/ProfilePageLoadingSkeleton'\nimport { buttonMedium, headlineMedium } from 'nft/css/common.css'\nimport { useBag, useNFTList, useProfilePageState, useSellAsset, useWalletCollections } from 'nft/hooks'\nimport { ListingStatus, ProfilePageStateType } from 'nft/types'\nimport { Suspense, useEffect, useRef } from 'react'\nimport { useToggleWalletModal } from 'state/application/hooks'\n\nimport * as styles from './profile.css'\n\nconst SHOPPING_BAG_WIDTH = 360\n\nconst ProfileContent = () => {\n  const sellPageState = useProfilePageState((state) => state.state)\n  const setSellPageState = useProfilePageState((state) => state.setProfilePageState)\n  const removeAllMarketplaceWarnings = useSellAsset((state) => state.removeAllMarketplaceWarnings)\n  const resetSellAssets = useSellAsset((state) => state.reset)\n  const clearCollectionFilters = useWalletCollections((state) => state.clearCollectionFilters)\n  const setListingStatus = useNFTList((state) => state.setListingStatus)\n\n  useEffect(() => {\n    removeAllMarketplaceWarnings()\n    setListingStatus(ListingStatus.DEFINED)\n  }, [removeAllMarketplaceWarnings, sellPageState, setListingStatus])\n\n  const { account } = useWeb3React()\n  const accountRef = useRef(account)\n  const toggleWalletModal = useToggleWalletModal()\n\n  useEffect(() => {\n    if (accountRef.current !== account) {\n      accountRef.current = account\n      resetSellAssets()\n      setSellPageState(ProfilePageStateType.VIEWING)\n      clearCollectionFilters()\n    }\n  }, [account, resetSellAssets, setSellPageState, clearCollectionFilters])\n  const cartExpanded = useBag((state) => state.bagExpanded)\n\n  return (\n    <Trace page={PageName.NFT_PROFILE_PAGE} shouldLogImpression>\n      <Box className={styles.profileWrapper}>\n        {/* <Head> TODO: figure out metadata tagging\n          <title>Genie | Sell</title>\n        </Head> */}\n        {!!account ? (\n          <Box style={{ width: `calc(100% - ${cartExpanded ? SHOPPING_BAG_WIDTH : 0}px)` }}>\n            {sellPageState === ProfilePageStateType.VIEWING ? <ProfilePage /> : <ListPage />}\n          </Box>\n        ) : (\n          <Column as=\"section\" gap=\"60\" className={styles.section}>\n            <div style={{ minHeight: '70vh' }}>\n              <Center className={styles.notConnected} flexDirection=\"column\">\n                <Box as=\"span\" className={headlineMedium} color=\"textSecondary\" marginBottom=\"24\" display=\"block\">\n                  No items to display\n                </Box>\n                <Box as=\"button\" className={buttonMedium} onClick={toggleWalletModal}>\n                  Connect Wallet\n                </Box>\n              </Center>\n            </div>\n          </Column>\n        )}\n      </Box>\n    </Trace>\n  )\n}\n\nconst Profile = () => {\n  return (\n    <Suspense fallback={<ProfilePageLoadingSkeleton />}>\n      <ProfileContent />\n    </Suspense>\n  )\n}\n\nexport default Profile\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/pages/profile/profile.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/pages/profile/profile.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xdmRmZ3FyMSB7CiAgbWF4LXdpZHRoOiAxMDAwcHg7CiAgbWFyZ2luOiAwIGF1dG87Cn0KLl8xdmRmZ3FyMiB7CiAgaGVpZ2h0OiA3MHZoOwp9Ci5fMXZkZmdxcjQgewogIHNjcm9sbGJhci13aWR0aDogbm9uZTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var NAVBAR_HEIGHT = '72px';\nexport var section = '_1vdfgqr1 rgw6ez2al rgw6ez295 rgw6ez2g3 rgw6ez2en';\nexport var notConnected = '_1vdfgqr2';\nexport var profileWrapper = '_1vdfgqr4 rgw6ez1br rgw6ez1cm rgw6ez153';"],"sourceRoot":""}