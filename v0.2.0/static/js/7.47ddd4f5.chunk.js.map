{"version":3,"sources":["assets/images/welcomeModal-dark.jpg","assets/images/welcomeModal-dark@2x.jpg","assets/images/welcomeModal-dark@3x.jpg","assets/images/welcomeModal-light.jpg","assets/images/welcomeModal-light@2x.jpg","assets/images/welcomeModal-light@3x.jpg","nft/components/explore/CollectionTable.tsx","nft/components/explore/Carousel.tsx","nft/components/explore/CarouselCard.tsx","nft/components/explore/Banner.tsx","nft/components/explore/Cells/Cells.tsx","nft/components/explore/Cells/Cells.css.ts","nft/components/explore/Explore.css.ts","nft/components/explore/Table.tsx","nft/components/explore/TrendingCollections.tsx","nft/components/explore/WelcomeModal.tsx","nft/pages/explore/index.tsx"],"names":["ColumnHeaders","CarouselContainer","styled","div","CarouselCardContainer","theme","breakpoint","md","CarouselItemCard","a","CarouselItemIcon","textPrimary","sm","opacity","hover","MAX_CARD_WIDTH","Carousel","children","activeIndex","toggleNextSlide","idx","useCallback","x","l","length","calculateCardIndex","getPos","i","firstVis","firstVisIdx","calculateFirstCardIndex","useSprings","springs","set","prev","useRef","runSprings","y","vy","Math","floor","position","prevPosition","current","rank","calculateRank","immediate","config","tension","friction","direction","useEffect","toggleSlide","next","interval","setInterval","clearInterval","onClick","width","height","map","style","LoadingCarousel","CarouselCardBorder","transition","duration","fast","timing","inOut","backgroundOutline","deepShadow","CardHeaderContainer","src","LoadingCardHeaderContainer","loadingAnimation","backgroundInteractive","CardHeaderColumn","IconContainer","CollectionNameContainer","LoadingCollectionNameContainer","LoadingBubble","HeaderOverlay","CollectionImage","img","accentTextLightPrimary","LoadingCollectionImage","LoadingTableElement","TableElement","FirstColumnTextWrapper","CardBottomContainer","MarketplaceIcon","backgroundSurface","xs","MarketplaceRow","marketplace","floorInEth","listings","toLowerCase","alt","BodySmall","color","Number","formatNumberOrString","NumberType","NFTTokenFloorPriceTrailingZeros","MARKETS_TO_CHECK","Markets","Opensea","X2Y2","LooksRare","MARKETS_ENUM_TO_NAME","CarouselCard","collection","gqlCollection","useCollectionQuery","address","SubHeaderSmall","formatWeiToDecimal","toString","marketplaceCount","reduce","acc","cur","count","market","find","floorPrice","LoadingTable","Array","index","CollectionName","ThemedText","MediumHeader","CarouselCardHeader","bannerImageUrl","imageUrl","fontWeight","name","isVerified","LoadingCarouselCard","BannerContainer","AbsoluteFill","BannerBackground","props","backgroundImage","darkMode","PlainBackground","opacify","userThemeColor","BannerMainArea","HeaderContainer","lg","EXCLUDED_COLLECTIONS","Banner","navigate","useNavigate","data","useQuery","fetchTrendingCollections","volumeType","timePeriod","TimePeriod","OneDay","size","refetchOnReconnect","refetchOnWindowFocus","refetchOnMount","collections","useMemo","filter","includes","slice","collectionAddresses","useLoadCollectionQuery","useState","activeCollectionIdx","setActiveCollectionIdx","onToggleNextSlide","activeCollection","fallback","TruncatedText","TruncatedSubHeader","SubHeader","TruncatedSubHeaderSmall","RoundedImage","backgroundModule","ChangeCellContainer","change","accentSuccess","accentFailure","EthContainer","CollectionTitleCell","value","isMobile","useIsMobile","logo","className","DiscreteNumberCell","volumeFormatter","getDenominatedValue","denomination","inWei","usdPrice","Denomination","ETH","parseFloat","formatEther","EthCell","denominatedValue","formattedValue","ethNumberStandardFormatter","TextComponent","BodyPrimary","TextCell","VolumeCell","ChangeCell","Caption","abs","round","table","thead","th","RankCellContainer","StyledRow","tr","stateOverlayHover","stateOverlayPressed","StyledLoadingRow","StyledHeader","disabled","click","StyledLoadingHolder","StyledCollectionNameHolder","StyledImageHolder","StyledRankHolder","Table","columns","smallHiddenColumns","mediumHiddenColumns","largeHiddenColumns","useTheme","useWindowSize","useTable","initialState","sortBy","desc","id","Volume","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setHiddenColumns","visibleColumns","styles","headerGroup","getHeaderGroupProps","key","headers","column","getHeaderProps","getSortByToggleProps","textAlign","paddingLeft","disableSortBy","Box","as","isSorted","isSortedDesc","transform","render","row","getRowProps","original","cells","cell","cellIndex","getCellProps","maxWidth","BodySecondary","fontSize","lineHeight","_","compareFloats","b","CollectionTable","floorSort","rowA","rowB","aFloor","BigNumber","from","bFloor","gte","floorChangeSort","volumeSort","volume","volumeChangeSort","Header","accessor","Cell","Floor","sortType","AllTime","FloorChange","sortDescFirst","VolumeChange","Items","totalSupply","Owners","owners","timeOptions","label","SevenDays","ThirtyDays","ExploreContainer","FiltersRow","Filter","Selector","active","OpacityHoverState","StyledSelectorText","textSecondary","TrendingCollections","setTimePeriod","isEthToggled","setEthToggled","refetchInterval","isSuccess","fetchPrice","trendingCollections","d","volumeChange","type","floorChange","ownersChange","sales","USD","timeOption","Container","CloseButton","X","Background","Content","Link","ExternalLink","accentActive","Title","LargeHeader","xl","Paragraph","BACKGROUND_IMAGE","dark","require","default","srcSet","light","WelcomeModal","onDismissed","isOpen","setIsOpen","dismiss","setTimeout","Modal","onSwipe","isBottomSheet","draggable","href","title","NftExplore","setBagExpanded","useBag","state","useHideNFTWelcomeModal","isModalHidden","hideModal","bagExpanded","manualClose","page","PageName","NFT_EXPLORE_PAGE","shouldLogImpression"],"mappings":"wJAAA,OAAe,cAA0B,+C,kCCAzC,OAAe,cAA0B,kD,kCCAzC,OAAe,cAA0B,kD,kCCAzC,OAAe,cAA0B,gD,kCCAzC,OAAe,cAA0B,mD,kCCAzC,OAAe,cAA0B,mD,+CCS7BA,E,kJCHNC,EAAoBC,UAAOC,IAAV,uCAAGD,CAAH,uDAMjBE,EAAwBF,UAAOC,IAAV,uCAAGD,CAAH,yIAOY,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWC,GAAnC,SAKjCC,EAAmBN,kBAAOO,IAAEN,KAAZ,uCAAGD,CAAH,sMASY,qBAAGG,MAAkBC,WAAWC,MAK5DG,EAAmBR,UAAOC,IAAV,uCAAGD,CAAH,8LAEX,qBAAGG,MAAkBM,eAOO,gBAAGN,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAKxB,qBAAGP,MAAkBQ,QAAQC,SAUtCC,EAAiB,IAEVC,EAAW,SAAC,GAA+D,IAA7DC,EAA4D,EAA5DA,SAAUC,EAAkD,EAAlDA,YAAaC,EAAqC,EAArCA,gBAC1CC,EAAMC,uBAAY,SAACC,GAAD,IAAYC,EAAZ,uDAAgBN,EAASO,OAAzB,OAAoCC,YAAmBH,EAAGC,KAAI,CAACN,IACjFS,EAASL,uBACb,SAACM,EAAWC,EAAkBC,GAA9B,OAAsDC,YAAwBH,EAAGC,EAAUC,EAAaT,KACxG,CAACA,IAEH,EAAuBW,qBAAWd,EAASO,QAAQ,SAACG,GAAD,MAAQ,CACzDL,GAAIK,EAAIV,EAASO,OAAS,EAAIG,GAAK,GAAKZ,MAD1C,mBAAOiB,EAAP,KAAgBC,EAAhB,KAGMC,EAAOC,iBAAO,CAAC,EAAG,IAElBC,EAAaf,uBACjB,SAACgB,EAAWC,GACV,IAAMV,EAAWR,EAAImB,KAAKC,MAAMH,EAAItB,GAAkBE,EAASO,QACzDK,EAAcS,EAAK,EAAIrB,EAASO,OAAS,EAAI,EACnDS,GAAI,SAACN,GACH,IAAMc,EAAWf,EAAOC,EAAGC,EAAUC,GAC/Ba,EAAehB,EAAOC,EAAGO,EAAKS,QAAQ,GAAIT,EAAKS,QAAQ,IACvDC,EAAOC,YAAcjB,EAAUC,EAAaY,EAAUxB,EAASO,OAAQa,GAC7E,MAAO,CACLf,GAAKe,GAAKtB,EAAiBE,EAASO,QAAWT,EAAiB6B,EAChEE,UAAWR,EAAK,EAAII,EAAeD,EAAWC,EAAeD,EAC7DM,OAAQ,CAAEC,QAAS,IAAKC,SAAU,QAGtCf,EAAKS,QAAU,CAACf,EAAUC,KAE5B,CAACT,EAAKM,EAAQO,EAAKhB,EAASO,SAGxB0B,EAAYf,iBAAO,GAEzBgB,qBAAU,WACRf,EAAWlB,EAAcH,EAAgBmC,EAAUP,WAClD,CAACzB,EAAakB,IAEjB,IAAMgB,EAAc/B,uBAClB,SAACgC,GACCH,EAAUP,QAAUU,EACpBlC,EAAgBkC,KAElB,CAAClC,IAYH,OATAgC,qBAAU,WACR,IAAMG,EAAWC,YAAW,sBAAC,sBAAA9C,EAAA,sDAC3B2C,EAAY,GADe,2CAE1B,KACH,OAAO,WACLI,cAAcF,MAEf,CAACF,EAAalC,IAGf,eAACjB,EAAD,WACE,cAACS,EAAD,CAAkB+C,QAAS,kBAAML,GAAa,IAA9C,SACE,cAAC,IAAD,CAAiBM,MAAM,OAAOC,OAAO,WAEvC,cAACvD,EAAD,UACG4B,EAAQ4B,KAAI,WAAQjC,GAAR,IAAGL,EAAH,EAAGA,EAAH,OACX,cAACd,EAAD,CAA0BqD,MAAO,CAAEvC,KAAnC,SACGL,EAASU,IADWA,QAK3B,cAACjB,EAAD,CAAkB+C,QAAS,kBAAML,EAAY,IAA7C,SACE,cAAC,IAAD,CAAkBM,MAAM,OAAOC,OAAO,eAMjCG,EAAkB,SAAC,GAAD,IAAG7C,EAAH,EAAGA,SAAH,OAC7B,cAAC,EAAD,CAAUC,YAAa,EAAGC,gBAAiB,aAA3C,SACG,CAACF,M,mDChIA8C,EAAqB7D,UAAOC,IAAV,wCAAGD,CAAH,8bAOC,qBAAGG,MAAkB2D,WAAWC,SAASC,QAClC,qBAAG7D,MAAkB2D,WAAWG,OAAOC,SAG/C,qBAAG/D,MAAkBgE,qBAa3B,qBAAGhE,MAAkBiE,cAEZ,qBAAGjE,MAAkB2D,WAAWC,SAASC,QAClC,qBAAG7D,MAAkB2D,WAAWG,OAAOC,SAQnEG,EAAsBrE,UAAOC,IAAV,wCAAGD,CAAH,8FAEH,gBAAGsE,EAAH,EAAGA,IAAH,oBAAoBA,EAApB,QAKhBC,EAA6BvE,UAAOC,IAAV,wCAAGD,CAAH,+LAEjBwE,KAIT,qBAAGrE,MAAkBsE,yBACrB,qBAAGtE,MAAkBgE,qBACrB,qBAAGhE,MAAkBsE,yBAMrBC,EAAmB1E,UAAOC,IAAV,wCAAGD,CAAH,0JAYhB2E,EAAgB3E,UAAOC,IAAV,wCAAGD,CAAH,gEAKb4E,EAA0B5E,UAAOC,IAAV,wCAAGD,CAAH,oJAUvB6E,EAAiC7E,kBAAO8E,KAAV,wCAAG9E,CAAH,gBAI9B+E,EAAgB/E,UAAOC,IAAV,wCAAGD,CAAH,gNAebgF,EAAkBhF,UAAOiF,IAAV,wCAAGjF,CAAH,qFAGL,qBAAGG,MAAkB+E,0BACf,qBAAG/E,MAAkB+E,0BAIrCC,EAAyBnF,UAAOC,IAAV,wCAAGD,CAAH,wNAIbwE,KAIT,qBAAGrE,MAAkBsE,yBACrB,qBAAGtE,MAAkBgE,qBACrB,qBAAGhE,MAAkBsE,yBAMrBW,EAAsBpF,kBAAO8E,KAAV,yCAAG9E,CAAH,iBAInBqF,EAAerF,UAAOC,IAAV,yCAAGD,CAAH,8CAMZsF,EAAyBtF,UAAOC,IAAV,yCAAGD,CAAH,MAEtBuF,EAAsBvF,UAAOC,IAAV,yCAAGD,CAAH,8FAQnBwF,EAAkBxF,UAAOiF,IAAV,yCAAGjF,CAAH,6BAKfE,EAAwBF,UAAOC,IAAV,yCAAGD,CAAH,sYAGL,qBAAGG,MAAkBsF,qBACrB,qBAAGtF,MAAkBgE,oBAKvCkB,EAAiCD,EAIjCC,EAA+BD,GAIZ,qBAAGjF,MAAkBC,WAAWsF,MAAyB,qBAAGvF,MACvEC,WAAWM,KACjB4E,EAGAD,EAGAX,GAYOiB,EAAiB,SAAC,GAAgE,IAA9DC,EAA6D,EAA7DA,YAAaC,EAAgD,EAAhDA,WAAYC,EAAoC,EAApCA,SACxD,OACE,qCACE,eAACT,EAAD,WACE,cAACG,EAAD,CACElB,IAAG,iCAA4BsB,EAAYG,cAAxC,aACHC,IAAG,UAAKJ,EAAL,WAEL,cAACN,EAAD,UACE,cAAC,IAAWW,UAAZ,CAAsBC,MAAM,gBAA5B,SAA6CN,SAGjD,cAACP,EAAD,UACE,cAAC,IAAWY,UAAZ,CAAsBC,MAAM,gBAA5B,SACGC,OAAON,GAAc,EAArB,UACMO,YAAqBP,EAAYQ,IAAWC,iCADlD,QAEG,QAGR,cAACjB,EAAD,UACE,cAAC,IAAWY,UAAZ,CAAsBC,MAAM,gBAA5B,SAA6CC,OAAOL,GAAY,EAAIA,EAAW,eAWjFS,EAAmB,CAACC,IAAQC,QAASD,IAAQE,KAAMF,IAAQG,WAC3DC,IAAoB,mBACvBJ,IAAQC,QAAU,WADK,cAEvBD,IAAQE,KAAO,QAFQ,cAGvBF,IAAQG,UAAY,aAHG,GAMbE,GAAe,SAAC,GAAgD,IAAD,EAA7CC,EAA6C,EAA7CA,WAAYvD,EAAiC,EAAjCA,QACnCwD,EAAgBC,YAAmBF,EAAWG,SAEpD,OACE,cAACpD,EAAD,UACE,eAAC,EAAD,CAAuBN,QAASA,EAAhC,UACE,cAAC,GAAD,CAAoBuD,WAAYA,IAChC,cAACvB,EAAD,UACE,qCACE,eAACF,EAAD,WACE,cAACG,EAAD,CAAiBlB,IAAI,6CAA6C0B,IAAI,iBACtE,cAACV,EAAD,UACE,cAAC,IAAW4B,eAAZ,CAA2BhB,MAAM,iBAAjC,0BAGJ,cAACb,EAAD,UACE,eAAC,IAAW6B,eAAZ,CAA2BhB,MAAM,iBAAjC,UACGiB,YAAmBL,EAAWxE,MAAM8E,YADvC,kBAIF,cAAC/B,EAAD,UACE,eAAC,IAAW6B,eAAZ,CAA2BhB,MAAM,iBAAjC,oBACGa,EAAcM,wBADjB,aACG,EAAgCC,QAAO,SAACC,EAAKC,GAAN,OAAcD,EAAMC,EAAIC,QAAO,GADzE,iBAIDlB,EAAiB7C,KAAI,SAACgE,GAAY,IAAD,EAC1B9B,EAAW,UAAGmB,EAAcM,wBAAjB,aAAG,EAAgCM,MAClD,SAAC/B,GAAD,OAAiBA,EAAYA,cAAgB8B,KAE/C,OAAK9B,EAIH,cAAC,EAAD,CAEEA,YAAagB,GAAqBc,GAClC5B,SAAUF,EAAY6B,MACtB5B,WAAYD,EAAYgC,YAJ1B,2BAC2Bd,EAAWG,QADtC,YACiDrB,EAAYA,cAJtD,mBAoBViC,GAAe,WAC1B,OACE,mCACG,YAAIC,MALoB,KAKWpE,KAAI,SAACqE,GAAD,OACtC,cAAC3C,EAAD,GAA0B2C,SAM5BC,GAAiBhI,kBAAOiI,IAAWC,cAArB,yCAAGlI,CAAH,iEAMdmI,GAAqB,SAAC,GAAwD,IAAtDrB,EAAqD,EAArDA,WAC5B,OACE,eAACzC,EAAD,CAAqBC,IAAKwC,EAAWsB,eAArC,UACE,eAAC1D,EAAD,WACE,cAACM,EAAD,CAAiBV,IAAKwC,EAAWuB,WACjC,eAACzD,EAAD,WACE,cAACoD,GAAD,CAAgB9B,MAAM,yBAAyBoC,WAAW,MAA1D,SACGxB,EAAWyB,OAEbzB,EAAW0B,YACV,cAAC7D,EAAD,UACE,cAAC,IAAD,CAAcnB,MAAM,OAAOC,OAAO,iBAK1C,cAACsB,EAAD,QAKO0D,GAAsB,SAAC,GAAyD,IAAvD3B,EAAsD,EAAtDA,WACpC,OACE,cAACjD,EAAD,UACE,eAAC,EAAD,WACGiD,EACC,cAAC,GAAD,CAAoBA,WAAYA,IAEhC,eAACvC,EAAD,WACE,eAACG,EAAD,WACE,cAACS,EAAD,IACA,cAACN,EAAD,OAEF,cAACE,EAAD,OAGJ,cAACQ,EAAD,UACE,cAAC,GAAD,YCtUJmD,GAAkB1I,UAAOC,IAAV,wCAAGD,CAAH,mKAQkB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAKjCiI,GAAe3I,UAAOC,IAAV,wCAAGD,CAAH,0DAUZ4I,GAAmB5I,kBAAO2I,IAAV,wCAAG3I,CAAH,kGAGA,SAAC6I,GAAD,oBAAkBA,EAAMC,gBAAxB,QAGT,qBAAG3I,MAAmB4I,SAAW,GAAM,MAG9CC,GAAkBhJ,kBAAO2I,IAAV,wCAAG3I,CAAH,qBACL,gBAAGG,EAAH,EAAGA,MAAH,gCAAkC8I,YAAQ,GAAI9I,EAAM+I,gBAApD,qBAGVC,GAAiBnJ,UAAOC,IAAV,wCAAGD,CAAH,mPAUmB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SASjC0I,GAAkBpJ,UAAOC,IAAV,wCAAGD,CAAH,8fAUV,qBAAGG,MAAkBM,eAEO,gBAAGN,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWiJ,GAAnC,SAKA,gBAAGlJ,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWC,GAAnC,SAKA,gBAAGF,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAuBjC4I,GAAuB,CAAC,8CA8EfC,GA3EA,WACb,IAAMC,EAAWC,cAETC,EAASC,mBACf,CAAC,wBACD,WACE,OAAOC,YAAyB,CAC9BC,WAAY,MACZC,WAAYC,IAAWC,OACvBC,KAXyB,EAWQX,GAAqBhI,WAG1D,CACE4I,oBAAoB,EACpBC,sBAAsB,EACtBC,gBAAgB,IAZZV,KAgBFW,EAAcC,mBAClB,yBAAMZ,QAAN,IAAMA,OAAN,EAAMA,EAAMa,QAAO,SAACzD,GAAD,OAAiBwC,GAAqBkB,SAAS1D,EAAWG,YAAUwD,MAAM,EAAG,KAChG,CAACf,IAIGgB,EAAsBJ,mBAAQ,yBAAMD,QAAN,IAAMA,OAAN,EAAMA,EAAa3G,KAAI,qBAAGuD,aAAwB,CAACoD,IACvFM,YAAuBD,GAEvB,MAAsDE,mBAAS,GAA/D,mBAAOC,EAAP,KAA4BC,EAA5B,KACMC,EAAoB5J,uBACxB,SAAC6B,GACMqH,GACLS,GAAuB,SAAC5J,GAAD,OAASK,YAAmBL,EAAM8B,EAAWqH,EAAY/I,aAElF,CAAC+I,IAGGW,EAAgB,OAAGX,QAAH,IAAGA,OAAH,EAAGA,EAAcQ,GAEvC,OACE,eAACnC,GAAD,WACGsC,EACCA,EAAiB5C,eACf,cAACQ,GAAD,CAAkBE,gBAAiBkC,EAAiB5C,iBAEpD,cAACY,GAAD,IAEA,KACJ,eAACG,GAAD,WACE,eAACC,GAAD,6BACiB,uBADjB,oBAICiB,EACC,cAAC,EAAD,CAAUrJ,YAAa6J,EAAqB5J,gBAAiB8J,EAA7D,SACGV,EAAY3G,KAAI,SAACoD,GAAD,OACf,cAAC,WAAD,CAAUmE,SAAU,cAAC,GAAD,CAAqBnE,WAAYA,IAArD,SACE,cAAC,GAAD,CAEEA,WAAYA,EACZvD,QAAS,kBAAMiG,EAAS,oBAAD,OAAqB1C,EAAWG,YAFlDH,EAAWG,UAFsDH,EAAWG,cAUzF,cAAC,EAAD,UACE,cAAC,GAAD,a,2EC3KNiE,I,cAAgBlL,UAAOC,IAAV,wCAAGD,CAAH,iEAMb4E,GAA0B5E,kBAAOkL,IAAV,wCAAGlL,CAAH,gEAMvBgI,GAAiBhI,kBAAOkL,IAAV,wCAAGlL,CAAH,sBAIdmL,GAAqBnL,kBAAOiI,KAAWmD,WAArB,wCAAGpL,CAAH,gEAKlBqL,GAA0BrL,kBAAOiI,KAAWf,gBAArB,wCAAGlH,CAAH,0EAClB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMM,gBAM7B6K,GAAetL,UAAOC,IAAV,wCAAGD,CAAH,8HAIF,gBAAGsE,EAAH,EAAGA,IAAKnE,EAAR,EAAQA,MAAR,OAAqBmE,EAAG,cAAUA,EAAV,KAAmBnE,EAAMoL,oBAM3DC,GAAsBxL,UAAOC,IAAV,wCAAGD,CAAH,4EAEd,gBAAGG,EAAH,EAAGA,MAAH,SAAUsL,QAAwB,EAAItL,EAAMuL,cAAgBvL,EAAMwL,iBAMvEC,GAAe5L,UAAOC,IAAV,wCAAGD,CAAH,uCAgBL6L,GAAsB,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAC9BC,EAAWC,eACjB,OACE,eAAC,GAAD,WACE,cAACV,GAAD,CAAchH,IAAKwH,EAAMG,OACzB,cAAC,GAAD,UACGF,EACC,cAACV,GAAD,UAA0BS,EAAMvD,OAEhC,cAAC4C,GAAD,UAAqBW,EAAMvD,SAG9BuD,EAAMtD,YACL,sBAAM0D,UClFa,6DDkFnB,SACE,cAAC,IAAD,UAOGC,GAAqB,SAAC,GAAD,IAAGL,EAAH,EAAGA,MAAH,OAChC,+BAAOA,EAAMA,MAAQM,YAAgBN,EAAMA,OAAS,OAGhDO,GAAsB,SAACC,EAA4BC,EAAgBT,EAAgBU,GACvF,OAAIF,IAAiBG,IAAaC,IAAYZ,EAC1CU,GAAYV,EAAcU,GAAYD,EAAQI,WAAWC,uBAAYd,IAAUA,QAAnF,GAKWe,GAAU,SAAC,GAQjB,IAPLf,EAOI,EAPJA,MACAQ,EAMI,EANJA,aACAE,EAKI,EALJA,SAMMM,EAAmBT,GAAoBC,GAAc,EAAMR,EAAOU,GAClEO,EAAiBD,EACnBR,IAAiBG,IAAaC,IAC5BvF,aAAmB2F,EAAiB1F,YAAY,GAAQ,OACxD4F,aAA2BF,GAAkB,GAAM,GAAO,GAC5D,IAGEG,EADWjB,eACgB/D,KAAWhC,UAAYgC,KAAWiF,YAEnE,OACE,cAACtB,GAAD,UACE,cAACqB,EAAD,UAAgBnB,EAAQiB,EAAiB,SAKlCI,GAAW,SAAC,GAAD,IAAGrB,EAAH,EAAGA,MAAH,OAAkC,cAAC,KAAWoB,YAAZ,UAAyBpB,KAEtEsB,GAAa,SAAC,GAQpB,IAPLtB,EAOI,EAPJA,MACAQ,EAMI,EANJA,aACAE,EAKI,EALJA,SAMMM,EAAmBT,GAAoBC,GAAc,EAAOR,EAAOU,GAEnEO,EAAiBD,EACnBR,IAAiBG,IAAaC,IAC5BM,aAA2BF,EAAiB1F,YAAY,GAAO,GAAO,GAAQ,OAC9E4F,aAA2BF,GAAkB,GAAM,GAAO,GAC5D,IAEJ,OACE,cAAClB,GAAD,UACE,cAAC,KAAWsB,YAAZ,UAAyBpB,EAAQiB,EAAiB,SAK3CM,GAAa,SAAC,GAAqE,IAAnE5B,EAAkE,EAAlEA,OAAQ1K,EAA0D,EAA1DA,SAE7BkM,EADWjB,eACgB/D,KAAWqF,QAAUrF,KAAWiF,YACjE,OACE,eAAC1B,GAAD,CAAqBC,OAAM,OAAEA,QAAF,IAAEA,IAAU,EAAvC,WACIA,GAAUA,EAAS,EACnB,cAAC,IAAD,CAAmBjI,MAAM,OAAOC,OAAO,SAEvC,cAAC,IAAD,CAAqBD,MAAM,OAAOC,OAAO,SAE3C,cAACwJ,EAAD,CAAe/G,MAAM,eAArB,SAAqCnF,GAAQ,UAAO0K,EAASpJ,KAAKkL,IAAIlL,KAAKmL,MAAM/B,IAAW,EAA/C,W,uCEhKxCgC,I,QAAQ,qDACRC,GAAQ,yCACRC,GAAK,sE,2HCWVC,GAAoB5N,UAAOC,IAAV,uCAAGD,CAAH,0HAKgB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAKjCmN,GAAY7N,UAAO8N,GAAV,uCAAG9N,CAAH,oEAGG,qBAAGG,MAAkB4N,qBAGrB,qBAAG5N,MAAkB6N,uBAIjCC,GAAmBjO,UAAO8N,GAAV,uCAAG9N,CAAH,kBAIhBkO,GAAelO,UAAO2N,GAAV,uCAAG3N,CAAH,gCACd,qBAAGmO,UAAe,sBAGhB,gBAAGhO,EAAH,EAAGA,MAAH,SAAUgO,UAAe,mBAAyBhO,EAAMQ,QAAQC,MAAvC,QAIzB,gBAAGT,EAAH,EAAGA,MAAH,SAAUgO,UAAe,mBAAyBhO,EAAMQ,QAAQyN,MAAvC,QAIzBC,GAAsBrO,UAAOC,IAAV,uCAAGD,CAAH,qEAOnBsO,GAA6BtO,UAAOC,IAAV,uCAAGD,CAAH,+DAO1BuO,GAAoBvO,kBAAO8E,KAAV,uCAAG9E,CAAH,gDAMjBwO,GAAmBxO,kBAAO8E,KAAV,uCAAG9E,CAAH,8CAef,SAASyO,GAAT,GAOY,IANjBC,EAMgB,EANhBA,QACAhF,EAKgB,EALhBA,KACAiF,EAIgB,EAJhBA,mBACAC,EAGgB,EAHhBA,oBACAC,EAEgB,EAFhBA,mBACGhG,EACa,mBACV1I,EAAQ2O,qBACNtL,EAAUuL,eAAVvL,MACFuI,EAAWC,eAEjB,EACEgD,oBAAS,cAELN,UACAhF,OACAuF,aAAc,CACZC,OAAQ,CACN,CACEC,MAAM,EACNC,GAAItP,EAAcuP,WAIrBxG,GAELyG,cAfIC,EAAR,EAAQA,cAAeC,EAAvB,EAAuBA,kBAAmBC,EAA1C,EAA0CA,aAAcC,EAAxD,EAAwDA,KAAMC,EAA9D,EAA8DA,WAAYC,EAA1E,EAA0EA,iBAAkBC,EAA5F,EAA4FA,eAkBtFrG,EAAWC,cAgBjB,OAdAxG,qBAAU,WACHO,IAEDA,GAASrD,EAAMC,WAAWM,GAC5BkP,EAAiBjB,GACRnL,GAASrD,EAAMC,WAAWC,GACnCuP,EAAiBhB,GACRpL,GAASrD,EAAMC,WAAWiJ,GACnCuG,EAAiBf,GAEjBe,EAAiB,OAElB,CAACpM,EAAOoM,EAAkBlB,EAASC,EAAoBC,EAAqBC,EAAoB1O,EAAMC,aAErF,IAAhBsJ,EAAKpI,OACA,cAAC,GAAD,cAAcmO,aAAcA,EAAcI,eAAgBA,GAAoBN,MAIrF,cAAC,KAAD,UACE,oDAAWA,KAAX,IAA4BrD,UAAW4D,GAAvC,UACE,uBAAO5D,UAAW4D,GAAlB,SACGL,EAAa/L,KAAI,SAACqM,GAAD,OAChB,0DAAQA,EAAYC,uBAApB,IAA2CC,IAAKF,EAAYX,KACzDW,EAAYG,QAAQxM,KAAI,SAACyM,EAAQpI,GAChC,OACE,wBAACmG,GAAD,2BACEhC,UAAW4D,IACPK,EAAOC,eAAeD,EAAOE,yBAFnC,IAGE1M,MAAO,CACL2M,UAAqB,IAAVvI,EAAc,OAAS,QAClCwI,YAAuB,IAAVxI,EAAegE,EAAW,OAAS,OAAU,GAE5DoC,SAAUgC,EAAOK,cACjBP,IAAKlI,IAEL,cAAC0I,GAAA,EAAD,CAAKC,GAAG,OAAOxK,MAAM,eAAe3D,SAAS,WAA7C,SACG4N,EAAOQ,SACNR,EAAOS,aACL,cAAC,IAAD,CAAgBjN,MAAO,CAAEkN,UAAW,gBAAiBtO,SAAU,cAE/D,cAAC,IAAD,CAAgBoB,MAAO,CAAEkN,UAAW,iBAAkBtO,SAAU,cAGlE,KAGJ,cAACkO,GAAA,EAAD,CAAKC,GAAG,OAAOH,YAAaJ,EAAOQ,SAAW,KAAO,IAArD,SACGR,EAAOW,OAAO,sBAQ7B,mDAAWtB,KAAX,aACGE,EAAKhM,KAAI,SAACqN,EAAKtP,GAGd,OAFAkO,EAAWoB,GAGT,wBAAClD,GAAD,6BACMkD,EAAIC,eADV,IAEEf,IAAKc,EAAI3B,GACT7L,QAAS,kBAAMiG,EAAS,oBAAD,OAAqBuH,EAAIE,SAASnK,WAAWG,aAEnE8J,EAAIG,MAAMxN,KAAI,SAACyN,EAAMC,GACpB,OACE,wDACElF,UDtLN,2FCuLUiF,EAAKE,gBAFX,IAGEpB,IAAKmB,EACLzN,MAAO,CACL2N,SAAwB,IAAdF,EAAmBrF,EAnL3B,QACC,QAHR,WAwLkB,IAAdqF,EACC,eAACxD,GAAD,YACI7B,GACA,cAAC,KAAWwF,cAAZ,CAA0BC,SAAS,OAAOC,WAAW,OAArD,SACGhQ,EAAI,IAGR0P,EAAKL,OAAO,WAGfK,EAAKL,OAAO,yBAmBpC,SAASjJ,GAAT,GAAsF,IAA9D4H,EAA6D,EAA7DA,aAAcI,EAA+C,EAA/CA,eAAmBhH,EAA4B,mBACnF,OACE,cAAC,KAAD,UACE,oDAAWA,GAAX,IAAkBqD,UAAW4D,GAA7B,UACE,uBAAO5D,UAAW4D,GAAlB,SACGL,EAAa/L,KAAI,SAACqM,GAAD,OAChB,0DAAQA,EAAYC,uBAApB,IAA2CC,IAAKF,EAAYX,KACzDW,EAAYG,QAAQxM,KAAI,SAACyM,EAAQpI,GAChC,OACE,wBAACmG,GAAD,2BACEhC,UAAW4D,IACPK,EAAOC,eAAeD,EAAOE,yBAFnC,IAGE1M,MAAO,CACL2M,UAAqB,IAAVvI,EAAc,OAAS,QAClCwI,YAAuB,IAAVxI,EAAc,OAAS,GAEtCoG,SAAoB,IAAVpG,EACVkI,IAAKlI,IAEL,cAAC0I,GAAA,EAAD,CAAKC,GAAG,OAAOxK,MAAM,eAAe3D,SAAS,WAA7C,SACG4N,EAAOQ,SACNR,EAAOS,aACL,cAAC,IAAD,CAAgBjN,MAAO,CAAEkN,UAAW,gBAAiBtO,SAAU,cAE/D,cAAC,IAAD,CAAgBoB,MAAO,CAAEkN,UAAW,iBAAkBtO,SAAU,cAGlE,KAGJ,cAACkO,GAAA,EAAD,CAAKC,GAAG,OAAOH,YAAaJ,EAAOQ,SAAW,KAAO,IAArD,SACGR,EAAOW,OAAO,sBAQ7B,mDAAWjI,GAAX,aACG,YAAIf,MA1L6B,KA0LepE,KAAI,SAACgO,EAAG3J,GAAJ,OACnD,cAACkG,GAAD,UACG,YAAInG,MAAM+H,EAAevO,SAASoC,KAAI,SAACgO,EAAGN,GACzC,OACE,oBAAIlF,UDrQC,0FCqQL,SACiB,IAAdkF,EACC,eAAC9C,GAAD,WACE,cAACE,GAAD,IACA,cAACD,GAAD,IACA,cAAC,IAAD,OAGF,cAACF,GAAD,UACE,cAAC,IAAD,OATgC+C,OAHrBrJ,gB,SPrQvBjI,K,gBAAAA,E,6BAAAA,E,cAAAA,E,2BAAAA,E,cAAAA,E,cAAAA,E,iBAAAA,M,KAUZ,IAEM6R,GAAgB,SAACpR,EAAWqR,GAChC,OAAOvP,KAAKmL,MAAU,IAAJjN,IAAe8B,KAAKmL,MAAU,IAAJoE,GAAc,GAAK,GAyJlDC,GAtJS,SAAC,GAAqF,IAAnFnI,EAAkF,EAAlFA,KAAMI,EAA4E,EAA5EA,WACzBgI,EAAYxH,mBAAQ,WACxB,OAAO,SAACyH,EAAkCC,GAAsC,IAAD,IACvEC,EAASC,KAAUC,KAAV,UAAeJ,EAAKd,SAAS3O,MAAMwJ,aAAnC,QAA4C,GACrDsG,EAASF,KAAUC,KAAV,UAAeH,EAAKf,SAAS3O,MAAMwJ,aAAnC,QAA4C,GAE3D,OAAOmG,EAAOI,IAAID,GAAU,GAAK,KAElC,IAEGE,EAAkBhI,mBAAQ,WAC9B,OAAO,SAACyH,EAAkCC,GACxC,OAAOL,GAAcI,EAAKd,SAAS3O,MAAMmJ,OAAQuG,EAAKf,SAAS3O,MAAMmJ,WAEtE,IAEG8G,EAAajI,mBAAQ,WACzB,OAAO,SAACyH,EAAkCC,GACxC,OAAOL,GAAcI,EAAKd,SAASuB,OAAO1G,MAAOkG,EAAKf,SAASuB,OAAO1G,UAEvE,IAEG2G,EAAmBnI,mBAAQ,WAC/B,OAAO,SAACyH,EAAkCC,GACxC,OAAOL,GAAcI,EAAKd,SAASuB,OAAO/G,OAAQuG,EAAKf,SAASuB,OAAO/G,WAExE,IAEGiD,EAA2CpE,mBAC/C,iBAAM,CACJ,CACEoI,OAAQ,kBACRC,SAAU,aACVC,KAAM/G,GACN2E,eAAe,GAEjB,CACEpB,GAAItP,EAAc+S,MAClBH,OAAQ5S,EAAc+S,MACtBF,SAAU,qBAAGrQ,MAAkBwJ,OAC/BgH,SAAUhB,EACVc,KAAM,SAAiBzB,GACrB,OACE,qCACE,cAAC,GAAD,CACErF,MAAOqF,EAAKJ,IAAIE,SAAS3O,MAAMwJ,MAC/BQ,aAAc6E,EAAKJ,IAAIE,SAAS3E,aAChCE,SAAU2E,EAAKJ,IAAIE,SAASzE,WAE7B1C,IAAeC,IAAWgJ,SACzB,cAAC,KAAD,UACE,cAAC,GAAD,CAAYtH,OAAQ0F,EAAKJ,IAAIE,SAAS3O,MAAMmJ,gBAOxD,CACE2D,GAAItP,EAAckT,YAClBN,OAAQ5S,EAAckT,YACtBL,SAAU,qBAAGrQ,MAAkBwJ,OAC/BmH,eAAe,EACfzC,cAAe1G,IAAeC,IAAWgJ,QACzCD,SAAUR,EACVM,KAAM,SAAoBzB,GACxB,OAAOrH,IAAeC,IAAWgJ,QAC/B,cAAC,GAAD,CAAUjH,MAAM,MAEhB,cAAC,GAAD,CAAYL,OAAQ0F,EAAKJ,IAAIE,SAAS3O,MAAMmJ,WAIlD,CACE2D,GAAItP,EAAcuP,OAClBqD,OAAQ5S,EAAcuP,OACtBsD,SAAU,qBAAGH,OAAoB1G,OACjCmH,eAAe,EACfH,SAAUP,EACVK,KAAM,SAAoBzB,GACxB,OACE,cAAC,GAAD,CACErF,MAAOqF,EAAKJ,IAAIE,SAASuB,OAAO1G,MAChCQ,aAAc6E,EAAKJ,IAAIE,SAAS3E,aAChCE,SAAU2E,EAAKJ,IAAIE,SAASzE,aAKpC,CACE4C,GAAItP,EAAcoT,aAClBR,OAAQ5S,EAAcoT,aACtBP,SAAU,qBAAGH,OAAoB1G,OACjCmH,eAAe,EACfzC,cAAe1G,IAAeC,IAAWgJ,QACzCD,SAAUL,EACVG,KAAM,SAAoBzB,GACxB,IAAQ1F,EAAW0F,EAAKJ,IAAIE,SAASuB,OAA7B/G,OACR,OAAO3B,IAAeC,IAAWgJ,QAC/B,cAAC,GAAD,CAAUjH,MAAM,MACdL,GA1GkB,KA2GpB,eAAC,GAAD,CAAYA,OAAQA,EAApB,qBA3GoB,MA2GpB,OAEA,cAAC,GAAD,CAAYA,OAAQA,MAI1B,CACE2D,GAAItP,EAAcqT,MAClBT,OAAQ5S,EAAcqT,MACtBR,SAAU,cACVM,eAAe,EACfL,KAAM,SAA4BzB,GAChC,OAAO,cAAC,GAAD,CAAoBrF,MAAO,CAAEA,MAAOqF,EAAKJ,IAAIE,SAASmC,iBAGjE,CACEV,OAAQ5S,EAAcuT,OACtBV,SAAU,qBAAGW,OAAoBxH,OACjCmH,eAAe,EACfL,KAAM,SAA4BzB,GAChC,OAAO,cAAC,GAAD,CAAoBrF,MAAOqF,EAAKJ,IAAIE,SAASqC,cAI1D,CAAChB,EAAiBR,EAAWW,EAAkBF,EAAYzI,IAE7D,OACE,mCACE,cAAC2E,GAAD,CACEE,mBAAoB,CAClB7O,EAAcqT,MACdrT,EAAckT,YACdlT,EAAcuP,OACdvP,EAAcoT,aACdpT,EAAcuT,QAEhBzE,oBAAqB,CACnB9O,EAAcqT,MACdrT,EAAckT,YACdlT,EAAcoT,aACdpT,EAAcuT,QAEhBxE,mBAAoB,CAAC/O,EAAcqT,MAAOrT,EAAcuT,QAClD3J,OAAMgF,eQ7Jd6E,GAAsD,CAC1D,CAAEC,MAAO,KAAM1H,MAAO/B,IAAWC,QACjC,CAAEwJ,MAAO,KAAM1H,MAAO/B,IAAW0J,WACjC,CAAED,MAAO,KAAM1H,MAAO/B,IAAW2J,YACjC,CAAEF,MAAO,MAAO1H,MAAO/B,IAAWgJ,UAG9BY,GAAmB3T,UAAOC,IAAV,wCAAGD,CAAH,oFAQhBkO,GAAelO,UAAOC,IAAV,wCAAGD,CAAH,mIACP,qBAAGG,MAAkBM,eAKO,gBAAGN,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAMjCkT,GAAa5T,UAAOC,IAAV,wCAAGD,CAAH,+JAMuB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SAMjCmT,GAAS7T,UAAOC,IAAV,wCAAGD,CAAH,uEAEU,qBAAGG,MAAkBgE,qBAKrC2P,GAAW9T,UAAOC,IAAV,wCAAGD,CAAH,2EAGE,gBAAG+T,EAAH,EAAGA,OAAQ5T,EAAX,EAAWA,MAAX,OAAwB4T,EAAS5T,EAAMsE,sBAAwB,SAG3EuP,MAGEC,GAAqBjU,kBAAOiI,KAAWmD,WAArB,wCAAGpL,CAAH,gBACb,gBAAGG,EAAH,EAAGA,MAAH,SAAU4T,OAAuB5T,EAAMM,YAAcN,EAAM+T,iBA+FvDC,GA5Fa,WAC1B,MAAoCvJ,mBAAqBb,IAAWC,QAApE,mBAAOF,EAAP,KAAmBsK,EAAnB,KACA,EAAsCxJ,oBAAS,GAA/C,mBAAOyJ,EAAP,KAAqBC,EAArB,KAEA,EAA4B3K,mBAC1B,CAAC,sBAAuBG,IACxB,WACE,OAAOF,YAAyB,CAAEC,WAAY,MAAOC,aAAYG,KAAM,QAEzE,CACEC,oBAAoB,EACpBC,sBAAsB,EACtBC,gBAAgB,EAChBmK,gBAAiB,MATbC,EAAR,EAAQA,UAAW9K,EAAnB,EAAmBA,KAaL8C,EAAa7C,mBAAS,CAAC,aAAc,KAAK,kBAAM8K,gBAAc,CAC1EvK,oBAAoB,EACpBC,sBAAsB,EACtBC,gBAAgB,EAChBmK,gBAAgB,MAJV7K,KAOFgL,EAAsBpK,mBAAQ,WAClC,OAAIkK,GAAa9K,EACRA,EAAKhG,KAAI,SAACiR,GAAD,oBAAC,gBACZA,GADW,IAEd7N,WAAY,CACVyB,KAAMoM,EAAEpM,KACR0D,KAAM0I,EAAEtM,SACRpB,QAAS0N,EAAE1N,QACXuB,WAAYmM,EAAEnM,YAEhBgK,OAAQ,CACN1G,MAAO6I,EAAEnC,OACT/G,OAAQkJ,EAAEC,aACVC,KAAM,OAERvS,MAAO,CACLwJ,MAAO6I,EAAErS,MACTmJ,OAAQkJ,EAAEG,aAEZxB,OAAQ,CACNxH,MAAO6I,EAAErB,OACT7H,OAAQkJ,EAAEI,cAEZC,MAAOL,EAAEK,MACT5B,YAAauB,EAAEvB,YACf9G,aAAc+H,EAAe5H,IAAaC,IAAMD,IAAawI,IAC7DzI,gBAEU,KACb,CAAC9C,EAAM8K,EAAWH,EAAc7H,IAEnC,OACE,eAACmH,GAAD,WACE,cAAC,GAAD,uCACA,eAACC,GAAD,WACE,cAACC,GAAD,UACGN,GAAY7P,KAAI,SAACwR,GAChB,OACE,cAACpB,GAAD,CAEEC,OAAQmB,EAAWpJ,QAAUhC,EAC7BvG,QAAS,kBAAM6Q,EAAcc,EAAWpJ,QAH1C,SAKE,cAACmI,GAAD,CAAoBxC,WAAW,OAAOsC,OAAQmB,EAAWpJ,QAAUhC,EAAnE,SACGoL,EAAW1B,SALT0B,EAAWpJ,YAWxB,eAAC+H,GAAD,CAAQtQ,QAAS,kBAAM+Q,GAAeD,IAAtC,UACE,cAACP,GAAD,CAAUC,OAAQM,EAAlB,SACE,cAACJ,GAAD,CAAoBxC,WAAW,OAAOsC,OAAQM,EAA9C,mBAIF,cAACP,GAAD,CAAUC,QAASM,EAAnB,SACE,cAACJ,GAAD,CAAoBxC,WAAW,OAAOsC,QAASM,EAA/C,yBAMN,cAAC,GAAD,CAAiB3K,KAAMgL,EAAqB5K,WAAYA,Q,qBCrJxDqL,GAAYnV,UAAOC,IAAV,wCAAGD,CAAH,+GASToV,GAAcpV,kBAAOqV,MAAV,wCAAGrV,CAAH,2DAOXsV,GAAatV,UAAOiF,IAAV,wCAAGjF,CAAH,mEAQVuV,GAAUvV,UAAOC,IAAV,wCAAGD,CAAH,4DAOPwV,GAAOxV,kBAAOyV,MAAV,wCAAGzV,CAAH,2BACC,qBAAGG,MAAkBuV,gBACpB,qBAAGvV,MAAkBuV,gBAG3BC,GAAQ3V,kBAAOiI,IAAW2N,aAArB,wCAAG5V,CAAH,0DACY,qBAAGG,MAAkBC,WAAWyV,MAKjDC,GAAY9V,kBAAOiI,IAAWsJ,eAArB,wCAAGvR,CAAH,4FAGQ,qBAAGG,MAAkBC,WAAWyV,MAMjDE,GAAmB,CACvBC,KAAM,CACJ1R,IAAK2R,EAAQ,MAAgDC,QAC7DC,OAAO,WAAD,OACFF,EAAQ,MAAmDC,QADzD,uBAEFD,EAAQ,MAAmDC,QAFzD,eAKRE,MAAO,CACL9R,IAAK2R,EAAQ,MAAiDC,QAC9DC,OAAO,WAAD,OACFF,EAAQ,MAAoDC,QAD1D,uBAEFD,EAAQ,MAAoDC,QAF1D,gBAOH,SAASG,GAAT,GAAqE,IAA7CC,EAA4C,EAA5CA,YAC7B,EAA4B1L,oBAAS,GAArC,mBAAO2L,EAAP,KAAeC,EAAf,KAEMC,EAAU,WACdD,GAAU,GACVE,YAAW,kBAAMJ,QAGbnW,EAAQ2O,qBAEd,OACE,cAAC6H,GAAA,EAAD,CAAOJ,OAAQA,EAAQK,QAASH,EAASnF,SAAU,IAAKuF,eAAe,EAAvE,SACE,eAAC1B,GAAD,WACE,cAACG,GAAD,6BACOnV,EAAM4I,SAAWgN,GAAiBC,KAAOD,GAAiBK,OADjE,IAEEpQ,IAAI,2BACJ8Q,WAAW,KAEb,eAACvB,GAAD,WACE,cAACI,GAAD,0CACA,eAACG,GAAD,gIAEU,uBACR,uBAHF,4CAI4C,IAC1C,eAACN,GAAD,CAAMuB,KAAK,iCAAiCC,MAAM,kCAAlD,qBACW,OACH,IAPV,iHASW,IACT,cAACxB,GAAD,CACEuB,KAAK,+DACLC,MAAM,sCAFR,4BAOF,cAAC5B,GAAD,CAAanL,KAAM,GAAI1G,QAASkT,Y,aCxGpC9C,GAAmB3T,UAAOC,IAAV,uCAAGD,CAAH,wKAMiB,gBAAGG,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWC,GAAnC,SAIA,gBAAGF,EAAH,EAAGA,MAAH,gBAAkBA,EAAMC,WAAWM,GAAnC,SA0BxBuW,UArBI,WACjB,IAAMC,EAAiBC,cAAO,SAACC,GAAD,OAAWA,EAAMF,kBAC/C,EAAmCG,eAAnC,mBAAOC,EAAP,KAAsBC,EAAtB,KAMA,OAJAtU,qBAAU,WACRiU,EAAe,CAAEM,aAAa,EAAOC,aAAa,MACjD,IAGD,mCACE,eAAC,QAAD,CAAOC,KAAMC,WAASC,iBAAkBC,qBAAmB,EAA3D,UACE,eAAC,GAAD,WACE,cAAC,GAAD,IACA,cAAC,GAAD,QAEAP,GAAiB,cAACjB,GAAD,CAAcC,YAAaiB","file":"static/js/7.47ddd4f5.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/welcomeModal-dark.0f21fb6b.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-dark@2x.45349aad.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-dark@3x.8ea4669c.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-light.9edc986b.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-light@2x.a465cde5.jpg\";","export default __webpack_public_path__ + \"static/media/welcomeModal-light@3x.c6262e4c.jpg\";","import { BigNumber } from '@ethersproject/bignumber'\nimport { CollectionTableColumn, TimePeriod } from 'nft/types'\nimport { useMemo } from 'react'\nimport { CellProps, Column, Row } from 'react-table'\nimport { MediumOnly } from 'theme/components'\n\nimport { ChangeCell, CollectionTitleCell, DiscreteNumberCell, EthCell, TextCell, VolumeCell } from './Cells/Cells'\nimport { Table } from './Table'\n\nexport enum ColumnHeaders {\n  Volume = 'Volume',\n  VolumeChange = 'Volume change',\n  Floor = 'Floor',\n  FloorChange = 'Floor change',\n  Sales = 'Sales',\n  Items = 'Items',\n  Owners = 'Owners',\n}\n\nconst VOLUME_CHANGE_MAX_VALUE = 9999\n\nconst compareFloats = (a: number, b: number): 1 | -1 => {\n  return Math.round(a * 100000) >= Math.round(b * 100000) ? 1 : -1\n}\n\nconst CollectionTable = ({ data, timePeriod }: { data: CollectionTableColumn[]; timePeriod: TimePeriod }) => {\n  const floorSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      const aFloor = BigNumber.from(rowA.original.floor.value ?? 0)\n      const bFloor = BigNumber.from(rowB.original.floor.value ?? 0)\n\n      return aFloor.gte(bFloor) ? 1 : -1\n    }\n  }, [])\n\n  const floorChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.floor.change, rowB.original.floor.change)\n    }\n  }, [])\n\n  const volumeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.value, rowB.original.volume.value)\n    }\n  }, [])\n\n  const volumeChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.change, rowB.original.volume.change)\n    }\n  }, [])\n\n  const columns: Column<CollectionTableColumn>[] = useMemo(\n    () => [\n      {\n        Header: 'Collection name',\n        accessor: 'collection',\n        Cell: CollectionTitleCell,\n        disableSortBy: true,\n      },\n      {\n        id: ColumnHeaders.Floor,\n        Header: ColumnHeaders.Floor,\n        accessor: ({ floor }) => floor.value,\n        sortType: floorSort,\n        Cell: function ethCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <>\n              <EthCell\n                value={cell.row.original.floor.value}\n                denomination={cell.row.original.denomination}\n                usdPrice={cell.row.original.usdPrice}\n              />\n              {timePeriod !== TimePeriod.AllTime && (\n                <MediumOnly>\n                  <ChangeCell change={cell.row.original.floor.change} />\n                </MediumOnly>\n              )}\n            </>\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.FloorChange,\n        Header: ColumnHeaders.FloorChange,\n        accessor: ({ floor }) => floor.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: floorChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : (\n            <ChangeCell change={cell.row.original.floor.change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Volume,\n        Header: ColumnHeaders.Volume,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        sortType: volumeSort,\n        Cell: function volumeCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <VolumeCell\n              value={cell.row.original.volume.value}\n              denomination={cell.row.original.denomination}\n              usdPrice={cell.row.original.usdPrice}\n            />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.VolumeChange,\n        Header: ColumnHeaders.VolumeChange,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: volumeChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          const { change } = cell.row.original.volume\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : change >= VOLUME_CHANGE_MAX_VALUE ? (\n            <ChangeCell change={change}>{`>${VOLUME_CHANGE_MAX_VALUE}`}%</ChangeCell>\n          ) : (\n            <ChangeCell change={change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Items,\n        Header: ColumnHeaders.Items,\n        accessor: 'totalSupply',\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={{ value: cell.row.original.totalSupply }} />\n        },\n      },\n      {\n        Header: ColumnHeaders.Owners,\n        accessor: ({ owners }) => owners.value,\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={cell.row.original.owners} />\n        },\n      },\n    ],\n    [floorChangeSort, floorSort, volumeChangeSort, volumeSort, timePeriod]\n  )\n  return (\n    <>\n      <Table\n        smallHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.Volume,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        mediumHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        largeHiddenColumns={[ColumnHeaders.Items, ColumnHeaders.Owners]}\n        {...{ data, columns }}\n      />\n    </>\n  )\n}\n\nexport default CollectionTable\n","import { ChevronLeftIcon, ChevronRightIcon } from 'nft/components/icons'\nimport { calculateCardIndex, calculateFirstCardIndex, calculateRank } from 'nft/utils'\nimport { ReactNode, useCallback, useEffect, useRef } from 'react'\nimport { a, useSprings } from 'react-spring'\nimport styled from 'styled-components/macro'\n\nconst CarouselContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst CarouselCardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  overflow-x: hidden;\n  max-width: 100%;\n  height: 390px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    max-width: 600px;\n  }\n`\n\nconst CarouselItemCard = styled(a.div)`\n  display: flex;\n  justify-content: center;\n  padding: 4px 12px 32px;\n  position: absolute;\n  will-change: transform;\n  width: calc(100%);\n  height: calc(100%);\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    padding: 4px 32px 32px;\n  }\n`\n\nconst CarouselItemIcon = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: none;\n  user-select: none;\n  height: calc(100%);\n  padding: 4px 0 32px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    display: flex;\n  }\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\ninterface CarouselProps {\n  children: ReactNode[]\n  activeIndex: number\n  toggleNextSlide: (idx: number) => void\n}\n\nconst MAX_CARD_WIDTH = 800\n\nexport const Carousel = ({ children, activeIndex, toggleNextSlide }: CarouselProps) => {\n  const idx = useCallback((x: number, l = children.length) => calculateCardIndex(x, l), [children])\n  const getPos = useCallback(\n    (i: number, firstVis: number, firstVisIdx: number) => calculateFirstCardIndex(i, firstVis, firstVisIdx, idx),\n    [idx]\n  )\n  const [springs, set] = useSprings(children.length, (i) => ({\n    x: (i < children.length - 1 ? i : -1) * MAX_CARD_WIDTH,\n  }))\n  const prev = useRef([0, 1])\n\n  const runSprings = useCallback(\n    (y: number, vy: number) => {\n      const firstVis = idx(Math.floor(y / MAX_CARD_WIDTH) % children.length)\n      const firstVisIdx = vy < 0 ? children.length - 2 : 1\n      set((i) => {\n        const position = getPos(i, firstVis, firstVisIdx)\n        const prevPosition = getPos(i, prev.current[0], prev.current[1])\n        const rank = calculateRank(firstVis, firstVisIdx, position, children.length, y)\n        return {\n          x: (-y % (MAX_CARD_WIDTH * children.length)) + MAX_CARD_WIDTH * rank,\n          immediate: vy < 0 ? prevPosition > position : prevPosition < position,\n          config: { tension: 250, friction: 30 },\n        }\n      })\n      prev.current = [firstVis, firstVisIdx]\n    },\n    [idx, getPos, set, children.length]\n  )\n\n  const direction = useRef(0)\n\n  useEffect(() => {\n    runSprings(activeIndex * MAX_CARD_WIDTH, direction.current)\n  }, [activeIndex, runSprings])\n\n  const toggleSlide = useCallback(\n    (next: -1 | 1) => {\n      direction.current = next\n      toggleNextSlide(next)\n    },\n    [toggleNextSlide]\n  )\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      toggleSlide(1)\n    }, 7_000)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [toggleSlide, activeIndex])\n\n  return (\n    <CarouselContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(-1)}>\n        <ChevronLeftIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n      <CarouselCardContainer>\n        {springs.map(({ x }, i) => (\n          <CarouselItemCard key={i} style={{ x }}>\n            {children[i]}\n          </CarouselItemCard>\n        ))}\n      </CarouselCardContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(1)}>\n        <ChevronRightIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n    </CarouselContainer>\n  )\n}\n\nexport const LoadingCarousel = ({ children }: { children: ReactNode }) => (\n  <Carousel activeIndex={0} toggleNextSlide={() => undefined}>\n    {[children]}\n  </Carousel>\n)\n","import { formatNumberOrString, NumberType } from '@uniswap/conedison/format'\nimport { loadingAnimation } from 'components/Loader/styled'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useCollectionQuery } from 'graphql/data/nft/Collection'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { Markets, TrendingCollection } from 'nft/types'\nimport { formatWeiToDecimal } from 'nft/utils'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme/components/text'\n\nconst CarouselCardBorder = styled.div`\n  width: 100%;\n  position: relative;\n  border-radius: 21px;\n  cursor: pointer;\n  border: 1px solid transparent;\n  transition-property: border-color;\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\n  transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n\n  :hover {\n    border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  }\n\n  ::after {\n    content: '';\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 21px;\n    z-index: -1;\n    box-shadow: ${({ theme }) => theme.deepShadow};\n    transition-property: opacity;\n    transition-duration: ${({ theme }) => theme.transition.duration.fast};\n    transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n  }\n\n  :hover::after {\n    opacity: 1;\n  }\n`\n\nconst CardHeaderContainer = styled.div<{ src: string }>`\n  position: relative;\n  background-image: ${({ src }) => `url(${src})`};\n  background-size: cover;\n  background-position: center;\n`\n\nconst LoadingCardHeaderContainer = styled.div`\n  position: relative;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst CardHeaderColumn = styled.div`\n  position: relative;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  flex-direction: column;\n  gap: 8px;\n  height: 202px;\n  justify-content: center;\n  padding: 0 40px;\n  z-index: 1;\n`\nconst IconContainer = styled.div`\n  display: inline;\n  vertical-align: text-bottom;\n  margin-left: 2px;\n`\nconst CollectionNameContainer = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  text-align: center;\n  max-height: 56px;\n`\n\nconst LoadingCollectionNameContainer = styled(LoadingBubble)`\n  width: 50%;\n`\n\nconst HeaderOverlay = styled.div`\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%, rgba(0, 0, 0, 0.08));\n  bottom: 0px;\n  left: 0px;\n  position: absolute;\n  right: 0px;\n  top: 0px;\n  z-index: 0;\n\n  // overlay workaround for firefox only\n  @supports (-moz-appearance: none) {\n    bottom: -1px;\n  }\n`\n\nconst CollectionImage = styled.img`\n  width: 86px;\n  height: 86px;\n  background: ${({ theme }) => theme.accentTextLightPrimary};\n  border: 2px solid ${({ theme }) => theme.accentTextLightPrimary};\n  border-radius: 100px;\n`\n\nconst LoadingCollectionImage = styled.div`\n  width: 86px;\n  height: 86px;\n  border-radius: 100px;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst LoadingTableElement = styled(LoadingBubble)`\n  width: 50px;\n`\n\nconst TableElement = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n`\n\nconst FirstColumnTextWrapper = styled.div``\n\nconst CardBottomContainer = styled.div`\n  display: grid;\n  flex: 1;\n  gap: 8px;\n  grid-template-columns: auto auto auto;\n  padding: 16px 16px 20px;\n`\n\nconst MarketplaceIcon = styled.img`\n  width: 20px;\n  height: 20px;\n`\n\nconst CarouselCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 20px;\n  overflow: hidden;\n  height: 100%;\n\n  ${TableElement}:nth-child(3n-1), ${LoadingTableElement}:nth-child(3n-1) {\n    justify-self: center;\n  }\n\n  ${TableElement}:nth-child(3n), ${LoadingTableElement}:nth-child(3n) {\n    justify-self: right;\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.xs}px) or ((min-width: ${({ theme }) =>\n      theme.breakpoint.sm}px) and (max-width: 880px)) {\n    ${FirstColumnTextWrapper} {\n      display: none;\n    }\n    ${TableElement} {\n      justify-self: left !important;\n    }\n    ${CardHeaderColumn} {\n      padding: 0 20px;\n    }\n  }\n`\n\ninterface MarketplaceRowProps {\n  marketplace: string\n  floorInEth?: number\n  listings?: number\n}\n\nexport const MarketplaceRow = ({ marketplace, floorInEth, listings }: MarketplaceRowProps) => {\n  return (\n    <>\n      <TableElement>\n        <MarketplaceIcon\n          src={`/nft/svgs/marketplaces/${marketplace.toLowerCase()}-grey.svg`}\n          alt={`${marketplace} icon`}\n        />\n        <FirstColumnTextWrapper>\n          <ThemedText.BodySmall color=\"textSecondary\">{marketplace}</ThemedText.BodySmall>\n        </FirstColumnTextWrapper>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">\n          {Number(floorInEth) > 0\n            ? `${formatNumberOrString(floorInEth, NumberType.NFTTokenFloorPriceTrailingZeros)} ETH`\n            : '-'}\n        </ThemedText.BodySmall>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">{Number(listings) > 0 ? listings : 'None'}</ThemedText.BodySmall>\n      </TableElement>\n    </>\n  )\n}\n\ninterface CarouselCardProps {\n  collection: TrendingCollection\n  onClick: () => void\n}\n\nconst MARKETS_TO_CHECK = [Markets.Opensea, Markets.X2Y2, Markets.LooksRare] as const\nconst MARKETS_ENUM_TO_NAME = {\n  [Markets.Opensea]: 'OpenSea',\n  [Markets.X2Y2]: 'X2Y2',\n  [Markets.LooksRare]: 'LooksRare',\n}\n\nexport const CarouselCard = ({ collection, onClick }: CarouselCardProps) => {\n  const gqlCollection = useCollectionQuery(collection.address)\n\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer onClick={onClick}>\n        <CarouselCardHeader collection={collection} />\n        <CardBottomContainer>\n          <>\n            <TableElement>\n              <MarketplaceIcon src=\"/nft/svgs/marketplaces/uniswap-magenta.svg\" alt=\"Uniswap icon\" />\n              <FirstColumnTextWrapper>\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">Uniswap</ThemedText.SubHeaderSmall>\n              </FirstColumnTextWrapper>\n            </TableElement>\n            <TableElement>\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                {formatWeiToDecimal(collection.floor.toString())} ETH Floor\n              </ThemedText.SubHeaderSmall>\n            </TableElement>\n            <TableElement>\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                {gqlCollection.marketplaceCount?.reduce((acc, cur) => acc + cur.count, 0)} Listings\n              </ThemedText.SubHeaderSmall>\n            </TableElement>\n            {MARKETS_TO_CHECK.map((market) => {\n              const marketplace = gqlCollection.marketplaceCount?.find(\n                (marketplace) => marketplace.marketplace === market\n              )\n              if (!marketplace) {\n                return null\n              }\n              return (\n                <MarketplaceRow\n                  key={`CarouselCard-key-${collection.address}-${marketplace.marketplace}`}\n                  marketplace={MARKETS_ENUM_TO_NAME[market]}\n                  listings={marketplace.count}\n                  floorInEth={marketplace.floorPrice}\n                />\n              )\n            })}\n          </>\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n\nconst DEFAULT_TABLE_ELEMENTS = 12\n\nexport const LoadingTable = () => {\n  return (\n    <>\n      {[...Array(DEFAULT_TABLE_ELEMENTS)].map((index) => (\n        <LoadingTableElement key={index} />\n      ))}\n    </>\n  )\n}\n\nconst CollectionName = styled(ThemedText.MediumHeader)`\n  display: inline;\n  vertical-align: text-bottom;\n  line-height: 28px;\n`\n\nconst CarouselCardHeader = ({ collection }: { collection: TrendingCollection }) => {\n  return (\n    <CardHeaderContainer src={collection.bannerImageUrl}>\n      <CardHeaderColumn>\n        <CollectionImage src={collection.imageUrl} />\n        <CollectionNameContainer>\n          <CollectionName color=\"accentTextLightPrimary\" fontWeight=\"500\">\n            {collection.name}\n          </CollectionName>\n          {collection.isVerified && (\n            <IconContainer>\n              <VerifiedIcon width=\"24px\" height=\"24px\" />\n            </IconContainer>\n          )}\n        </CollectionNameContainer>\n      </CardHeaderColumn>\n      <HeaderOverlay />\n    </CardHeaderContainer>\n  )\n}\n\nexport const LoadingCarouselCard = ({ collection }: { collection?: TrendingCollection }) => {\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer>\n        {collection ? (\n          <CarouselCardHeader collection={collection} />\n        ) : (\n          <LoadingCardHeaderContainer>\n            <CardHeaderColumn>\n              <LoadingCollectionImage />\n              <LoadingCollectionNameContainer />\n            </CardHeaderColumn>\n            <HeaderOverlay />\n          </LoadingCardHeaderContainer>\n        )}\n        <CardBottomContainer>\n          <LoadingTable />\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n","import { useLoadCollectionQuery } from 'graphql/data/nft/Collection'\nimport { fetchTrendingCollections } from 'nft/queries'\nimport { TimePeriod } from 'nft/types'\nimport { calculateCardIndex } from 'nft/utils'\nimport { Suspense, useCallback, useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { opacify } from 'theme/utils'\n\nimport { Carousel, LoadingCarousel } from './Carousel'\nimport { CarouselCard, LoadingCarouselCard } from './CarouselCard'\n\nconst BannerContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  padding-top: 22px;\n  position: relative;\n  max-width: 1200px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding: 32px 16px;\n  }\n`\n\nconst AbsoluteFill = styled.div`\n  position: absolute;\n  top: -96px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`\n\n// Safari has issues with blur / overflow, forcing GPU rendering with `translate3d` fixes it\n// https://stackoverflow.com/a/71353198\nconst BannerBackground = styled(AbsoluteFill)<{ backgroundImage: string }>`\n  transform: translate3d(0, 0, 0) scaleY(1.1);\n\n  background-image: ${(props) => `url(${props.backgroundImage})`};\n  filter: blur(62px);\n\n  opacity: ${({ theme }) => (theme.darkMode ? 0.3 : 0.2)};\n`\n\nconst PlainBackground = styled(AbsoluteFill)`\n  background: ${({ theme }) => `linear-gradient(${opacify(10, theme.userThemeColor)}, transparent)`};\n`\n\nconst BannerMainArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n  gap: 36px;\n  max-width: 1200px;\n  justify-content: space-between;\n  z-index: 2;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    height: 100%;\n    gap: 14px;\n    margin-top: 4px;\n    margin-bottom: 6px;\n  }\n`\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  max-width: 500px;\n  font-weight: 500;\n  font-size: 72px;\n  line-height: 88px;\n  align-self: center;\n  flex-shrink: 0;\n  padding-bottom: 32px;\n\n  color: ${({ theme }) => theme.textPrimary};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    font-size: 48px;\n    line-height: 67px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    font-size: 36px;\n    line-height: 50px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    line-height: 43px;\n    text-align: center;\n    padding-bottom: 16px;\n\n    br {\n      display: none;\n    }\n  }\n\n  /* Custom breakpoint to split into two lines on smaller screens */\n  @media only screen and (max-width: 550px) {\n    font-size: 28px;\n    line-height: 34px;\n    padding-bottom: 0;\n\n    br {\n      display: unset;\n    }\n  }\n`\n\n// Exclude collections that are not available in any of the following - OpenSea, X2Y2 and LooksRare:\nconst EXCLUDED_COLLECTIONS = ['0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb']\nconst TRENDING_COLLECTION_SIZE = 5\n\nconst Banner = () => {\n  const navigate = useNavigate()\n\n  const { data } = useQuery(\n    ['trendingCollections'],\n    () => {\n      return fetchTrendingCollections({\n        volumeType: 'eth',\n        timePeriod: TimePeriod.OneDay,\n        size: TRENDING_COLLECTION_SIZE + EXCLUDED_COLLECTIONS.length,\n      })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const collections = useMemo(\n    () => data?.filter((collection) => !EXCLUDED_COLLECTIONS.includes(collection.address)).slice(0, 5),\n    [data]\n  )\n\n  // Trigger queries for the top trending collections, so that the data is immediately available if the user clicks through.\n  const collectionAddresses = useMemo(() => collections?.map(({ address }) => address), [collections])\n  useLoadCollectionQuery(collectionAddresses)\n\n  const [activeCollectionIdx, setActiveCollectionIdx] = useState(0)\n  const onToggleNextSlide = useCallback(\n    (direction: number) => {\n      if (!collections) return\n      setActiveCollectionIdx((idx) => calculateCardIndex(idx + direction, collections.length))\n    },\n    [collections]\n  )\n\n  const activeCollection = collections?.[activeCollectionIdx]\n\n  return (\n    <BannerContainer>\n      {activeCollection ? (\n        activeCollection.bannerImageUrl ? (\n          <BannerBackground backgroundImage={activeCollection.bannerImageUrl} />\n        ) : (\n          <PlainBackground />\n        )\n      ) : null}\n      <BannerMainArea>\n        <HeaderContainer>\n          Better prices. <br />\n          More listings.\n        </HeaderContainer>\n        {collections ? (\n          <Carousel activeIndex={activeCollectionIdx} toggleNextSlide={onToggleNextSlide}>\n            {collections.map((collection) => (\n              <Suspense fallback={<LoadingCarouselCard collection={collection} />} key={collection.address}>\n                <CarouselCard\n                  key={collection.address}\n                  collection={collection}\n                  onClick={() => navigate(`/nfts/collection/${collection.address}`)}\n                />\n              </Suspense>\n            ))}\n          </Carousel>\n        ) : (\n          <LoadingCarousel>\n            <LoadingCarouselCard />\n          </LoadingCarousel>\n        )}\n      </BannerMainArea>\n    </BannerContainer>\n  )\n}\n\nexport default Banner\n","import { formatEther } from '@ethersproject/units'\nimport { SquareArrowDownIcon, SquareArrowUpIcon, VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile } from 'nft/hooks'\nimport { Denomination } from 'nft/types'\nimport { volumeFormatter } from 'nft/utils'\nimport { ReactNode } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from '../../../utils/currency'\nimport * as styles from './Cells.css'\n\nconst TruncatedText = styled.div`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst CollectionNameContainer = styled(TruncatedText)`\n  display: flex;\n  padding: 14px 0px 14px 8px;\n  align-items: center;\n`\n\nconst CollectionName = styled(TruncatedText)`\n  margin-left: 8px;\n`\n\nconst TruncatedSubHeader = styled(ThemedText.SubHeader)`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\nconst TruncatedSubHeaderSmall = styled(ThemedText.SubHeaderSmall)`\n  color: ${({ theme }) => `${theme.textPrimary}`};\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst RoundedImage = styled.div<{ src?: string }>`\n  height: 36px;\n  width: 36px;\n  border-radius: 36px;\n  background: ${({ src, theme }) => (src ? `url(${src})` : theme.backgroundModule)};\n  background-size: cover;\n  background-position: center;\n  flex-shrink: 0;\n`\n\nconst ChangeCellContainer = styled.div<{ change: number }>`\n  display: flex;\n  color: ${({ theme, change }) => (change >= 0 ? theme.accentSuccess : theme.accentFailure)};\n  justify-content: end;\n  align-items: center;\n  gap: 2px;\n`\n\nconst EthContainer = styled.div`\n  display: flex;\n  justify-content: end;\n`\n\ninterface CellProps {\n  value: {\n    logo?: string\n    name?: string\n    address?: string\n    isVerified?: boolean\n    value?: number\n    change?: number\n  }\n}\n\nexport const CollectionTitleCell = ({ value }: CellProps) => {\n  const isMobile = useIsMobile()\n  return (\n    <CollectionNameContainer>\n      <RoundedImage src={value.logo} />\n      <CollectionName>\n        {isMobile ? (\n          <TruncatedSubHeaderSmall>{value.name}</TruncatedSubHeaderSmall>\n        ) : (\n          <TruncatedSubHeader>{value.name}</TruncatedSubHeader>\n        )}\n      </CollectionName>\n      {value.isVerified && (\n        <span className={styles.verifiedBadge}>\n          <VerifiedIcon />\n        </span>\n      )}\n    </CollectionNameContainer>\n  )\n}\n\nexport const DiscreteNumberCell = ({ value }: CellProps) => (\n  <span>{value.value ? volumeFormatter(value.value) : '-'}</span>\n)\n\nconst getDenominatedValue = (denomination: Denomination, inWei: boolean, value?: number, usdPrice?: number) => {\n  if (denomination === Denomination.ETH) return value\n  if (usdPrice && value) return usdPrice * (inWei ? parseFloat(formatEther(value)) : value)\n\n  return undefined\n}\n\nexport const EthCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, true, value, usdPrice)\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? formatWeiToDecimal(denominatedValue.toString(), true) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.BodySmall : ThemedText.BodyPrimary\n\n  return (\n    <EthContainer>\n      <TextComponent>{value ? formattedValue : '-'}</TextComponent>\n    </EthContainer>\n  )\n}\n\nexport const TextCell = ({ value }: { value: string }) => <ThemedText.BodyPrimary>{value}</ThemedText.BodyPrimary>\n\nexport const VolumeCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, false, value, usdPrice)\n\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? ethNumberStandardFormatter(denominatedValue.toString(), false, false, true) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  return (\n    <EthContainer>\n      <ThemedText.BodyPrimary>{value ? formattedValue : '-'}</ThemedText.BodyPrimary>\n    </EthContainer>\n  )\n}\n\nexport const ChangeCell = ({ change, children }: { children?: ReactNode; change?: number }) => {\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.Caption : ThemedText.BodyPrimary\n  return (\n    <ChangeCellContainer change={change ?? 0}>\n      {!change || change > 0 ? (\n        <SquareArrowUpIcon width=\"20px\" height=\"20px\" />\n      ) : (\n        <SquareArrowDownIcon width=\"20px\" height=\"20px\" />\n      )}\n      <TextComponent color=\"currentColor\">{children || `${change ? Math.abs(Math.round(change)) : 0}%`}</TextComponent>\n    </ChangeCellContainer>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZiB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGY6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRmOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkaCB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGg6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRqIHsKICBwYWRkaW5nOiAxOXB4IDE3cHg7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci5fMTI3bDhoZGs6OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGluc2V0OiAtMXB4OwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MS40NmRlZywgIzQ2NzNGQSAwJSwgIzk2NDZGQSAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRsOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGw6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQouXzEyN2w4aGRuOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1yZ3c2ZXoxeSk7Cn0=\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var logo = 'rgw6ez7ax';\nexport var title = 'rgw6ezcr rgw6ezb3 rgw6ez7ol rgw6ez4ax rgw6ez42f rgw6ez7lh rgw6ez423 rgw6ez429 rgw6ez2a9 rgw6ez2ex';\nexport var address = 'rgw6ezcr rgw6ezb3 rgw6ez7ol rgw6ez4ax rgw6ez42f rgw6ez7lh rgw6ez423 rgw6ez429 rgw6ez2a9 rgw6ez2ex rgw6ezjx rgw6ez3l rgw6ez1jl rgw6ez15f';\nexport var verifiedBadge = 'rgw6ezjl rgw6ez41l rgw6ez2kl rgw6ez17x rgw6ez119 rgw6ez42f';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkZiB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGY6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRmOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkaCB7CiAgcGFkZGluZzogMTRweCAxOHB4Owp9Ci5fMTI3bDhoZGg6ZGlzYWJsZWQgewogIG9wYWNpdHk6IDAuMzsKfQouXzEyN2w4aGRqIHsKICBwYWRkaW5nOiAxOXB4IDE3cHg7CiAgYm94LXNpemluZzogYm9yZGVyLWJveDsKICB0ZXh0LWFsaWduOiBsZWZ0Owp9Ci5fMTI3bDhoZGs6OmJlZm9yZSB7CiAgY29udGVudDogIiI7CiAgcG9zaXRpb246IGFic29sdXRlOwogIGluc2V0OiAtMXB4OwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCg5MS40NmRlZywgIzQ2NzNGQSAwJSwgIzk2NDZGQSAxMDAuMTMlKSBib3JkZXItYm94OwogIGJvcmRlci1jb2xvcjogdHJhbnNwYXJlbnQ7CiAgLXdlYmtpdC1tYXNrOiBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApIHBhZGRpbmctYm94LCBsaW5lYXItZ3JhZGllbnQoI2ZmZiAwIDApOzsKICAtd2Via2l0LW1hc2stY29tcG9zaXRlOiB4b3I7OwogIG1hc2stY29tcG9zaXRlOiBleGNsdWRlOwogIGJvcmRlci1zdHlsZTogc29saWQ7CiAgYm9yZGVyLXdpZHRoOiAxcHg7CiAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDsKICBwb2ludGVyLWV2ZW50czogbm9uZTsKfQouXzEyN2w4aGRsOjpiZWZvcmUgewogIG9wYWNpdHk6IDA7CiAgLXdlYmtpdC10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1vei10cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2U7CiAgLW1zLXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICB0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMjVzIGVhc2Utb3V0Owp9Ci5fMTI3bDhoZGw6aG92ZXI6OmJlZm9yZSB7CiAgb3BhY2l0eTogMTsKfQouXzEyN2w4aGRuOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1yZ3c2ZXoxeSk7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/explore/Explore.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/explore/Explore.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xbW9yN3ZlMSB7CiAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgbWFyZ2luOiAwIGF1dG87CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogcm93OwogIGZsZXgtd3JhcDogbm93cmFwOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouXzFtb3I3dmUzIHsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC40cyBlYXNlOwp9Ci5fMW1vcjd2ZTggewogIHZlcnRpY2FsLWFsaWduOiBib3R0b207Cn0KLl8xbW9yN3ZlYSB7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSgxNTMsIDE2MSwgMTg5LCAwLjI0KTsKICBib3JkZXItc3BhY2luZzogMHB4IDQwcHg7Cn0KLl8xbW9yN3ZlZDpudGgtbGFzdC1jaGlsZCgxKSB7CiAgcGFkZGluZy1yaWdodDogMjBweDsKfQouXzFtb3I3dmVmOm50aC1sYXN0LWNoaWxkKDEpIHsKICBwYWRkaW5nLXJpZ2h0OiAyMHB4Owp9Ci5fMW1vcjd2ZWg6bnRoLWxhc3QtY2hpbGQoMSkgewogIHBhZGRpbmctcmlnaHQ6IDIwcHg7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var section = '_1mor7ve1 rgw6ez2al rgw6ez296 rgw6ez2g3 rgw6ez2eo';\nexport var activityRow = '_1mor7ve3 rgw6ez453 rgw6ez3f rgw6ez3n';\nexport var activeRow = 'rgw6ez6jf';\nexport var timestamp = 'rgw6ez453 rgw6ezar rgw6ez4gr rgw6ez3bf rgw6ez37b rgw6ez349 rgw6ez35z rgw6ez3dr rgw6ez3gz';\nexport var marketplaceIcon = '_1mor7ve8 rgw6ez10f rgw6ez173 rgw6ez7al rgw6ez3u9 rgw6ezjx';\nexport var table = '_1mor7vea rgw6ez4m3 rgw6ez153 rgw6ez7ax rgw6ez79l';\nexport var thead = 'rgw6ezpr rgw6ez4xr rgw6ez7j5 rgw6ez7a5';\nexport var th = '_1mor7ved rgw6ezcr rgw6ezax rgw6ez7oh rgw6ez4b3 rgw6ez2l9 rgw6ez24r';\nexport var td = '_1mor7vef rgw6ezcr rgw6ezb3 rgw6ez7ol rgw6ez2kl rgw6ez243 rgw6ez1h9 rgw6ez42l rgw6ez45f';\nexport var loadingTd = '_1mor7veh rgw6ezcr rgw6ezb3 rgw6ez7ol rgw6ez2kx rgw6ez24f rgw6ez1h9 rgw6ez42l rgw6ez45f';","import { LoadingBubble } from 'components/Tokens/loading'\nimport { useWindowSize } from 'hooks/useWindowSize'\nimport { useIsMobile } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Column, ColumnInstance, HeaderGroup, IdType, useSortBy, useTable } from 'react-table'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { GlowEffect, ThemedText } from 'theme'\n\nimport { Box } from '../../components/Box'\nimport { CollectionTableColumn } from '../../types'\nimport { ArrowRightIcon } from '../icons'\nimport { ColumnHeaders } from './CollectionTable'\nimport * as styles from './Explore.css'\n\n// Default table cell max width\nconst CELL_WIDTH = '160px'\n// Collection Name cell max widths\nconst MOBILE_CELL_WIDTH = '240px'\nconst DESKTOP_CELL_WIDTH = '360px'\n\nconst RankCellContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding-left: 24px;\n  gap: 12px;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-left: 8px;\n  }\n`\n\nconst StyledRow = styled.tr`\n  cursor: pointer;\n  :hover {\n    background: ${({ theme }) => theme.stateOverlayHover};\n  }\n  :active {\n    background: ${({ theme }) => theme.stateOverlayPressed};\n  }\n`\n\nconst StyledLoadingRow = styled.tr`\n  height: 80px;\n`\n\nconst StyledHeader = styled.th<{ disabled?: boolean }>`\n  ${({ disabled }) => !disabled && `cursor: pointer;`}\n\n  :hover {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.hover};`}\n  }\n\n  :active {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.click};`}\n  }\n`\n\nconst StyledLoadingHolder = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: end;\n  align-items: center;\n`\n\nconst StyledCollectionNameHolder = styled.div`\n  display: flex;\n  margin-left: 24px;\n  gap: 8px;\n  align-items: center;\n`\n\nconst StyledImageHolder = styled(LoadingBubble)`\n  width: 36px;\n  height: 36px;\n  border-radius: 36px;\n`\n\nconst StyledRankHolder = styled(LoadingBubble)`\n  width: 8px;\n  height: 16px;\n  margin-right: 12px;\n`\n\nconst DEFAULT_TRENDING_TABLE_QUERY_AMOUNT = 10\n\ninterface TableProps<D extends Record<string, unknown>> {\n  columns: Column<CollectionTableColumn>[]\n  data: CollectionTableColumn[]\n  smallHiddenColumns: IdType<D>[]\n  mediumHiddenColumns: IdType<D>[]\n  largeHiddenColumns: IdType<D>[]\n}\nexport function Table<D extends Record<string, unknown>>({\n  columns,\n  data,\n  smallHiddenColumns,\n  mediumHiddenColumns,\n  largeHiddenColumns,\n  ...props\n}: TableProps<D>) {\n  const theme = useTheme()\n  const { width } = useWindowSize()\n  const isMobile = useIsMobile()\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setHiddenColumns, visibleColumns } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [\n            {\n              desc: true,\n              id: ColumnHeaders.Volume,\n            },\n          ],\n        },\n        ...props,\n      },\n      useSortBy\n    )\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (!width) return\n\n    if (width <= theme.breakpoint.sm) {\n      setHiddenColumns(smallHiddenColumns)\n    } else if (width <= theme.breakpoint.md) {\n      setHiddenColumns(mediumHiddenColumns)\n    } else if (width <= theme.breakpoint.lg) {\n      setHiddenColumns(largeHiddenColumns)\n    } else {\n      setHiddenColumns([])\n    }\n  }, [width, setHiddenColumns, columns, smallHiddenColumns, mediumHiddenColumns, largeHiddenColumns, theme.breakpoint])\n\n  if (data.length === 0) {\n    return <LoadingTable headerGroups={headerGroups} visibleColumns={visibleColumns} {...getTableProps()} />\n  }\n\n  return (\n    <GlowEffect>\n      <table {...getTableProps()} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? (isMobile ? '16px' : '52px') : 0,\n                    }}\n                    disabled={column.disableSortBy}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row)\n\n            return (\n              <StyledRow\n                {...row.getRowProps()}\n                key={row.id}\n                onClick={() => navigate(`/nfts/collection/${row.original.collection.address}`)}\n              >\n                {row.cells.map((cell, cellIndex) => {\n                  return (\n                    <td\n                      className={styles.td}\n                      {...cell.getCellProps()}\n                      key={cellIndex}\n                      style={{\n                        maxWidth: cellIndex === 0 ? (isMobile ? MOBILE_CELL_WIDTH : DESKTOP_CELL_WIDTH) : CELL_WIDTH,\n                      }}\n                    >\n                      {cellIndex === 0 ? (\n                        <RankCellContainer>\n                          {!isMobile && (\n                            <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n                              {i + 1}\n                            </ThemedText.BodySecondary>\n                          )}\n                          {cell.render('Cell')}\n                        </RankCellContainer>\n                      ) : (\n                        cell.render('Cell')\n                      )}\n                    </td>\n                  )\n                })}\n              </StyledRow>\n            )\n          })}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n\ninterface LoadingTableProps {\n  headerGroups: HeaderGroup<CollectionTableColumn>[]\n  visibleColumns: ColumnInstance<CollectionTableColumn>[]\n}\n\nfunction LoadingTable({ headerGroups, visibleColumns, ...props }: LoadingTableProps) {\n  return (\n    <GlowEffect>\n      <table {...props} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? '52px' : 0,\n                    }}\n                    disabled={index === 0}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...props}>\n          {[...Array(DEFAULT_TRENDING_TABLE_QUERY_AMOUNT)].map((_, index) => (\n            <StyledLoadingRow key={index}>\n              {[...Array(visibleColumns.length)].map((_, cellIndex) => {\n                return (\n                  <td className={styles.loadingTd} key={cellIndex}>\n                    {cellIndex === 0 ? (\n                      <StyledCollectionNameHolder>\n                        <StyledRankHolder />\n                        <StyledImageHolder />\n                        <LoadingBubble />\n                      </StyledCollectionNameHolder>\n                    ) : (\n                      <StyledLoadingHolder>\n                        <LoadingBubble />\n                      </StyledLoadingHolder>\n                    )}\n                  </td>\n                )\n              })}\n            </StyledLoadingRow>\n          ))}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n","import { OpacityHoverState } from 'components/Common'\nimport ms from 'ms.macro'\nimport { CollectionTableColumn, Denomination, TimePeriod, VolumeType } from 'nft/types'\nimport { fetchPrice } from 'nft/utils'\nimport { useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { fetchTrendingCollections } from '../../queries'\nimport CollectionTable from './CollectionTable'\n\nconst timeOptions: { label: string; value: TimePeriod }[] = [\n  { label: '1D', value: TimePeriod.OneDay },\n  { label: '1W', value: TimePeriod.SevenDays },\n  { label: '1M', value: TimePeriod.ThirtyDays },\n  { label: 'All', value: TimePeriod.AllTime },\n]\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 1200px;\n  padding: 0 16px;\n`\n\nconst StyledHeader = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 36px;\n  line-height: 44px;\n  weight: 500;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n  }\n`\n\nconst FiltersRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 36px;\n  margin-bottom: 20px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    margin-bottom: 16px;\n    margin-top: 16px;\n  }\n`\n\nconst Filter = styled.div`\n  display: flex;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  padding: 4px;\n`\n\nconst Selector = styled.div<{ active: boolean }>`\n  padding: 8px 12px;\n  border-radius: 12px;\n  background: ${({ active, theme }) => (active ? theme.backgroundInteractive : 'none')};\n  cursor: pointer;\n\n  ${OpacityHoverState}\n`\n\nconst StyledSelectorText = styled(ThemedText.SubHeader)<{ active: boolean }>`\n  color: ${({ theme, active }) => (active ? theme.textPrimary : theme.textSecondary)};\n`\n\nconst TrendingCollections = () => {\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.OneDay)\n  const [isEthToggled, setEthToggled] = useState(true)\n\n  const { isSuccess, data } = useQuery(\n    ['trendingCollections', timePeriod],\n    () => {\n      return fetchTrendingCollections({ volumeType: 'eth', timePeriod, size: 100 })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchInterval: 5000,\n    }\n  )\n\n  const { data: usdPrice } = useQuery(['fetchPrice', {}], () => fetchPrice(), {\n    refetchOnReconnect: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchInterval: ms`1m`,\n  })\n\n  const trendingCollections = useMemo(() => {\n    if (isSuccess && data) {\n      return data.map((d) => ({\n        ...d,\n        collection: {\n          name: d.name,\n          logo: d.imageUrl,\n          address: d.address,\n          isVerified: d.isVerified,\n        },\n        volume: {\n          value: d.volume,\n          change: d.volumeChange,\n          type: 'eth' as VolumeType,\n        },\n        floor: {\n          value: d.floor,\n          change: d.floorChange,\n        },\n        owners: {\n          value: d.owners,\n          change: d.ownersChange,\n        },\n        sales: d.sales,\n        totalSupply: d.totalSupply,\n        denomination: isEthToggled ? Denomination.ETH : Denomination.USD,\n        usdPrice,\n      }))\n    } else return [] as CollectionTableColumn[]\n  }, [data, isSuccess, isEthToggled, usdPrice])\n\n  return (\n    <ExploreContainer>\n      <StyledHeader>Trending NFT collections</StyledHeader>\n      <FiltersRow>\n        <Filter>\n          {timeOptions.map((timeOption) => {\n            return (\n              <Selector\n                key={timeOption.value}\n                active={timeOption.value === timePeriod}\n                onClick={() => setTimePeriod(timeOption.value)}\n              >\n                <StyledSelectorText lineHeight=\"20px\" active={timeOption.value === timePeriod}>\n                  {timeOption.label}\n                </StyledSelectorText>\n              </Selector>\n            )\n          })}\n        </Filter>\n        <Filter onClick={() => setEthToggled(!isEthToggled)}>\n          <Selector active={isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={isEthToggled}>\n              ETH\n            </StyledSelectorText>\n          </Selector>\n          <Selector active={!isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={!isEthToggled}>\n              USD\n            </StyledSelectorText>\n          </Selector>\n        </Filter>\n      </FiltersRow>\n      <CollectionTable data={trendingCollections} timePeriod={timePeriod} />\n    </ExploreContainer>\n  )\n}\n\nexport default TrendingCollections\n","/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport Modal from 'components/Modal'\nimport { useState } from 'react'\nimport { X } from 'react-feather'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ExternalLink } from 'theme/components'\nimport { ThemedText } from 'theme/components/text'\n\nconst Container = styled.div`\n  position: relative;\n  display: flex;\n  padding: 30% 24px 24px;\n  overflow: hidden;\n  height: fit-content;\n  user-select: none;\n`\n\nconst CloseButton = styled(X)`\n  position: absolute;\n  top: 20px;\n  right: 24px;\n  cursor: pointer;\n`\n\nconst Background = styled.img`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  object-fit: contain;\n`\n\nconst Content = styled.div`\n  display: flex;\n  flex-direction: column;\n  z-index: 1;\n  gap: 16px;\n`\n\nconst Link = styled(ExternalLink)`\n  color: ${({ theme }) => theme.accentActive};\n  stroke: ${({ theme }) => theme.accentActive};\n`\n\nconst Title = styled(ThemedText.LargeHeader)`\n  @media (max-width: ${({ theme }) => theme.breakpoint.xl}px) {\n    font-size: 20px !important;\n  }\n`\n\nconst Paragraph = styled(ThemedText.BodySecondary)`\n  line-height: 24px;\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.xl}px) {\n    font-size: 14px !important;\n    line-height: 20px;\n  }\n`\n\nconst BACKGROUND_IMAGE = {\n  dark: {\n    src: require('../../../assets/images/welcomeModal-dark.jpg').default,\n    srcSet: `\n      ${require('../../../assets/images/welcomeModal-dark@2x.jpg').default} 2x,\n      ${require('../../../assets/images/welcomeModal-dark@3x.jpg').default} 3x,\n    `,\n  },\n  light: {\n    src: require('../../../assets/images/welcomeModal-light.jpg').default,\n    srcSet: `\n      ${require('../../../assets/images/welcomeModal-light@2x.jpg').default} 2x,\n      ${require('../../../assets/images/welcomeModal-light@3x.jpg').default} 3x,\n    `,\n  },\n}\n\nexport function WelcomeModal({ onDismissed }: { onDismissed: () => void }) {\n  const [isOpen, setIsOpen] = useState(true)\n\n  const dismiss = () => {\n    setIsOpen(false)\n    setTimeout(() => onDismissed())\n  }\n\n  const theme = useTheme()\n\n  return (\n    <Modal isOpen={isOpen} onSwipe={dismiss} maxWidth={720} isBottomSheet={false}>\n      <Container>\n        <Background\n          {...(theme.darkMode ? BACKGROUND_IMAGE.dark : BACKGROUND_IMAGE.light)}\n          alt=\"Welcome modal background\"\n          draggable={false}\n        />\n        <Content>\n          <Title>Introducing NFTs on Uniswap</Title>\n          <Paragraph>\n            You can now buy and sell NFTs on Uniswap across marketplaces. Trade here to find more listings and better\n            prices. <br />\n            <br />\n            NFTs on Uniswap replaces Genie, which was{' '}\n            <Link href=\"https://uniswap.org/blog/genie\" title=\"Uniswap Labs has acquired Genie\">\n              acquired{' '}\n            </Link>{' '}\n            by Uniswap Labs earlier this year. If you have used Genie in the past, you may be eligible for a USDC\n            airdrop.{' '}\n            <Link\n              href=\"https://uniswap.org/blog/uniswap-nft-aggregator-announcement\"\n              title=\"Uniswap NFT aggregator announcement\"\n            >\n              Learn more.\n            </Link>\n          </Paragraph>\n          <CloseButton size={24} onClick={dismiss} />\n        </Content>\n      </Container>\n    </Modal>\n  )\n}\n","import { Trace } from '@uniswap/analytics'\nimport { PageName } from '@uniswap/analytics-events'\nimport Banner from 'nft/components/explore/Banner'\nimport TrendingCollections from 'nft/components/explore/TrendingCollections'\nimport { WelcomeModal } from 'nft/components/explore/WelcomeModal'\nimport { useBag } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport { useHideNFTWelcomeModal } from 'state/user/hooks'\nimport styled from 'styled-components/macro'\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    gap: 16px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    gap: 0px;\n  }\n`\n\nconst NftExplore = () => {\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\n  const [isModalHidden, hideModal] = useHideNFTWelcomeModal()\n\n  useEffect(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: false })\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <Trace page={PageName.NFT_EXPLORE_PAGE} shouldLogImpression>\n        <ExploreContainer>\n          <Banner />\n          <TrendingCollections />\n        </ExploreContainer>\n        {!isModalHidden && <WelcomeModal onDismissed={hideModal} />}\n      </Trace>\n    </>\n  )\n}\n\nexport default NftExplore\n"],"sourceRoot":""}