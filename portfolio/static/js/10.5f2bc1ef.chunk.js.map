{"version":3,"sources":["components/Common/index.tsx","../../node_modules/tslib/tslib.es6.js","../../node_modules/throttle-debounce/dist/index.esm.js","nft/components/collection/Activity.css.ts","nft/utils/address.ts","nft/components/collection/ActivityCells.tsx","nft/utils/date.ts","nft/components/collection/Activity.tsx","nft/components/collection/ActivityLoader.tsx","nft/components/collection/ActivityLoader.css.ts","components/Tokens/TokenDetails/Resource.tsx","graphql/data/nft/Details.ts","nft/components/common/Loading/LoadingSparkle.css.ts","nft/components/common/Loading/LoadingSparkle.tsx","../node_modules/react-feather/dist/icons/upload.js","nft/components/details/AssetDetails.tsx","nft/components/details/AssetPriceDetails.tsx","nft/components/details/AssetActivity.tsx","nft/components/details/AssetDetails.css.ts","nft/components/details/DetailsContainer.tsx","nft/components/details/InfoContainer.tsx","nft/components/details/TraitsContainer.tsx","nft/components/details/AssetDetailsLoading.tsx","nft/pages/asset/Asset.tsx"],"names":["ScrollBarStyles","css","theme","backgroundOutline","$isHorizontalScroll","OpacityHoverState","opacity","hover","click","transition","duration","timing","medium","ease","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","assign","t","s","i","n","arguments","length","prototype","call","apply","this","delay","noTrailing","callback","debounceMode","timeoutID","cancelled","lastExec","clearExistingTimeout","clearTimeout","wrapper","self","elapsed","Date","now","args","exec","clear","undefined","setTimeout","cancel","__","constructor","create","eventRow","headerRow","detailsImage","detailsName","eventDetail","eventTime","addressCell","buyCell","removeCell","filter","marketplaceIcon","rarityInfo","shortenAddress","address","charsStart","charsEnd","parsed","isAddress","Error","substring","AddressLink","styled","ExternalLink","textPrimary","formatListingStatus","status","OrderStatus","EXECUTED","CANCELLED","EXPIRED","VALID","BuyCell","event","collectionName","selectAsset","removeAsset","itemsInBag","cartExpanded","toggleCart","isMobile","ethPriceInUSD","asset","useMemo","buildActivityAsset","isSelected","some","item","tokenId","trace","useTrace","page","InterfacePageName","NFT_COLLECTION_PAGE","eventProperties","collection_address","token_id","token_type","tokenType","display","sm","lg","height","justifyContent","marginX","eventType","ActivityEventType","Listing","orderStatus","as","className","styles","onClick","e","preventDefault","sendAnalyticsEvent","NFTEventName","NFT_BUY_ADDED","disabled","AddressCell","desktopLBreakpoint","chainId","xl","xxl","href","getExplorerLink","ChainId","MAINNET","ExplorerDataType","ADDRESS","style","textDecoration","stopPropagation","MarketplaceIcon","marketplace","alt","src","PriceTooltip","price","text","textAlign","fontSize","fontWeight","color","placement","PriceCell","formattedPrice","putCommas","formatEthPrice","toString","md","gap","renderEventIcon","width","Sale","Transfer","CancelListing","ExternalLinkIcon","transactionHash","window","open","openEtherscanLinkInNewTab","marginLeft","eventColors","EventCell","eventTimestamp","eventTransactionHash","eventOnly","ActivityEventTypeDisplay","isValidDate","getTimeDifference","NoContentContainer","position","background","left","top","transform","Ranking","rarity","rarityVerified","rarityProviderLogo","getRarityProviderLogo","source","marginRight","fallbackProvider","paddingTop","paddingBottom","rank","getItemImage","tokenMetadata","smallImageUrl","imageUrl","ItemCell","useState","loaded","setLoaded","noContent","setNoContent","overflow","whiteSpace","name","draggable","onLoad","onError","date","parse","isNaN","getTime","diff","days","Math","floor","hours","minutes","ColumnHeaders","LoadingSquare","Box","LoadingSliver","ActivityLoadingRow","ActivityPageLoader","rowCount","map","_","index","ActivityLoader","marginTop","FilterBox","div","backgroundColor","HeaderRow","Item","Event","Price","By","To","initialFilterState","reduceFilters","state","action","baseHref","collectionAddress","Activity","contractAddress","useReducer","activeFilters","filtersDispatch","useInfiniteQuery","a","pageParam","ActivityFetcher","eventTypes","keys","key","getNextPageParam","lastPage","events","cursor","refetchInterval","refetchIntervalInBackground","refetchOnWindowFocus","refetchOnMount","eventsData","data","fetchNextPage","hasNextPage","isFetchingNextPage","isSuccess","isLoading","pages","flat","useBag","addAssetsToBag","removeAssetsFromBag","bagExpanded","toggleBag","useIsMobile","setEthPriceInUSD","isDarkMode","useIsDarkMode","useEffect","fetchPrice","then","Filter","useCallback","isActive","activeBackgroundColor","vars","gray500","gray200","themeVars","colors","backgroundInteractive","charAt","slice","toLowerCase","next","hasMore","loader","dataLength","fromAddress","toAddress","ResourceLink","accentAction","darken","Resource","link","gql","path","LoadingSparkle","viewBox","fill","xmlns","textSecondary","_extends","target","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","Upload","forwardRef","_ref","ref","_ref$color","_ref$size","size","rest","React","createElement","stroke","strokeWidth","strokeLinecap","strokeLinejoin","points","x1","y1","x2","y2","propTypes","PropTypes","string","oneOfType","number","displayName","MediaType","hoverState","stateOverlayHover","stateOverlayPressed","Container","BestPriceContainer","backgroundSurface","PriceRow","img","BuyNowButton","assetInBag","useAccentColor","accentFailure","margin","BuyNowButtonContainer","Tertiary","ThemedText","BodySecondary","textTertiary","UploadLink","NotForSaleContainer","DiscoveryContainer","OwnerText","OwnerInformationContainer","AssetInfoContainer","AssetHeader","CollectionNameContainer","CollectionHeader","span","VerifiedIconContainer","StyledVerifiedIcon","VerifiedIcon","DefaultLink","Link","OwnerContainer","navigate","useNavigate","USDValue","useQuery","setSellPageState","useProfilePageState","setProfilePageState","selectSellAsset","useSellAsset","resetSellAssets","reset","listing","sellOrders","expirationDate","endAt","USDPrice","floor_sell_order_price","goToListPage","NFT_SELL_ITEM_ADDED","asset_contract","ProfilePageStateType","LISTING","SubHeader","lineHeight","marketplaceUrl","getMarketplaceIcon","MediumHeader","priceInfo","ETHPrice","ethNumberStandardFormatter","timeLeft","StyledLink","NotForSale","collectionUrl","useTheme","to","AssetPriceDetails","collection","account","useWeb3React","cheapestOrder","sellorders","useUsdPrice","assetsFilter","ownerAssets","useNftBalance","walletAssets","walletAsset","isOwner","ownerAddress","isForSale","isVerified","generateTweetForAsset","screen","BodySmall","rel","TR","tr","TH","th","Table","table","TD","td","PriceContainer","ActivityContainer","LoadingCell","LoadingBubble","ActivityTable","children","id","LoadingAssetActivityRow","cellCount","LoadingAssetActivity","AssetActivity","Details","Header","Body","Center","CreatorLink","CopyIcon","Copy","GridItem","header","body","DetailsContainer","creator","totalSupply","useCopyClipboard","setCopied","copy","isOpen","PrimaryHeader","SecondaryHeader","SecondaryHeaderContainer","ContentContainer","InfoContainer","primaryHeader","secondaryHeader","defaultOpen","props","setIsOpen","Grid","GridItemContainer","TraitType","TraitValue","trait","trait_type","trait_value","params","qs","stringify","traits","arrayFormat","TraitsContainer","sort","localeCompare","AssetPriceDetailsContainer","MediaContainer","Column","AddressTextLink","SocialsContainer","DescriptionText","RarityWrap","EmptyActivitiesContainer","RouterLink","ActivitySelectContainer","ContentNotAvailable","ByText","Img","HoverImageContainer","HoverContainer","ContainerText","AudioPlayer","animationUrl","dominantColor","alignSelf","controls","join","AssetView","mediaType","Video","autoPlay","muted","loop","Image","Audio","Embed","title","frameBorder","sandbox","allow","allowFullScreen","AssetDetails","rarityProvider","providers","find","provider","primaryProvider","assetMediaType","isAudio","isVideo","priceData","lastSalePrice","formattedEthprice","isActivityLoading","showHolder","setShowHolder","score","scrollableTarget","collectionDescription","externalUrl","twitterUrl","discordUrl","BREAKPOINT","Title","SubTitle","Seller","SellerAddress","PrimaryBody","PrimaryContent","LoaderContainer","BuyNowContainer","LoadingContainer","ScreenBreakpointsPaddings","StyledColumn","BuyNowLoadingDesktop","BuyNowLoadingMobile","AssetDetailsLoading","Loader","AssetContainer","AssetPage","useParams","useDetailsQuery","variables","queryData","loading","nftAssets","edges","node","listings","ethPrice","parseEther","value","notForSale","collectionSymbol","image","url","baseAsset","baseDecimals","basePrice","susFlag","suspiciousFlag","listingNode","protocolParameters","JSON","smallImage","nftContracts","standard","collectionIsVerified","rarities","profile_img_url","profileImage","metadataUrl","description","collectionImageUrl","numAssets","twitterName","homepageUrl","useNftAssetDetails","NFT_DETAILS_PAGE","properties","shouldLogImpression"],"mappings":"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","file":"static/js/10.5f2bc1ef.chunk.js","sourcesContent":["import { css } from 'styled-components/macro'\n\nexport const ScrollBarStyles = css<{ $isHorizontalScroll?: boolean }>`\n  // Firefox scrollbar styling\n  scrollbar-width: thin;\n  scrollbar-color: ${({ theme }) => `${theme.backgroundOutline} transparent`};\n  height: 100%;\n\n  // safari and chrome scrollbar styling\n  ::-webkit-scrollbar {\n    background: transparent;\n\n    // Set height for horizontal scrolls\n    ${({ $isHorizontalScroll }) => {\n      return $isHorizontalScroll\n        ? css`\n            height: 4px;\n            overflow-x: scroll;\n          `\n        : css`\n            width: 4px;\n            overflow-y: scroll;\n          `\n    }}\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: ${({ theme }) => theme.backgroundOutline};\n    border-radius: 8px;\n  }\n`\n\nexport const OpacityHoverState = css`\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  &:active {\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `opacity ${duration.medium} ${timing.ease}`};\n`\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/* eslint-disable no-undefined,no-param-reassign,no-shadow */\n\n/**\n * Throttle execution of a function. Especially useful for rate limiting\n * execution of handlers on events like resize and scroll.\n *\n * @param  {Number}    delay          A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}   [noTrailing]   Optional, defaults to false. If noTrailing is true, callback will only execute every `delay` milliseconds while the\n *                                    throttled-function is being called. If noTrailing is false or unspecified, callback will be executed one final time\n *                                    after the last throttled-function call. (After the throttled-function has not been called for `delay` milliseconds,\n *                                    the internal counter is reset)\n * @param  {Function}  callback       A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                    to `callback` when the throttled-function is executed.\n * @param  {Boolean}   [debounceMode] If `debounceMode` is true (at begin), schedule `clear` to execute after `delay` ms. If `debounceMode` is false (at end),\n *                                    schedule `callback` to execute after `delay` ms.\n *\n * @return {Function}  A new, throttled, function.\n */\nfunction throttle (delay, noTrailing, callback, debounceMode) {\n  /*\n   * After wrapper has stopped being called, this timeout ensures that\n   * `callback` is executed at the proper times in `throttle` and `end`\n   * debounce modes.\n   */\n  var timeoutID;\n  var cancelled = false; // Keep track of the last time `callback` was executed.\n\n  var lastExec = 0; // Function to clear existing timeout\n\n  function clearExistingTimeout() {\n    if (timeoutID) {\n      clearTimeout(timeoutID);\n    }\n  } // Function to cancel next exec\n\n\n  function cancel() {\n    clearExistingTimeout();\n    cancelled = true;\n  } // `noTrailing` defaults to falsy.\n\n\n  if (typeof noTrailing !== 'boolean') {\n    debounceMode = callback;\n    callback = noTrailing;\n    noTrailing = undefined;\n  }\n  /*\n   * The `wrapper` function encapsulates all of the throttling / debouncing\n   * functionality and when executed will limit the rate at which `callback`\n   * is executed.\n   */\n\n\n  function wrapper() {\n    var self = this;\n    var elapsed = Date.now() - lastExec;\n    var args = arguments;\n\n    if (cancelled) {\n      return;\n    } // Execute `callback` and update the `lastExec` timestamp.\n\n\n    function exec() {\n      lastExec = Date.now();\n      callback.apply(self, args);\n    }\n    /*\n     * If `debounceMode` is true (at begin) this is used to clear the flag\n     * to allow future `callback` executions.\n     */\n\n\n    function clear() {\n      timeoutID = undefined;\n    }\n\n    if (debounceMode && !timeoutID) {\n      /*\n       * Since `wrapper` is being called for the first time and\n       * `debounceMode` is true (at begin), execute `callback`.\n       */\n      exec();\n    }\n\n    clearExistingTimeout();\n\n    if (debounceMode === undefined && elapsed > delay) {\n      /*\n       * In throttle mode, if `delay` time has been exceeded, execute\n       * `callback`.\n       */\n      exec();\n    } else if (noTrailing !== true) {\n      /*\n       * In trailing throttle mode, since `delay` time has not been\n       * exceeded, schedule `callback` to execute `delay` ms after most\n       * recent execution.\n       *\n       * If `debounceMode` is true (at begin), schedule `clear` to execute\n       * after `delay` ms.\n       *\n       * If `debounceMode` is false (at end), schedule `callback` to\n       * execute after `delay` ms.\n       */\n      timeoutID = setTimeout(debounceMode ? clear : exec, debounceMode === undefined ? delay - elapsed : delay);\n    }\n  }\n\n  wrapper.cancel = cancel; // Return the wrapper function.\n\n  return wrapper;\n}\n\n/* eslint-disable no-undefined */\n/**\n * Debounce execution of a function. Debouncing, unlike throttling,\n * guarantees that a function is only executed a single time, either at the\n * very beginning of a series of calls, or at the very end.\n *\n * @param  {Number}   delay         A zero-or-greater delay in milliseconds. For event callbacks, values around 100 or 250 (or even higher) are most useful.\n * @param  {Boolean}  [atBegin]     Optional, defaults to false. If atBegin is false or unspecified, callback will only be executed `delay` milliseconds\n *                                  after the last debounced-function call. If atBegin is true, callback will be executed only at the first debounced-function call.\n *                                  (After the throttled-function has not been called for `delay` milliseconds, the internal counter is reset).\n * @param  {Function} callback      A function to be executed after delay milliseconds. The `this` context and all arguments are passed through, as-is,\n *                                  to `callback` when the debounced-function is executed.\n *\n * @return {Function} A new, debounced function.\n */\n\nfunction debounce (delay, atBegin, callback) {\n  return callback === undefined ? throttle(delay, atBegin, false) : throttle(delay, callback, atBegin !== false);\n}\n\nexport { throttle, debounce };\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYyB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGM6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRjOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkZDo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGU6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkZTpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGc6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/collection/Activity.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/collection/Activity.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAAA72Ty26DMBBF9/kKL5OFEVBCIrLpP7RS1449AbfGRoNJaKr8e41pFFBeTRfdIGTfuWc8jwBiEWIaka8JITlKQS2UlWIWKDeqKXWdkTiYb5BEG1xNDpOgD3jyAQXIvLAZWSZVO7zMCrMF9JI14x85mkaLjGwZTinNQUvvbrCmp+uXBjeMw2zgM/cOSmqgR1KUjkjsXBGPc+EXFOFIAXc98rseRQaarRUIr+QN1gYzUhmpLbiyuaPuuccKYL5LYR/PRgZC1gOHoXxUMAutfQW0kuHn2MDX/GI+5z04ZXCLBW2lJJf2rZB21Jj3mw3uzcO/mqve1rS0lnup88z9owCk7mggqy4MR9w1xR2CdWWndcW4jw+DMIFy9ZOsQFPRjVRO4qxVg1M3Uz6B5xKEZKTmCKAJ04JMS6npTgpbZCRNXM9nnhoMt+b63nRbc9odQg53GYt0+RgjChYeECT+G/Ww3wOjsJv1fyXGywfreJ04oH4Ds5uCL8kEAAA=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var baseRow = 'e2d0r61 rgw6ez44d';\nexport var eventRow = 'e2d0r63 e2d0r61 rgw6ez44d rgw6ez2c7 rgw6ez2d8 rgw6ez2hp rgw6ez2iq rgw6ez2nv rgw6ez27d rgw6ez4dj rgw6ez78z rgw6ez7ir rgw6ez79b rgw6ez537 rgw6ez5np';\nexport var headerRow = 'e2d0r65 e2d0r61 rgw6ez44d rgw6ez2d7 rgw6ez2ip rgw6ez271 rgw6ez4dp rgw6ezap rgw6ezd1';\nexport var detailsImage = 'rgw6ez14j rgw6ez1bd rgw6ez7ab';\nexport var detailsName = 'rgw6ezcp rgw6ezb1 rgw6ezed rgw6ezfv rgw6ez7l3 rgw6ez44p rgw6ez44v';\nexport var eventDetail = 'e2d0r6a rgw6ezcv rgw6ezb1 rgw6ezed rgw6ez3s7';\nexport var eventTime = 'e2d0r6c rgw6ezcp rgw6ezav rgw6eze7 rgw6ez4dp';\nexport var addressCell = 'e2d0r6e rgw6ezd1 rgw6ezb1 rgw6eze7 rgw6ez4dj rgw6ez1dp rgw6ez46p rgw6ez2c1';\nexport var baseBuyCell = 'e2d0r6g rgw6ezd1 rgw6ezb1 rgw6eze7 rgw6ez2d7 rgw6ez2ip rgw6ez2nv rgw6ez27d rgw6ez177 rgw6ez4rj rgw6ez7hz rgw6ez7aj rgw6ez7nn';\nexport var buyCell = 'e2d0r6h e2d0r6g rgw6ezd1 rgw6ezb1 rgw6eze7 rgw6ez2d7 rgw6ez2ip rgw6ez2nv rgw6ez27d rgw6ez177 rgw6ez4rj rgw6ez7hz rgw6ez7aj rgw6ez7nn';\nexport var removeCell = 'e2d0r6j e2d0r6g rgw6ezd1 rgw6ezb1 rgw6eze7 rgw6ez2d7 rgw6ez2ip rgw6ez2nv rgw6ez27d rgw6ez177 rgw6ez4rj rgw6ez7hz rgw6ez7aj rgw6ez7nn rgw6ez4ad rgw6ez78z';\nexport var filter = 'e2d0r6l rgw6ezcv rgw6ezav rgw6ezdv rgw6ez2d7 rgw6ez2ip rgw6ez2nv rgw6ez27d rgw6ez4nv rgw6ez4dj rgw6ez7aj rgw6ez78z';\nexport var marketplaceIcon = 'rgw6ez121 rgw6ez18v rgw6ez7a7 rgw6ez3wv';\nexport var rarityInfo = 'e2d0r6p rgw6ez2c7 rgw6ez2hp rgw6ez43v rgw6ez7a7 rgw6ez18v rgw6ez171 rgw6ez4dj rgw6ez4nv rgw6ezaj rgw6ezd1 rgw6ez78z';","import { isAddress } from '@ethersproject/address'\n\n/**\n * Shortens an Ethereum address by N characters\n * @param address blockchain address\n * @param charsStart amount of character to shorten (from both ends / in the beginning)\n * @param charsEnd amount of characters to shorten in the end\n * @returns formatted string\n */\nexport function shortenAddress(address: string, charsStart = 4, charsEnd?: number): string {\n  const parsed = isAddress(address)\n  if (!parsed) throw Error(`Invalid 'address' parameter '${address}'.`)\n\n  return `${address.substring(0, charsStart + 2)}...${address.substring(42 - (charsEnd || charsStart))}`\n}\n","import { sendAnalyticsEvent, useTrace } from '@uniswap/analytics'\nimport { InterfacePageName, NFTEventName } from '@uniswap/analytics-events'\nimport { ChainId } from '@uniswap/smart-order-router'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ActivityExternalLinkIcon,\n  ActivityListingIcon,\n  ActivitySaleIcon,\n  ActivityTransferIcon,\n  CancelListingIcon,\n  RarityVerifiedIcon,\n} from 'nft/components/icons'\nimport {\n  ActivityEvent,\n  ActivityEventType,\n  ActivityEventTypeDisplay,\n  BagItem,\n  GenieAsset,\n  Markets,\n  OrderStatus,\n  TokenMetadata,\n  TokenRarity,\n} from 'nft/types'\nimport { shortenAddress } from 'nft/utils/address'\nimport { buildActivityAsset } from 'nft/utils/buildActivityAsset'\nimport { formatEthPrice } from 'nft/utils/currency'\nimport { getTimeDifference, isValidDate } from 'nft/utils/date'\nimport { putCommas } from 'nft/utils/putCommas'\nimport { fallbackProvider, getRarityProviderLogo } from 'nft/utils/rarity'\nimport { MouseEvent, useMemo, useState } from 'react'\nimport styled from 'styled-components/macro'\nimport { ExternalLink } from 'theme'\nimport { ExplorerDataType, getExplorerLink } from 'utils/getExplorerLink'\n\nimport * as styles from './Activity.css'\n\nconst AddressLink = styled(ExternalLink)`\n  color: ${({ theme }) => theme.textPrimary};\n  text-decoration: none;\n  font-weight: 400;\n  line-height: 20px;\n  a {\n    color: ${({ theme }) => theme.textPrimary};\n    text-decoration: none;\n  }\n  a:hover {\n    color: ${({ theme }) => theme.textPrimary};\n    text-decoration: none;\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n  a:focus {\n    color: ${({ theme }) => theme.textPrimary};\n    text-decoration: none;\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n`\n\nconst formatListingStatus = (status: OrderStatus): string => {\n  switch (status) {\n    case OrderStatus.EXECUTED:\n      return 'Sold'\n    case OrderStatus.CANCELLED:\n      return 'Cancelled'\n    case OrderStatus.EXPIRED:\n      return 'Expired'\n    case OrderStatus.VALID:\n      return 'Add to Bag'\n  }\n}\n\ninterface BuyCellProps {\n  event: ActivityEvent\n  collectionName: string\n  selectAsset: (assets: GenieAsset[]) => void\n  removeAsset: (assets: GenieAsset[]) => void\n  itemsInBag: BagItem[]\n  cartExpanded: boolean\n  toggleCart: () => void\n  isMobile: boolean\n  ethPriceInUSD: number\n}\n\nexport const BuyCell = ({\n  event,\n  collectionName,\n  selectAsset,\n  removeAsset,\n  itemsInBag,\n  cartExpanded,\n  toggleCart,\n  isMobile,\n  ethPriceInUSD,\n}: BuyCellProps) => {\n  const asset = useMemo(\n    () => buildActivityAsset(event, collectionName, ethPriceInUSD),\n    [event, collectionName, ethPriceInUSD]\n  )\n  const isSelected = useMemo(() => {\n    return itemsInBag.some((item) => asset.tokenId === item.asset.tokenId && asset.address === item.asset.address)\n  }, [asset, itemsInBag])\n\n  const trace = useTrace({ page: InterfacePageName.NFT_COLLECTION_PAGE })\n\n  const eventProperties = {\n    collection_address: asset.address,\n    token_id: asset.tokenId,\n    token_type: asset.tokenType,\n    ...trace,\n  }\n\n  return (\n    <Column display={{ sm: 'none', lg: 'flex' }} height=\"full\" justifyContent=\"center\" marginX=\"auto\">\n      {event.eventType === ActivityEventType.Listing && event.orderStatus ? (\n        <Box\n          as=\"button\"\n          className={event.orderStatus === OrderStatus.VALID && isSelected ? styles.removeCell : styles.buyCell}\n          onClick={(e: MouseEvent) => {\n            e.preventDefault()\n            isSelected ? removeAsset([asset]) : selectAsset([asset])\n            !isSelected && !cartExpanded && !isMobile && toggleCart()\n            !isSelected && sendAnalyticsEvent(NFTEventName.NFT_BUY_ADDED, { eventProperties })\n          }}\n          disabled={event.orderStatus !== OrderStatus.VALID}\n        >\n          {event.orderStatus === OrderStatus.VALID ? (\n            <>{`${isSelected ? 'Remove' : 'Add to bag'}`}</>\n          ) : (\n            <>{`${formatListingStatus(event.orderStatus)}`}</>\n          )}\n        </Box>\n      ) : (\n        '-'\n      )}\n    </Column>\n  )\n}\n\ninterface AddressCellProps {\n  address?: string\n  desktopLBreakpoint?: boolean\n  chainId?: number\n}\n\nexport const AddressCell = ({ address, desktopLBreakpoint, chainId }: AddressCellProps) => {\n  return (\n    <Column\n      display={{ sm: 'none', xl: desktopLBreakpoint ? 'none' : 'flex', xxl: 'flex' }}\n      className={styles.addressCell}\n    >\n      <AddressLink\n        href={getExplorerLink(chainId ?? ChainId.MAINNET, address ?? '', ExplorerDataType.ADDRESS)}\n        style={{ textDecoration: 'none' }}\n      >\n        <Box onClick={(e) => e.stopPropagation()}>{address ? shortenAddress(address, 2, 4) : '-'}</Box>\n      </AddressLink>\n    </Column>\n  )\n}\n\nexport const MarketplaceIcon = ({ marketplace }: { marketplace: Markets }) => {\n  return (\n    <Box\n      as=\"img\"\n      alt={marketplace}\n      src={`/nft/svgs/marketplaces/${marketplace}.svg`}\n      className={styles.marketplaceIcon}\n    />\n  )\n}\n\nconst PriceTooltip = ({ price }: { price: string }) => (\n  <MouseoverTooltip\n    text={\n      <Box textAlign=\"left\" fontSize=\"14\" fontWeight=\"normal\" color=\"textSecondary\">\n        {`${price} ETH`}\n      </Box>\n    }\n    placement=\"top\"\n  >\n    <Box>{`${price.substring(0, 5)}... ETH`}</Box>\n  </MouseoverTooltip>\n)\n\nexport const PriceCell = ({ marketplace, price }: { marketplace?: Markets; price?: string }) => {\n  const formattedPrice = useMemo(() => (price ? putCommas(formatEthPrice(price))?.toString() : null), [price])\n\n  return (\n    <Row display={{ sm: 'none', md: 'flex' }} gap=\"8\">\n      {marketplace && <MarketplaceIcon marketplace={marketplace} />}\n      {formattedPrice ? (\n        formattedPrice.length > 6 ? (\n          <PriceTooltip price={formattedPrice} />\n        ) : (\n          <>{`${formattedPrice} ETH`}</>\n        )\n      ) : (\n        <>-</>\n      )}\n    </Row>\n  )\n}\n\ninterface EventCellProps {\n  eventType: ActivityEventType\n  eventTimestamp?: number\n  eventTransactionHash?: string\n  eventOnly?: boolean\n  price?: string\n  isMobile?: boolean\n}\n\nconst renderEventIcon = (eventType: ActivityEventType) => {\n  switch (eventType) {\n    case ActivityEventType.Listing:\n      return <ActivityListingIcon width={16} height={16} />\n    case ActivityEventType.Sale:\n      return <ActivitySaleIcon width={16} height={16} />\n    case ActivityEventType.Transfer:\n      return <ActivityTransferIcon width={16} height={16} />\n    case ActivityEventType.CancelListing:\n      return <CancelListingIcon width={16} height={16} />\n    default:\n      return null\n  }\n}\n\nconst openEtherscanLinkInNewTab = (e: MouseEvent, transactionHash: string) => {\n  e.preventDefault()\n  window.open(`https://etherscan.io/tx/${transactionHash}`, '_blank', 'noopener,noreferrer')\n}\n\nconst ExternalLinkIcon = ({ transactionHash }: { transactionHash: string }) => (\n  <Row onClick={(e: MouseEvent) => openEtherscanLinkInNewTab(e, transactionHash)} marginLeft=\"4\">\n    <ActivityExternalLinkIcon />\n  </Row>\n)\n\nconst eventColors = (eventType: ActivityEventType) => {\n  const activityEvents = {\n    [ActivityEventType.Listing]: 'gold',\n    [ActivityEventType.Sale]: 'green',\n    [ActivityEventType.Transfer]: 'violet',\n    [ActivityEventType.CancelListing]: 'accentFailure',\n  }\n\n  return activityEvents[eventType] as 'gold' | 'green' | 'violet' | 'accentFailure'\n}\n\nexport const EventCell = ({\n  eventType,\n  eventTimestamp,\n  eventTransactionHash,\n  eventOnly,\n  price,\n  isMobile,\n}: EventCellProps) => {\n  const formattedPrice = useMemo(() => (price ? putCommas(formatEthPrice(price))?.toString() : null), [price])\n  return (\n    <Column height=\"full\" justifyContent=\"center\" gap=\"4\">\n      <Row className={styles.eventDetail} color={eventColors(eventType)}>\n        {renderEventIcon(eventType)}\n        {ActivityEventTypeDisplay[eventType]}\n      </Row>\n      {eventTimestamp && isValidDate(eventTimestamp) && !isMobile && !eventOnly && (\n        <Row className={styles.eventTime}>\n          {getTimeDifference(eventTimestamp.toString())}\n          {eventTransactionHash && <ExternalLinkIcon transactionHash={eventTransactionHash} />}\n        </Row>\n      )}\n      {isMobile && price && <Row fontSize=\"16\" fontWeight=\"normal\" color=\"textPrimary\">{`${formattedPrice} ETH`}</Row>}\n    </Column>\n  )\n}\n\ninterface ItemCellProps {\n  event: ActivityEvent\n  rarityVerified: boolean\n  collectionName: string\n  isMobile: boolean\n  eventTimestamp?: number\n}\n\nconst NoContentContainer = () => (\n  <Box\n    position=\"relative\"\n    style={{\n      background: `#24272e`,\n    }}\n    className={styles.detailsImage}\n  >\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"normal\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface RankingProps {\n  rarity: TokenRarity\n  collectionName: string\n  rarityVerified: boolean\n  details?: boolean\n}\n\nconst Ranking = ({ rarity, collectionName, rarityVerified }: RankingProps) => {\n  const rarityProviderLogo = getRarityProviderLogo(rarity.source)\n\n  return (\n    <Box>\n      <MouseoverTooltip\n        text={\n          <Row>\n            <Box display=\"flex\" marginRight=\"4\">\n              <img src={rarityProviderLogo} alt=\"cardLogo\" width={16} />\n            </Box>\n            <Box width=\"full\" fontSize=\"14\">\n              {rarityVerified\n                ? `Verified by ${collectionName}`\n                : `Ranking by ${rarity.source === 'Genie' ? fallbackProvider : rarity.source}`}\n            </Box>\n          </Row>\n        }\n        placement=\"top\"\n      >\n        <Box className={styles.rarityInfo}>\n          <Box paddingTop=\"2\" paddingBottom=\"2\" display=\"flex\">\n            {putCommas(rarity.rank)}\n          </Box>\n\n          <Box display=\"flex\" height=\"16\">\n            {rarityVerified ? <RarityVerifiedIcon /> : null}\n          </Box>\n        </Box>\n      </MouseoverTooltip>\n    </Box>\n  )\n}\n\nconst getItemImage = (tokenMetadata?: TokenMetadata): string | undefined => {\n  return tokenMetadata?.smallImageUrl || tokenMetadata?.imageUrl\n}\n\nexport const ItemCell = ({ event, rarityVerified, collectionName, eventTimestamp, isMobile }: ItemCellProps) => {\n  const [loaded, setLoaded] = useState(false)\n  const [noContent, setNoContent] = useState(!getItemImage(event.tokenMetadata))\n\n  return (\n    <Row gap=\"16\" overflow=\"hidden\" whiteSpace=\"nowrap\">\n      {!noContent ? (\n        <Box\n          as=\"img\"\n          alt={event.tokenMetadata?.name || event.tokenId}\n          src={getItemImage(event.tokenMetadata)}\n          draggable={false}\n          className={styles.detailsImage}\n          style={{\n            background: loaded ? 'none' : '#24272e',\n          }}\n          onLoad={() => setLoaded(true)}\n          onError={() => setNoContent(true)}\n        />\n      ) : (\n        <NoContentContainer />\n      )}\n      <Column height=\"full\" justifyContent=\"center\" overflow=\"hidden\" whiteSpace=\"nowrap\" marginRight=\"24\">\n        <Box className={styles.detailsName}>{event.tokenMetadata?.name || event.tokenId}</Box>\n        {event.tokenMetadata?.rarity && !isMobile && (\n          <Ranking\n            rarity={event.tokenMetadata?.rarity}\n            rarityVerified={rarityVerified}\n            collectionName={collectionName}\n          />\n        )}\n        {isMobile && eventTimestamp && isValidDate(eventTimestamp) && getTimeDifference(eventTimestamp.toString())}\n      </Column>\n    </Row>\n  )\n}\n","export const isValidDate = (date: number): boolean => {\n  const d = Date.parse(date.toString())\n  return isNaN(d) ? false : true\n}\n\nexport const getTimeDifference = (eventTimestamp: string) => {\n  const date = new Date(eventTimestamp).getTime()\n  const diff = new Date().getTime() - date\n\n  const days = Math.floor(diff / (1000 * 60 * 60 * 24))\n  const hours = Math.floor((diff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60))\n  const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60))\n\n  if (days > 0) return `${days} day${days > 1 ? 's' : ''} ago`\n  if (hours > 0) return `${hours} hour${hours > 1 ? 's' : ''} ago`\n  if (minutes > 1) return `${minutes} minutes ago`\n  return 'Just now'\n}\n","import { OpacityHoverState } from 'components/Common'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { themeVars, vars } from 'nft/css/sprinkles.css'\nimport { useBag, useIsMobile } from 'nft/hooks'\nimport { ActivityFetcher } from 'nft/queries/genie/ActivityFetcher'\nimport { ActivityEvent, ActivityEventResponse, ActivityEventType } from 'nft/types'\nimport { fetchPrice } from 'nft/utils/fetchPrice'\nimport { useCallback, useEffect, useMemo, useReducer, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useInfiniteQuery } from 'react-query'\nimport { useIsDarkMode } from 'state/user/hooks'\nimport styled from 'styled-components/macro'\n\nimport * as styles from './Activity.css'\nimport { AddressCell, BuyCell, EventCell, ItemCell, PriceCell } from './ActivityCells'\nimport { ActivityLoader, ActivityPageLoader } from './ActivityLoader'\n\nenum ColumnHeaders {\n  Item = 'Item',\n  Event = 'Event',\n  Price = 'Price',\n  By = 'By',\n  To = 'To',\n}\n\nconst FilterBox = styled.div<{ backgroundColor: string }>`\n  display: flex;\n  background: ${({ backgroundColor }) => backgroundColor};\n  ${OpacityHoverState};\n`\n\nexport const HeaderRow = () => {\n  return (\n    <Box className={styles.headerRow}>\n      <Box>{ColumnHeaders.Item}</Box>\n      <Box>{ColumnHeaders.Event}</Box>\n      <Box display={{ sm: 'none', md: 'block' }}>{ColumnHeaders.Price}</Box>\n      <Box display={{ sm: 'none', xl: 'block' }}>{ColumnHeaders.By}</Box>\n      <Box display={{ sm: 'none', xxl: 'block' }}>{ColumnHeaders.To}</Box>\n    </Box>\n  )\n}\n\ninterface ActivityProps {\n  contractAddress: string\n  rarityVerified: boolean\n  collectionName: string\n  chainId?: number\n}\n\nconst initialFilterState = {\n  [ActivityEventType.Listing]: true,\n  [ActivityEventType.Sale]: true,\n  [ActivityEventType.Transfer]: false,\n  [ActivityEventType.CancelListing]: false,\n}\n\nexport const reduceFilters = (state: typeof initialFilterState, action: { eventType: ActivityEventType }) => {\n  return { ...state, [action.eventType]: !state[action.eventType] }\n}\n\nconst baseHref = (event: ActivityEvent) => `/#/nfts/asset/${event.collectionAddress}/${event.tokenId}?origin=activity`\n\nexport const Activity = ({ contractAddress, rarityVerified, collectionName, chainId }: ActivityProps) => {\n  const [activeFilters, filtersDispatch] = useReducer(reduceFilters, initialFilterState)\n\n  const {\n    data: eventsData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isSuccess,\n    isLoading,\n  } = useInfiniteQuery<ActivityEventResponse>(\n    [\n      'collectionActivity',\n      {\n        contractAddress,\n        activeFilters,\n      },\n    ],\n    async ({ pageParam = '' }) => {\n      return await ActivityFetcher(\n        contractAddress,\n        {\n          eventTypes: Object.keys(activeFilters)\n            .filter((key) => activeFilters[key as ActivityEventType])\n            .map((key) => key as ActivityEventType),\n        },\n        pageParam\n      )\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.events?.length === 25 ? lastPage.cursor : undefined\n      },\n      refetchInterval: 15000,\n      refetchIntervalInBackground: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const events = useMemo(\n    () => (isSuccess ? eventsData?.pages.map((page) => page.events).flat() : null),\n    [isSuccess, eventsData]\n  )\n\n  const itemsInBag = useBag((state) => state.itemsInBag)\n  const addAssetsToBag = useBag((state) => state.addAssetsToBag)\n  const removeAssetsFromBag = useBag((state) => state.removeAssetsFromBag)\n  const cartExpanded = useBag((state) => state.bagExpanded)\n  const toggleCart = useBag((state) => state.toggleBag)\n  const isMobile = useIsMobile()\n  const [ethPriceInUSD, setEthPriceInUSD] = useState(0)\n  const isDarkMode = useIsDarkMode()\n\n  useEffect(() => {\n    fetchPrice().then((price) => {\n      setEthPriceInUSD(price || 0)\n    })\n  }, [])\n\n  const Filter = useCallback(\n    function ActivityFilter({ eventType }: { eventType: ActivityEventType }) {\n      const isActive = activeFilters[eventType]\n      const activeBackgroundColor = isDarkMode ? vars.color.gray500 : vars.color.gray200\n\n      return (\n        <FilterBox\n          className={styles.filter}\n          backgroundColor={isActive ? activeBackgroundColor : themeVars.colors.backgroundInteractive}\n          onClick={() => filtersDispatch({ eventType })}\n        >\n          {eventType.charAt(0) + eventType.slice(1).toLowerCase() + 's'}\n        </FilterBox>\n      )\n    },\n    [activeFilters, isDarkMode]\n  )\n\n  return (\n    <Box marginLeft={{ sm: '16', md: '48' }}>\n      <Row gap=\"8\" paddingTop={{ sm: '0', md: '16' }}>\n        <Filter eventType={ActivityEventType.Listing} />\n        <Filter eventType={ActivityEventType.Sale} />\n        <Filter eventType={ActivityEventType.Transfer} />\n      </Row>\n      {isLoading && <ActivityLoader />}\n      {events && (\n        <Column marginTop=\"36\">\n          <HeaderRow />\n          <InfiniteScroll\n            next={fetchNextPage}\n            hasMore={!!hasNextPage}\n            loader={isFetchingNextPage ? <ActivityPageLoader rowCount={2} /> : null}\n            dataLength={events?.length ?? 0}\n            style={{ overflow: 'unset' }}\n          >\n            {events.map((event, i) => (\n              <Box as=\"a\" data-testid=\"nft-activity-row\" href={baseHref(event)} className={styles.eventRow} key={i}>\n                <ItemCell\n                  event={event}\n                  rarityVerified={rarityVerified}\n                  collectionName={collectionName}\n                  eventTimestamp={event.eventTimestamp}\n                  isMobile={isMobile}\n                />\n                <EventCell\n                  eventType={event.eventType}\n                  eventTimestamp={event.eventTimestamp}\n                  eventTransactionHash={event.transactionHash}\n                  price={event.price}\n                  isMobile={isMobile}\n                />\n                <PriceCell marketplace={event.marketplace} price={event.price} />\n                <AddressCell address={event.fromAddress} chainId={chainId} />\n                <AddressCell address={event.toAddress} chainId={chainId} desktopLBreakpoint />\n                <BuyCell\n                  event={event}\n                  collectionName={collectionName}\n                  selectAsset={addAssetsToBag}\n                  removeAsset={removeAssetsFromBag}\n                  itemsInBag={itemsInBag}\n                  cartExpanded={cartExpanded}\n                  toggleCart={toggleCart}\n                  isMobile={isMobile}\n                  ethPriceInUSD={ethPriceInUSD}\n                />\n              </Box>\n            ))}\n          </InfiniteScroll>\n        </Column>\n      )}\n    </Box>\n  )\n}\n","import { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\n\nimport { HeaderRow } from './Activity'\nimport { eventRow } from './Activity.css'\nimport * as styles from './ActivityLoader.css'\n\nconst LoadingSquare = () => {\n  return <Box className={styles.loadingSquare} />\n}\n\nconst LoadingSliver = () => {\n  return <Box className={styles.loadingSliver} />\n}\n\nconst ActivityLoadingRow = () => {\n  return (\n    <Box as=\"a\" className={eventRow}>\n      <Row gap=\"16\">\n        <LoadingSquare />\n        <LoadingSliver />\n      </Row>\n      <Row>\n        <LoadingSliver />\n      </Row>\n      <Row display={{ sm: 'none', md: 'flex' }}>\n        <LoadingSliver />\n      </Row>\n      <Row display={{ sm: 'none', lg: 'flex' }}>\n        <LoadingSliver />\n      </Row>\n      <Row display={{ sm: 'none', xl: 'flex' }}>\n        <LoadingSliver />\n      </Row>\n    </Box>\n  )\n}\n\nexport const ActivityPageLoader = ({ rowCount }: { rowCount: number }) => {\n  return (\n    <>\n      {[...Array(rowCount)].map((_, index) => (\n        <ActivityLoadingRow key={index} />\n      ))}\n    </>\n  )\n}\n\nexport const ActivityLoader = () => {\n  return (\n    <Column marginTop=\"36\">\n      <HeaderRow />\n      <ActivityPageLoader rowCount={10} />\n    </Column>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#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\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/loading.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/loading.css.ts.vanilla.css\\\",\\\"source\\\":\\\"QGtleWZyYW1lcyBfMmtkdmZ3MCB7CiAgMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7CiAgfQogIDEwMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlOwogIH0KfQouXzJrZHZmdzEgewogIGFuaW1hdGlvbjogXzJrZHZmdzAgMS41cyBpbmZpbml0ZTsKICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCAjN0M4NUEyNEQgMjUlLCByZ2JhKDAsMCwwLDAuMykgNTAlLCAjN0M4NUEyNEQgNzUlKTsKICBiYWNrZ3JvdW5kLXNpemU6IDQwMCU7CiAgd2lsbC1jaGFuZ2U6IGJhY2tncm91bmQtcG9zaXRpb247Cn0KLl8ya2R2ZnczIHsKICB1c2VyLXNlbGVjdDogbm9uZTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/collection/ActivityLoader.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/collection/ActivityLoader.css.ts.vanilla.css\\\",\\\"source\\\":\\\"LmZiamFyNDMgewogIHdpZHRoOiAxMDhweDsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var loadingSquare = '_2kdvfw1 rgw6ez14j rgw6ez1bd rgw6ez7ab';\nexport var loadingSliver = 'fbjar43 _2kdvfw1 rgw6ez18v rgw6ez7bj';","import { darken } from 'polished'\nimport styled from 'styled-components/macro'\nimport { ExternalLink } from 'theme'\n\nconst ResourceLink = styled(ExternalLink)`\n  display: flex;\n  color: ${({ theme }) => theme.accentAction};\n  font-weight: 500;\n  font-size: 14px;\n  line-height: 20px;\n  gap: 4px;\n  text-decoration: none;\n\n  &:hover,\n  &:focus {\n    color: ${({ theme }) => darken(0.1, theme.accentAction)};\n    text-decoration: none;\n  }\n`\nexport default function Resource({ name, link }: { name: string; link: string }) {\n  return (\n    <ResourceLink href={link}>\n      {name}\n      <sup>↗</sup>\n    </ResourceLink>\n  )\n}\n","import { parseEther } from '@ethersproject/units'\nimport gql from 'graphql-tag'\nimport { CollectionInfoForAsset, GenieAsset, Markets, SellOrder } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { NftAsset, useDetailsQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query Details($address: String!, $tokenId: String!) {\n    nftAssets(address: $address, filter: { listed: false, tokenIds: [$tokenId] }) {\n      edges {\n        node {\n          id\n          name\n          ownerAddress\n          image {\n            url\n          }\n          smallImage {\n            url\n          }\n          originalImage {\n            url\n          }\n          tokenId\n          description\n          animationUrl\n          suspiciousFlag\n          creator {\n            address\n            profileImage {\n              url\n            }\n            isVerified\n          }\n          collection {\n            name\n            isVerified\n            numAssets\n            twitterName\n            discordUrl\n            homepageUrl\n            image {\n              url\n            }\n            nftContracts {\n              address\n              standard\n            }\n            description\n          }\n          listings(first: 1) {\n            edges {\n              node {\n                address\n                createdAt\n                endAt\n                id\n                maker\n                marketplace\n                marketplaceUrl\n                orderHash\n                price {\n                  currency\n                  value\n                }\n                quantity\n                startAt\n                status\n                taker\n                tokenId\n                type\n                protocolParameters\n              }\n              cursor\n            }\n          }\n          rarities {\n            provider\n            rank\n            score\n          }\n          metadataUrl\n          traits {\n            name\n            value\n          }\n        }\n      }\n    }\n  }\n`\n\nexport function useNftAssetDetails(\n  address: string,\n  tokenId: string\n): { data: [GenieAsset, CollectionInfoForAsset]; loading: boolean } {\n  const { data: queryData, loading } = useDetailsQuery({\n    variables: {\n      address,\n      tokenId,\n    },\n  })\n\n  const asset = queryData?.nftAssets?.edges[0]?.node as NonNullable<NftAsset> | undefined\n  const collection = asset?.collection\n  const listing = asset?.listings?.edges[0]?.node\n  const ethPrice = parseEther(listing?.price?.value?.toString() ?? '0').toString()\n\n  return useMemo(\n    () => ({\n      data: [\n        {\n          id: asset?.id,\n          address,\n          notForSale: asset?.listings === null,\n          collectionName: asset?.collection?.name,\n          collectionSymbol: asset?.collection?.image?.url,\n          imageUrl: asset?.image?.url,\n          animationUrl: asset?.animationUrl,\n          marketplace: listing?.marketplace.toLowerCase() as unknown as Markets,\n          name: asset?.name,\n          priceInfo: {\n            ETHPrice: ethPrice,\n            baseAsset: 'ETH',\n            baseDecimals: '18',\n            basePrice: ethPrice,\n          },\n          susFlag: asset?.suspiciousFlag,\n          sellorders: asset?.listings?.edges.map((listingNode) => {\n            return {\n              ...listingNode.node,\n              protocolParameters: listingNode.node.protocolParameters\n                ? JSON.parse(listingNode.node.protocolParameters.toString())\n                : undefined,\n            } as SellOrder\n          }),\n          smallImageUrl: asset?.smallImage?.url,\n          tokenId,\n          tokenType: asset?.collection?.nftContracts?.[0]?.standard,\n          collectionIsVerified: asset?.collection?.isVerified,\n          rarity: {\n            primaryProvider: 'Rarity Sniper', // TODO update when backend adds more providers\n            providers: asset?.rarities?.map((rarity) => {\n              return {\n                rank: rarity.rank,\n                score: rarity.score,\n                provider: 'Rarity Sniper',\n              }\n            }),\n          },\n          ownerAddress: asset?.ownerAddress,\n          creator: {\n            profile_img_url: asset?.creator?.profileImage?.url ?? '',\n            address: asset?.creator?.address ?? '',\n          },\n          metadataUrl: asset?.metadataUrl ?? '',\n          traits: asset?.traits?.map((trait) => {\n            return { trait_type: trait.name ?? '', trait_value: trait.value ?? '' }\n          }),\n        },\n        {\n          collectionDescription: collection?.description,\n          collectionImageUrl: collection?.image?.url,\n          collectionName: collection?.name,\n          isVerified: collection?.isVerified,\n          totalSupply: collection?.numAssets,\n          twitterUrl: collection?.twitterName,\n          discordUrl: collection?.discordUrl,\n          externalUrl: collection?.homepageUrl,\n        },\n      ],\n      loading,\n    }),\n    [address, asset, collection, ethPrice, listing?.marketplace, loading, tokenId]\n  )\n}\n","import \"src/nft/components/common/Loading/LoadingSparkle.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/common/Loading/LoadingSparkle.css.ts.vanilla.css\\\",\\\"source\\\":\\\"QGtleWZyYW1lcyBfMWNmOWdudzAgewogIDAlIHsKICAgIG9wYWNpdHk6IDAuMjsKICB9CiAgMTAwJSB7CiAgICBvcGFjaXR5OiAxOwogIH0KfQouXzFjZjlnbncxOm50aC1jaGlsZCgxKSB7CiAgYW5pbWF0aW9uOiAwLjVzIGluZmluaXRlIF8xY2Y5Z253MDsKICBhbmltYXRpb24tZGlyZWN0aW9uOiBhbHRlcm5hdGU7CiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwp9Ci5fMWNmOWdudzE6bnRoLWNoaWxkKDIpIHsKICBhbmltYXRpb246IDAuNXMgaW5maW5pdGUgXzFjZjlnbncwOwogIGFuaW1hdGlvbi1kZWxheTogMC4xczsKICBhbmltYXRpb24tZGlyZWN0aW9uOiBhbHRlcm5hdGU7CiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwp9Ci5fMWNmOWdudzE6bnRoLWNoaWxkKDMpIHsKICBhbmltYXRpb246IDAuNXMgaW5maW5pdGUgXzFjZjlnbncwOwogIGFuaW1hdGlvbi1kZWxheTogMC4yczsKICBhbmltYXRpb24tZGlyZWN0aW9uOiBhbHRlcm5hdGU7CiAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogbGluZWFyOwp9\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var path = '_1cf9gnw1';","import { themeVars } from 'nft/css/sprinkles.css'\n\nimport * as styles from './LoadingSparkle.css'\n\nexport const LoadingSparkle = () => {\n  return (\n    <svg width=\"40\" height=\"41\" viewBox=\"0 0 40 41\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n      <path\n        d=\"M17.8281 10.834C17.6159 9.88757 17.4333 9.13689 17.291 8.58997C17.1751 8.11971 16.9497 7.68339 16.6331 7.31649C16.2834 6.97574 15.8515 6.731 15.3791 6.60601C14.8206 6.43175 14.0365 6.24408 13.0457 6.04301C12.7771 5.98134 12.6321 5.83926 12.6321 5.61405C12.6286 5.56049 12.6369 5.50679 12.6564 5.45676C12.6758 5.40674 12.7061 5.36159 12.7449 5.32448C12.8303 5.25054 12.9343 5.20142 13.0457 5.18241C13.8337 5.03623 14.6127 4.84557 15.3791 4.61136C15.8508 4.48054 16.282 4.23345 16.6331 3.89283C16.9497 3.52593 17.1751 3.08961 17.291 2.61935C17.4468 2.06885 17.6258 1.32623 17.8281 0.39145C17.8791 0.123349 18.016 0 18.2416 0C18.4671 0 18.6095 0.131392 18.6739 0.39145C18.8726 1.32623 19.0516 2.06885 19.211 2.61935C19.3304 3.08988 19.5585 3.52599 19.8769 3.89283C20.229 4.23347 20.6611 4.48052 21.1336 4.61136C21.8997 4.84657 22.6788 5.03724 23.467 5.18241C23.576 5.18865 23.6782 5.23739 23.7515 5.31813C23.8249 5.39887 23.8635 5.50515 23.8591 5.61405C23.8591 5.83926 23.7275 5.98134 23.467 6.04301C22.6802 6.19136 21.9014 6.37926 21.1336 6.60601C20.6605 6.73103 20.2276 6.97574 19.8769 7.31649C19.5585 7.68333 19.3304 8.11943 19.211 8.58997C19.0472 9.12617 18.8672 9.88757 18.6739 10.834C18.6095 11.1021 18.4671 11.2281 18.2416 11.2281C18.016 11.2281 17.8737 11.0967 17.8281 10.834Z\"\n        fill={themeVars.colors.textSecondary}\n        className={styles.path}\n      />\n      <path\n        d=\"M32.4448 19.8364C32.2192 18.6679 32.0079 17.7366 31.8166 17.0452C31.6743 16.4509 31.3902 15.8999 30.9885 15.4396C30.5445 15.0113 29.9992 14.7027 29.4037 14.5425C28.4447 14.2629 27.4703 14.0397 26.4853 13.874C26.1398 13.8226 25.9656 13.6426 25.9656 13.3369C25.9618 13.2674 25.9723 13.1978 25.9964 13.1324C26.0204 13.0671 26.0576 13.0074 26.1055 12.9569C26.2105 12.8597 26.3433 12.7977 26.4853 12.7798C27.4694 12.6134 28.4437 12.3931 29.4037 12.1198C30.0021 11.9667 30.549 11.6571 30.9885 11.2228C31.389 10.7583 31.6729 10.2049 31.8166 9.60859C32.0079 8.91721 32.2192 7.98584 32.4448 6.81449C32.4458 6.74608 32.4607 6.67858 32.4886 6.61609C32.5164 6.5536 32.5567 6.49743 32.6068 6.45096C32.657 6.40448 32.7161 6.3687 32.7806 6.34574C32.845 6.32278 32.9134 6.31313 32.9816 6.31739C33.2672 6.31739 33.4528 6.48309 33.5213 6.81449C33.7479 7.98584 33.9573 8.91721 34.1495 9.60859C34.2907 10.2036 34.5706 10.7567 34.9662 11.2228C35.404 11.6593 35.9516 11.9693 36.551 12.1198C37.515 12.3926 38.493 12.6129 39.4808 12.7798C39.5532 12.7803 39.6248 12.7958 39.6909 12.8254C39.757 12.855 39.8162 12.8981 39.8648 12.9518C39.9134 13.0055 39.9503 13.0687 39.9732 13.1375C39.9961 13.2063 40.0044 13.279 39.9977 13.3512C39.9977 13.6569 39.8263 13.8369 39.4808 13.8883C38.4922 14.0545 37.514 14.2778 36.551 14.5568C35.9543 14.7142 35.4084 15.0232 34.9662 15.4539C34.5695 15.916 34.2894 16.4666 34.1495 17.0595C33.9592 17.7509 33.7498 18.6813 33.5213 19.8507C33.4528 20.185 33.2758 20.3507 32.9816 20.3507C32.912 20.3546 32.8424 20.3442 32.777 20.32C32.7116 20.2958 32.6519 20.2585 32.6015 20.2103C32.5512 20.1621 32.5113 20.104 32.4843 20.0396C32.4573 19.9753 32.4439 19.9062 32.4448 19.8364Z\"\n        fill={themeVars.colors.textSecondary}\n        className={styles.path}\n      />\n      <path\n        d=\"M12.6196 40.6995C12.5109 40.7023 12.4027 40.6829 12.3013 40.6422C12.2 40.6016 12.1075 40.5405 12.0294 40.4627C11.8673 40.3009 11.7574 40.0919 11.7145 39.8639C11.418 38.0492 11.1251 36.5322 10.8358 35.3128C10.6133 34.2663 10.2461 33.258 9.74531 32.3187C9.32818 31.5649 8.73049 30.9334 8.00907 30.4841C7.132 29.9745 6.18128 29.6124 5.19297 29.4117C4.03371 29.1449 2.58684 28.8918 0.852359 28.6523C0.616735 28.6254 0.397657 28.5147 0.23303 28.3393C0.0804808 28.1721 -0.00302245 27.9506 0.000117795 27.7214C-0.00358202 27.4921 0.0799998 27.2703 0.23303 27.1035C0.396979 26.9271 0.616416 26.8162 0.852359 26.7905C2.5886 26.5618 4.03812 26.3114 5.20091 26.0392C6.20136 25.8286 7.16449 25.4614 8.05671 24.9505C8.7902 24.5064 9.40286 23.8792 9.83794 23.1268C10.3473 22.1993 10.7151 21.1968 10.9284 20.1545C11.2054 18.9369 11.4701 17.4162 11.7224 15.5925C11.7547 15.3608 11.8619 15.147 12.0268 14.9855C12.1058 14.9052 12.1997 14.8418 12.3028 14.7993C12.406 14.7567 12.5164 14.7359 12.6276 14.7378C12.7392 14.7338 12.8506 14.7526 12.9551 14.7933C13.0596 14.834 13.1552 14.8956 13.2363 14.9747C13.398 15.1367 13.5079 15.3456 13.5513 15.5735C13.8583 17.3972 14.1565 18.9178 14.4459 20.1354C14.6712 21.1811 15.0382 22.189 15.5363 23.1295C15.9558 23.8807 16.5531 24.5108 17.2726 24.9614C18.1474 25.4733 19.095 25.8407 20.0807 26.0501C21.2347 26.3223 22.6789 26.5727 24.4134 26.8014C24.6493 26.8271 24.8688 26.938 25.0327 27.1144C25.185 27.2815 25.2677 27.5033 25.263 27.7323C25.2662 27.9634 25.1839 28.1872 25.0327 28.3583C24.8722 28.5382 24.6503 28.6474 24.4134 28.6632C22.9509 28.7659 21.4954 28.9559 20.0542 29.232C19.046 29.4136 18.075 29.7698 17.1826 30.2854C16.4365 30.7497 15.8216 31.4065 15.3987 32.1908C14.8949 33.1535 14.531 34.187 14.3188 35.2584C14.04 36.5068 13.7842 38.0429 13.5513 39.8666C13.5238 40.1013 13.4192 40.3193 13.2548 40.4845C13.1681 40.5618 13.0673 40.6207 12.9583 40.6576C12.8492 40.6945 12.7341 40.7087 12.6196 40.6995Z\"\n        fill={themeVars.colors.textSecondary}\n        className={styles.path}\n      />\n    </svg>\n  )\n}\n","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React, { forwardRef } from 'react';\nimport PropTypes from 'prop-types';\nvar Upload = forwardRef(function (_ref, ref) {\n  var _ref$color = _ref.color,\n      color = _ref$color === void 0 ? 'currentColor' : _ref$color,\n      _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 24 : _ref$size,\n      rest = _objectWithoutProperties(_ref, [\"color\", \"size\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    ref: ref,\n    xmlns: \"http://www.w3.org/2000/svg\",\n    width: size,\n    height: size,\n    viewBox: \"0 0 24 24\",\n    fill: \"none\",\n    stroke: color,\n    strokeWidth: \"2\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\"\n  }, rest), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4\"\n  }), /*#__PURE__*/React.createElement(\"polyline\", {\n    points: \"17 8 12 3 7 8\"\n  }), /*#__PURE__*/React.createElement(\"line\", {\n    x1: \"12\",\n    y1: \"3\",\n    x2: \"12\",\n    y2: \"15\"\n  }));\n});\nUpload.propTypes = {\n  color: PropTypes.string,\n  size: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nUpload.displayName = 'Upload';\nexport default Upload;","import { OpacityHoverState, ScrollBarStyles } from 'components/Common'\nimport Resource from 'components/Tokens/TokenDetails/Resource'\nimport { MouseoverTooltip } from 'components/Tooltip/index'\nimport { Box } from 'nft/components/Box'\nimport { reduceFilters } from 'nft/components/collection/Activity'\nimport { LoadingSparkle } from 'nft/components/common/Loading/LoadingSparkle'\nimport { AssetPriceDetails } from 'nft/components/details/AssetPriceDetails'\nimport { Center } from 'nft/components/Flex'\nimport { themeVars, vars } from 'nft/css/sprinkles.css'\nimport { ActivityFetcher } from 'nft/queries/genie/ActivityFetcher'\nimport { ActivityEventResponse, ActivityEventType, CollectionInfoForAsset, GenieAsset } from 'nft/types'\nimport { shortenAddress } from 'nft/utils/address'\nimport { formatEthPrice } from 'nft/utils/currency'\nimport { isAudio } from 'nft/utils/isAudio'\nimport { isVideo } from 'nft/utils/isVideo'\nimport { putCommas } from 'nft/utils/putCommas'\nimport { fallbackProvider, getRarityProviderLogo } from 'nft/utils/rarity'\nimport { useCallback, useMemo, useReducer, useState } from 'react'\nimport InfiniteScroll from 'react-infinite-scroll-component'\nimport { useInfiniteQuery, useQuery } from 'react-query'\nimport { Link as RouterLink } from 'react-router-dom'\nimport { useIsDarkMode } from 'state/user/hooks'\nimport styled from 'styled-components/macro'\n\nimport AssetActivity, { LoadingAssetActivity } from './AssetActivity'\nimport * as styles from './AssetDetails.css'\nimport DetailsContainer from './DetailsContainer'\nimport InfoContainer from './InfoContainer'\nimport TraitsContainer from './TraitsContainer'\n\nconst AssetPriceDetailsContainer = styled.div`\n  margin-top: 20px;\n  display: none;\n  @media (max-width: 960px) {\n    display: block;\n  }\n`\n\nconst MediaContainer = styled.div`\n  display: flex;\n  justify-content: center;\n`\n\nconst Column = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 780px;\n`\n\nconst AddressTextLink = styled.a`\n  display: inline-block;\n  color: ${({ theme }) => theme.textSecondary};\n  text-decoration: none;\n  max-width: 100%;\n  word-wrap: break-word;\n  ${OpacityHoverState};\n`\n\nconst SocialsContainer = styled.div`\n  display: flex;\n  gap: 16px;\n  margin-top: 20px;\n`\n\nconst DescriptionText = styled.div`\n  margin-top: 8px;\n  font-size: 14px;\n  line-height: 20px;\n`\n\nconst RarityWrap = styled.span`\n  display: flex;\n  color: ${({ theme }) => theme.textSecondary};\n  padding: 2px 4px;\n  border-radius: 4px;\n  align-items: center;\n  gap: 4px;\n`\n\nconst EmptyActivitiesContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 28px;\n  line-height: 36px;\n  padding: 56px 0px;\n`\n\nconst Link = styled(RouterLink)`\n  color: ${({ theme }) => theme.accentAction};\n  text-decoration: none;\n  font-size: 14px;\n  line-height: 16px;\n  margin-top: 12px;\n  cursor: pointer;\n  ${OpacityHoverState};\n`\n\nconst ActivitySelectContainer = styled.div`\n  display: flex;\n  gap: 8px;\n  margin-bottom: 34px;\n  overflow-x: auto;\n  ${ScrollBarStyles}\n\n  @media (max-width: 720px) {\n    padding-bottom: 8px;\n  }\n`\n\nconst ContentNotAvailable = styled.div`\n  display: flex;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 14px;\n  line-height: 20px;\n  align-items: center;\n  justify-content: center;\n  border-radius: 12px;\n  width: 450px;\n  height: 450px;\n`\n\nconst FilterBox = styled.div<{ backgroundColor: string }>`\n  box-sizing: border-box;\n  background-color: ${({ backgroundColor }) => backgroundColor};\n  font-size: 14px;\n  font-weight: 600;\n  line-height: 14px;\n  color: ${({ theme }) => theme.textPrimary};\n  padding: 8px 16px;\n  border-radius: 12px;\n  cursor: pointer;\n  box-sizing: border-box;\n  ${OpacityHoverState};\n`\n\nconst ByText = styled.span`\n  font-size: 14px;\n  line-height: 20px;\n`\n\nconst Img = styled.img`\n  background-color: white;\n`\n\nconst HoverImageContainer = styled.div`\n  display: flex;\n  margin-right: 4px;\n`\n\nconst HoverContainer = styled.div`\n  display: flex;\n`\n\nconst ContainerText = styled.span`\n  font-size: 14px;\n`\n\nconst AudioPlayer = ({\n  imageUrl,\n  animationUrl,\n  name,\n  collectionName,\n  dominantColor,\n}: GenieAsset & { dominantColor: [number, number, number] }) => {\n  return (\n    <Box position=\"relative\" display=\"inline-block\" alignSelf=\"center\">\n      <Box as=\"audio\" className={styles.audioControls} width=\"292\" controls src={animationUrl} />\n      <img\n        className={styles.image}\n        src={imageUrl}\n        alt={name || collectionName}\n        style={{\n          ['--shadow' as string]: `rgba(${dominantColor.join(', ')}, 0.5)`,\n          minWidth: '300px',\n          minHeight: '300px',\n        }}\n      />\n    </Box>\n  )\n}\n\nconst initialFilterState = {\n  [ActivityEventType.Listing]: true,\n  [ActivityEventType.Sale]: true,\n  [ActivityEventType.Transfer]: false,\n  [ActivityEventType.CancelListing]: false,\n}\n\nenum MediaType {\n  Audio = 'audio',\n  Video = 'video',\n  Image = 'image',\n  Embed = 'embed',\n}\n\nconst AssetView = ({\n  mediaType,\n  asset,\n  dominantColor,\n}: {\n  mediaType: MediaType\n  asset: GenieAsset\n  dominantColor: [number, number, number]\n}) => {\n  const style = { ['--shadow' as string]: `rgba(${dominantColor.join(', ')}, 0.5)` }\n\n  switch (mediaType) {\n    case MediaType.Video:\n      return <video src={asset.animationUrl} className={styles.image} autoPlay controls muted loop style={style} />\n    case MediaType.Image:\n      return (\n        <img className={styles.image} src={asset.imageUrl} alt={asset.name || asset.collectionName} style={style} />\n      )\n    case MediaType.Audio:\n      return <AudioPlayer {...asset} dominantColor={dominantColor} />\n    case MediaType.Embed:\n      return (\n        <div className={styles.embedContainer}>\n          <iframe\n            title={asset.name ?? `${asset.collectionName} #${asset.tokenId}`}\n            src={asset.animationUrl}\n            className={styles.embed}\n            style={style}\n            frameBorder={0}\n            height=\"100%\"\n            width=\"100%\"\n            sandbox=\"allow-scripts\"\n            allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\"\n            allowFullScreen\n          />\n        </div>\n      )\n  }\n}\n\ninterface AssetDetailsProps {\n  asset: GenieAsset\n  collection: CollectionInfoForAsset\n}\n\nexport const AssetDetails = ({ asset, collection }: AssetDetailsProps) => {\n  const [dominantColor] = useState<[number, number, number]>([0, 0, 0])\n\n  const { rarityProvider } = useMemo(\n    () =>\n      asset.rarity\n        ? {\n            rarityProvider: asset?.rarity?.providers?.find(\n              ({ provider: _provider }) => _provider === asset.rarity?.primaryProvider\n            ),\n          }\n        : {},\n    [asset.rarity]\n  )\n\n  const assetMediaType = useMemo(() => {\n    if (isAudio(asset.animationUrl ?? '')) {\n      return MediaType.Audio\n    } else if (isVideo(asset.animationUrl ?? '')) {\n      return MediaType.Video\n    } else if (asset.animationUrl) {\n      return MediaType.Embed\n    }\n    return MediaType.Image\n  }, [asset])\n\n  const { address: contractAddress, tokenId: token_id } = asset\n\n  const { data: priceData } = useQuery<ActivityEventResponse>(\n    [\n      'collectionActivity',\n      {\n        contractAddress,\n      },\n    ],\n    async ({ pageParam = '' }) => {\n      return await ActivityFetcher(\n        contractAddress,\n        {\n          token_id,\n          eventTypes: [ActivityEventType.Sale],\n        },\n        pageParam,\n        '1'\n      )\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.events?.length === 25 ? lastPage.cursor : undefined\n      },\n      refetchInterval: 15000,\n      refetchIntervalInBackground: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const lastSalePrice = priceData?.events[0]?.price ?? null\n  const formattedEthprice = formatEthPrice(lastSalePrice ?? '') || 0\n  const formattedPrice = lastSalePrice ? putCommas(formattedEthprice).toString() : null\n  const [activeFilters, filtersDispatch] = useReducer(reduceFilters, initialFilterState)\n\n  const Filter = useCallback(\n    function ActivityFilter({ eventType }: { eventType: ActivityEventType }) {\n      const isActive = activeFilters[eventType]\n      const isDarkMode = useIsDarkMode()\n\n      return (\n        <FilterBox\n          backgroundColor={\n            isActive ? (isDarkMode ? vars.color.gray500 : vars.color.gray200) : themeVars.colors.backgroundInteractive\n          }\n          onClick={() => filtersDispatch({ eventType })}\n        >\n          {eventType === ActivityEventType.CancelListing\n            ? 'Cancellations'\n            : eventType.charAt(0) + eventType.slice(1).toLowerCase() + 's'}\n        </FilterBox>\n      )\n    },\n    [activeFilters]\n  )\n\n  const {\n    data: eventsData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isSuccess,\n    isLoading: isActivityLoading,\n  } = useInfiniteQuery<ActivityEventResponse>(\n    [\n      'collectionActivity',\n      {\n        contractAddress,\n        activeFilters,\n        token_id,\n      },\n    ],\n    async ({ pageParam = '' }) => {\n      return await ActivityFetcher(\n        contractAddress,\n        {\n          token_id,\n          eventTypes: Object.keys(activeFilters)\n            .map((key) => key as ActivityEventType)\n            .filter((key) => activeFilters[key]),\n        },\n        pageParam\n      )\n    },\n    {\n      getNextPageParam: (lastPage) => {\n        return lastPage.events?.length === 25 ? lastPage.cursor : undefined\n      },\n      refetchInterval: 15000,\n      refetchIntervalInBackground: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const rarity = asset?.rarity?.providers?.length ? asset?.rarity?.providers?.[0] : undefined\n  const [showHolder, setShowHolder] = useState(false)\n  const rarityProviderLogo = getRarityProviderLogo(rarity?.provider)\n  const events = useMemo(\n    () => (isSuccess ? eventsData?.pages.map((page) => page.events).flat() : null),\n    [isSuccess, eventsData]\n  )\n\n  return (\n    <Column>\n      <MediaContainer>\n        {asset.imageUrl === undefined || showHolder ? (\n          <ContentNotAvailable>Content not available yet</ContentNotAvailable>\n        ) : assetMediaType === MediaType.Image ? (\n          <Img\n            className={styles.image}\n            src={asset.imageUrl}\n            alt={asset.name || collection.collectionName}\n            onError={() => setShowHolder(true)}\n          />\n        ) : (\n          <AssetView asset={asset} mediaType={assetMediaType} dominantColor={dominantColor} />\n        )}\n      </MediaContainer>\n      <AssetPriceDetailsContainer>\n        <AssetPriceDetails asset={asset} collection={collection} />\n      </AssetPriceDetailsContainer>\n      {asset.traits && (\n        <InfoContainer\n          data-testid=\"nft-details-traits\"\n          primaryHeader=\"Traits\"\n          defaultOpen\n          secondaryHeader={\n            rarityProvider && rarity && rarity.score ? (\n              <MouseoverTooltip\n                text={\n                  <HoverContainer>\n                    <HoverImageContainer>\n                      <img src={rarityProviderLogo} alt=\"cardLogo\" width={16} />\n                    </HoverImageContainer>\n                    <ContainerText>\n                      {`Ranking by ${rarity.provider === 'Genie' ? fallbackProvider : rarity.provider}`}\n                    </ContainerText>\n                  </HoverContainer>\n                }\n                placement=\"top\"\n              >\n                <RarityWrap>Rarity: {putCommas(rarity.score)}</RarityWrap>\n              </MouseoverTooltip>\n            ) : null\n          }\n        >\n          <TraitsContainer asset={asset} />\n        </InfoContainer>\n      )}\n      <InfoContainer\n        primaryHeader=\"Activity\"\n        defaultOpen\n        secondaryHeader={formattedPrice ? `Last Sale: ${formattedPrice} ETH` : undefined}\n        data-testid=\"nft-details-activity\"\n      >\n        <>\n          <ActivitySelectContainer $isHorizontalScroll>\n            <Filter eventType={ActivityEventType.Listing} />\n            <Filter eventType={ActivityEventType.Sale} />\n            <Filter eventType={ActivityEventType.Transfer} />\n            <Filter eventType={ActivityEventType.CancelListing} />\n          </ActivitySelectContainer>\n          {isActivityLoading && <LoadingAssetActivity rowCount={10} />}\n          {events && events.length > 0 ? (\n            <InfiniteScroll\n              next={fetchNextPage}\n              hasMore={!!hasNextPage}\n              loader={\n                isFetchingNextPage && (\n                  <Center>\n                    <LoadingSparkle />\n                  </Center>\n                )\n              }\n              dataLength={events?.length ?? 0}\n              scrollableTarget=\"activityContainer\"\n            >\n              <AssetActivity eventsData={{ events }} />\n            </InfiniteScroll>\n          ) : (\n            <>\n              {!isActivityLoading && (\n                <EmptyActivitiesContainer>\n                  <div>No activities yet</div>\n                  <Link to={`/nfts/collection/${asset.address}`}>View collection items</Link>{' '}\n                </EmptyActivitiesContainer>\n              )}\n            </>\n          )}\n        </>\n      </InfoContainer>\n      <InfoContainer\n        primaryHeader=\"Description\"\n        defaultOpen\n        secondaryHeader={null}\n        data-testid=\"nft-details-description\"\n      >\n        <>\n          <ByText>By </ByText>\n          {asset?.creator && asset.creator?.address && (\n            <AddressTextLink\n              href={`https://etherscan.io/address/${asset.creator.address}`}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              {shortenAddress(asset.creator.address, 2, 4)}\n            </AddressTextLink>\n          )}\n\n          <DescriptionText data-testid=\"nft-details-description-text\">\n            {collection.collectionDescription}\n          </DescriptionText>\n          <SocialsContainer>\n            {collection.externalUrl && <Resource name=\"Website\" link={`${collection.externalUrl}`} />}\n            {collection.twitterUrl && <Resource name=\"Twitter\" link={`https://twitter.com/${collection.twitterUrl}`} />}\n            {collection.discordUrl && <Resource name=\"Discord\" link={collection.discordUrl} />}\n          </SocialsContainer>\n        </>\n      </InfoContainer>\n      <InfoContainer primaryHeader=\"Details\" defaultOpen secondaryHeader={null} data-testid=\"nft-details-asset-details\">\n        <DetailsContainer asset={asset} collection={collection} />\n      </InfoContainer>\n    </Column>\n  )\n}\n","import { useTrace } from '@uniswap/analytics'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { OpacityHoverState } from 'components/Common'\nimport { useNftBalance } from 'graphql/data/nft/NftBalance'\nimport { CancelListingIcon, VerifiedIcon } from 'nft/components/icons'\nimport { useBag, useProfilePageState, useSellAsset } from 'nft/hooks'\nimport { CollectionInfoForAsset, GenieAsset, ProfilePageStateType, WalletAsset } from 'nft/types'\nimport {\n  ethNumberStandardFormatter,\n  fetchPrice,\n  formatEthPrice,\n  generateTweetForAsset,\n  getMarketplaceIcon,\n  timeLeft,\n  useUsdPrice,\n} from 'nft/utils'\nimport { shortenAddress } from 'nft/utils/address'\nimport { useMemo } from 'react'\nimport { Upload } from 'react-feather'\nimport { useQuery } from 'react-query'\nimport { Link, useNavigate } from 'react-router-dom'\nimport styled, { css, useTheme } from 'styled-components/macro'\nimport { ExternalLink, ThemedText } from 'theme'\n\nconst TWITTER_WIDTH = 560\nconst TWITTER_HEIGHT = 480\n\ninterface AssetPriceDetailsProps {\n  asset: GenieAsset\n  collection: CollectionInfoForAsset\n}\n\nconst hoverState = css`\n  :hover::after {\n    border-radius: 12px;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: ${({ theme }) => theme.stateOverlayHover};\n    z-index: 0;\n  }\n\n  :active::after {\n    border-radius: 12px;\n    content: '';\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    background: ${({ theme }) => theme.stateOverlayPressed};\n    z-index: 0;\n  }\n`\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  gap: 24px;\n\n  @media (min-width: calc(960px + 1px)) {\n    position: fixed;\n    width: 360px;\n    margin-top: 20px;\n  }\n`\n\nconst BestPriceContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n  padding: 12px;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n`\n\nconst HeaderRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst PriceRow = styled.div`\n  display: flex;\n  gap: 12px;\n  align-items: flex-end;\n`\n\nconst MarketplaceIcon = styled.img`\n  width: 20px;\n  height: 20px;\n  border-radius: 4px;\n  margin-top: auto;\n  margin-bottom: auto;\n`\n\nconst BuyNowButton = styled.div<{ assetInBag: boolean; margin: boolean; useAccentColor: boolean }>`\n  position: relative;\n  width: 100%;\n  background-color: ${({ theme, assetInBag, useAccentColor }) =>\n    assetInBag ? theme.accentFailure : useAccentColor ? theme.accentAction : theme.backgroundInteractive};\n  border-radius: 12px;\n  padding: 10px 12px;\n  margin-top: ${({ margin }) => (margin ? '12px' : '0px')};\n  text-align: center;\n  cursor: pointer;\n\n  ${hoverState}\n`\n\nconst BuyNowButtonContainer = styled.div`\n  position: relative;\n`\n\nconst Tertiary = styled(ThemedText.BodySecondary)`\n  color: ${({ theme }) => theme.textTertiary};\n`\n\nconst UploadLink = styled.a`\n  color: ${({ theme }) => theme.textSecondary};\n  cursor: pointer;\n\n  ${OpacityHoverState}\n`\n\nconst NotForSaleContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n  padding: 48px 18px;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst DiscoveryContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst OwnerText = styled.a`\n  font-size: 16px;\n  font-weight: 600;\n  line-height: 20px;\n  color: ${({ theme }) => theme.textSecondary};\n  text-decoration: none;\n\n  ${OpacityHoverState}\n`\n\nconst OwnerInformationContainer = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  padding: 0 8px;\n`\n\nconst AssetInfoContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`\n\nconst AssetHeader = styled.div`\n  display: -webkit-box;\n  align-items: center;\n  font-size: 28px;\n  font-weight: 500;\n  line-height: 36px;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  color: ${({ theme }) => theme.textPrimary};\n`\n\nconst CollectionNameContainer = styled.div`\n  display: flex;\n  justify-content: space-between;\n`\n\nconst CollectionHeader = styled.span`\n  font-size: 16px;\n  font-weight: 400;\n  line-height: 24px;\n  color: ${({ theme }) => theme.textPrimary};\n  text-decoration: none;\n  ${OpacityHoverState};\n`\n\nconst VerifiedIconContainer = styled.span`\n  position: relative;\n`\n\nconst StyledVerifiedIcon = styled(VerifiedIcon)`\n  position: absolute;\n  top: 0px;\n`\n\nconst DefaultLink = styled(Link)`\n  text-decoration: none;\n`\n\nconst OwnerContainer = ({ asset }: { asset: WalletAsset }) => {\n  const navigate = useNavigate()\n  const { data: USDValue } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n  const setSellPageState = useProfilePageState((state) => state.setProfilePageState)\n  const selectSellAsset = useSellAsset((state) => state.selectSellAsset)\n  const resetSellAssets = useSellAsset((state) => state.reset)\n\n  const listing = asset.sellOrders && asset.sellOrders.length > 0 ? asset.sellOrders[0] : undefined\n  const expirationDate = listing?.endAt ? new Date(listing.endAt) : undefined\n\n  const USDPrice = useMemo(\n    () => (USDValue && asset.floor_sell_order_price ? USDValue * asset.floor_sell_order_price : undefined),\n    [USDValue, asset.floor_sell_order_price]\n  )\n  const trace = useTrace()\n\n  const goToListPage = () => {\n    resetSellAssets()\n    navigate('/nfts/profile')\n    selectSellAsset(asset)\n    sendAnalyticsEvent(NFTEventName.NFT_SELL_ITEM_ADDED, {\n      collection_address: asset.asset_contract.address,\n      token_id: asset.tokenId,\n      ...trace,\n    })\n    setSellPageState(ProfilePageStateType.LISTING)\n  }\n\n  return (\n    <BestPriceContainer>\n      <HeaderRow>\n        <ThemedText.SubHeader color=\"accentAction\" fontWeight={500} lineHeight=\"24px\">\n          {listing ? 'Your Price' : 'List for Sale'}\n        </ThemedText.SubHeader>\n        {listing && (\n          <ExternalLink href={listing.marketplaceUrl}>\n            <MarketplaceIcon alt={listing.marketplace} src={getMarketplaceIcon(listing.marketplace)} />\n          </ExternalLink>\n        )}\n      </HeaderRow>\n      <PriceRow>\n        {listing ? (\n          <>\n            <ThemedText.MediumHeader fontSize=\"28px\" lineHeight=\"36px\">\n              {formatEthPrice(asset.priceInfo?.ETHPrice)} ETH\n            </ThemedText.MediumHeader>\n            {USDPrice && (\n              <ThemedText.BodySecondary lineHeight=\"24px\">\n                {ethNumberStandardFormatter(USDPrice, true, true)}\n              </ThemedText.BodySecondary>\n            )}\n          </>\n        ) : (\n          <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n            Get the best price for your NFT by selling with Uniswap.\n          </ThemedText.BodySecondary>\n        )}\n      </PriceRow>\n      {expirationDate && (\n        <ThemedText.BodySecondary fontSize=\"14px\">Sale ends: {timeLeft(expirationDate)}</ThemedText.BodySecondary>\n      )}\n      {!listing ? (\n        <BuyNowButton assetInBag={false} margin={true} useAccentColor={true} onClick={goToListPage}>\n          <ThemedText.SubHeader lineHeight=\"20px\" color=\"white\">\n            List\n          </ThemedText.SubHeader>\n        </BuyNowButton>\n      ) : (\n        <>\n          <BuyNowButton assetInBag={false} margin={true} useAccentColor={false} onClick={goToListPage}>\n            <ThemedText.SubHeader lineHeight=\"20px\">Adjust listing</ThemedText.SubHeader>\n          </BuyNowButton>\n        </>\n      )}\n    </BestPriceContainer>\n  )\n}\n\nconst StyledLink = styled(Link)`\n  text-decoration: none;\n  ${OpacityHoverState}\n`\n\nconst NotForSale = ({ collectionName, collectionUrl }: { collectionName: string; collectionUrl: string }) => {\n  const theme = useTheme()\n\n  return (\n    <BestPriceContainer>\n      <NotForSaleContainer>\n        <CancelListingIcon width=\"79px\" height=\"79px\" color={theme.textTertiary} />\n        <ThemedText.SubHeader fontWeight={500} lineHeight=\"24px\">\n          Not for sale\n        </ThemedText.SubHeader>\n        <DiscoveryContainer>\n          <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n            Discover similar NFTs for sale in\n          </ThemedText.BodySecondary>\n          <StyledLink to={`/nfts/collection/${collectionUrl}`}>\n            <ThemedText.Link lineHeight=\"20px\">{collectionName}</ThemedText.Link>\n          </StyledLink>\n        </DiscoveryContainer>\n      </NotForSaleContainer>\n    </BestPriceContainer>\n  )\n}\n\nexport const AssetPriceDetails = ({ asset, collection }: AssetPriceDetailsProps) => {\n  const { account } = useWeb3React()\n\n  const cheapestOrder = asset.sellorders && asset.sellorders.length > 0 ? asset.sellorders[0] : undefined\n  const expirationDate = cheapestOrder?.endAt ? new Date(cheapestOrder.endAt) : undefined\n\n  const itemsInBag = useBag((s) => s.itemsInBag)\n  const addAssetsToBag = useBag((s) => s.addAssetsToBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n  const toggleBag = useBag((s) => s.toggleBag)\n  const bagExpanded = useBag((s) => s.bagExpanded)\n\n  const USDPrice = useUsdPrice(asset)\n\n  const assetsFilter = [{ address: asset.address, tokenId: asset.tokenId }]\n  const { walletAssets: ownerAssets } = useNftBalance(account ?? '', [], assetsFilter, 1)\n  const walletAsset: WalletAsset | undefined = useMemo(() => ownerAssets?.[0], [ownerAssets])\n\n  const { assetInBag } = useMemo(() => {\n    return {\n      assetInBag: itemsInBag.some(\n        (item) => asset.tokenId === item.asset.tokenId && asset.address === item.asset.address\n      ),\n    }\n  }, [asset, itemsInBag])\n\n  const shareTweet = () => {\n    window.open(\n      generateTweetForAsset(asset),\n      'newwindow',\n      `left=${(window.screen.width - TWITTER_WIDTH) / 2}, top=${\n        (window.screen.height - TWITTER_HEIGHT) / 2\n      }, width=${TWITTER_WIDTH}, height=${TWITTER_HEIGHT}`\n    )\n  }\n\n  const isOwner = asset.ownerAddress && !!walletAsset && account?.toLowerCase() === asset.ownerAddress?.toLowerCase()\n  const isForSale = cheapestOrder && asset.priceInfo\n\n  return (\n    <Container>\n      <AssetInfoContainer>\n        <CollectionNameContainer>\n          <DefaultLink to={`/nfts/collection/${asset.address}`}>\n            <CollectionHeader>\n              {collection.collectionName}\n              <VerifiedIconContainer>{collection.isVerified && <StyledVerifiedIcon />}</VerifiedIconContainer>\n            </CollectionHeader>\n          </DefaultLink>\n          <UploadLink onClick={shareTweet} target=\"_blank\">\n            <Upload size={20} strokeWidth={2} />\n          </UploadLink>\n        </CollectionNameContainer>\n        <AssetHeader>{asset.name ?? `${asset.collectionName} #${asset.tokenId}`}</AssetHeader>\n      </AssetInfoContainer>\n      {isOwner ? (\n        <OwnerContainer asset={walletAsset} />\n      ) : isForSale ? (\n        <BestPriceContainer>\n          <HeaderRow>\n            <ThemedText.SubHeader color=\"accentAction\" fontWeight={500} lineHeight=\"24px\">\n              Best Price\n            </ThemedText.SubHeader>\n            <ExternalLink href={cheapestOrder.marketplaceUrl}>\n              <MarketplaceIcon alt={cheapestOrder.marketplace} src={getMarketplaceIcon(cheapestOrder.marketplace)} />\n            </ExternalLink>\n          </HeaderRow>\n          <PriceRow>\n            <ThemedText.MediumHeader fontSize=\"28px\" lineHeight=\"36px\">\n              {formatEthPrice(asset.priceInfo.ETHPrice)} ETH\n            </ThemedText.MediumHeader>\n            {USDPrice && (\n              <ThemedText.BodySecondary lineHeight=\"24px\">\n                {ethNumberStandardFormatter(USDPrice, true, true)}\n              </ThemedText.BodySecondary>\n            )}\n          </PriceRow>\n          {expirationDate && expirationDate > new Date() && (\n            <Tertiary fontSize=\"14px\">Sale ends: {timeLeft(expirationDate)}</Tertiary>\n          )}\n          <div>\n            <BuyNowButtonContainer>\n              <BuyNowButton\n                assetInBag={assetInBag}\n                margin={true}\n                useAccentColor={true}\n                onClick={() => {\n                  assetInBag ? removeAssetsFromBag([asset]) : addAssetsToBag([asset])\n                  if (!assetInBag && !bagExpanded) {\n                    toggleBag()\n                  }\n                }}\n              >\n                <ThemedText.SubHeader color=\"white\" lineHeight=\"20px\">\n                  <span data-testid=\"nft-details-toggle-bag\">{assetInBag ? 'Remove' : 'Add to Bag'}</span>\n                </ThemedText.SubHeader>\n              </BuyNowButton>\n            </BuyNowButtonContainer>\n          </div>\n        </BestPriceContainer>\n      ) : (\n        <NotForSale collectionName={collection.collectionName ?? 'this collection'} collectionUrl={asset.address} />\n      )}\n      {isForSale && (\n        <OwnerInformationContainer>\n          {asset.tokenType !== 'ERC1155' && asset.ownerAddress && (\n            <ThemedText.BodySmall color=\"textSecondary\" lineHeight=\"20px\">\n              Seller:\n            </ThemedText.BodySmall>\n          )}\n          <OwnerText\n            target=\"_blank\"\n            href={`https://etherscan.io/address/${asset.ownerAddress}`}\n            rel=\"noopener noreferrer\"\n          >\n            {asset.tokenType === 'ERC1155' ? (\n              ''\n            ) : (\n              <span> {isOwner ? 'You' : asset.ownerAddress && shortenAddress(asset.ownerAddress, 2, 4)}</span>\n            )}\n          </OwnerText>\n        </OwnerInformationContainer>\n      )}\n    </Container>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { OpacityHoverState, ScrollBarStyles } from 'components/Common'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { EventCell, MarketplaceIcon } from 'nft/components/collection/ActivityCells'\nimport { ActivityEventResponse } from 'nft/types'\nimport { shortenAddress } from 'nft/utils/address'\nimport { formatEthPrice } from 'nft/utils/currency'\nimport { getTimeDifference } from 'nft/utils/date'\nimport { putCommas } from 'nft/utils/putCommas'\nimport { ReactNode } from 'react'\nimport styled from 'styled-components/macro'\n\nconst TR = styled.tr`\n  border-bottom: ${({ theme }) => `1px solid ${theme.backgroundOutline}`};\n  width: 100%;\n\n  &:last-child {\n    border-bottom: none;\n  }\n`\n\nconst TH = styled.th`\n  color: ${({ theme }) => theme.textSecondary};\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 20px;\n  width: 20%;\n\n  @media (max-width: 960px) {\n    &:nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media (max-width: 720px) {\n    &:nth-child(2) {\n      display: none;\n    }\n  }\n`\n\nconst Table = styled.table`\n  border-collapse: collapse;\n  text-align: left;\n  width: 100%;\n`\n\nconst TD = styled.td`\n  height: 56px;\n  padding: 8px 0px;\n  text-align: left;\n  vertical-align: middle;\n  width: 20%;\n\n  @media (max-width: 960px) {\n    &:nth-child(4) {\n      display: none;\n    }\n  }\n\n  @media (max-width: 720px) {\n    &:nth-child(2) {\n      display: none;\n    }\n  }\n`\n\nconst PriceContainer = styled.div`\n  align-items: center;\n  display: flex;\n  gap: 8px;\n`\n\nconst Link = styled.a`\n  color: ${({ theme }) => theme.textPrimary};\n  text-decoration: none;\n\n  ${OpacityHoverState}\n`\n\nconst ActivityContainer = styled.div`\n  max-height: 310px;\n  overflow: auto;\n\n  ${ScrollBarStyles}\n`\n\nconst LoadingCell = styled(LoadingBubble)`\n  height: 20px;\n  width: 80px;\n`\n\nconst ActivityTable = ({ children }: { children: ReactNode }) => {\n  return (\n    <ActivityContainer id=\"activityContainer\">\n      <Table>\n        <thead>\n          <TR>\n            <TH>\n              <Trans>Event</Trans>\n            </TH>\n            <TH>\n              <Trans>Price</Trans>\n            </TH>\n            <TH>\n              <Trans>By</Trans>\n            </TH>\n            <TH>\n              <Trans>To</Trans>\n            </TH>\n            <TH>\n              <Trans>Time</Trans>\n            </TH>\n          </TR>\n        </thead>\n        <tbody>{children}</tbody>\n      </Table>\n    </ActivityContainer>\n  )\n}\n\nconst LoadingAssetActivityRow = ({ cellCount }: { cellCount: number }) => {\n  return (\n    <TR>\n      {Array(cellCount)\n        .fill(null)\n        .map((_, index) => {\n          return (\n            <TD key={index}>\n              <LoadingCell />\n            </TD>\n          )\n        })}\n    </TR>\n  )\n}\n\nexport const LoadingAssetActivity = ({ rowCount }: { rowCount: number }) => {\n  return (\n    <ActivityTable>\n      {Array(rowCount)\n        .fill(null)\n        .map((_, index) => {\n          return <LoadingAssetActivityRow key={index} cellCount={5} />\n        })}\n    </ActivityTable>\n  )\n}\n\nconst AssetActivity = ({ eventsData }: { eventsData: ActivityEventResponse | undefined }) => {\n  return (\n    <ActivityTable>\n      {eventsData?.events &&\n        eventsData.events.map((event, index) => {\n          const { eventTimestamp, eventType, fromAddress, marketplace, price, toAddress, transactionHash } = event\n          const formattedPrice = price ? putCommas(formatEthPrice(price)).toString() : null\n\n          return (\n            <TR key={index}>\n              <TD>\n                <EventCell\n                  eventType={eventType}\n                  eventTimestamp={eventTimestamp}\n                  eventTransactionHash={transactionHash}\n                  eventOnly\n                />\n              </TD>\n              <TD>\n                {formattedPrice && (\n                  <PriceContainer>\n                    {marketplace && <MarketplaceIcon marketplace={marketplace} />}\n                    {formattedPrice} ETH\n                  </PriceContainer>\n                )}\n              </TD>\n\n              <TD>\n                {fromAddress && (\n                  <Link href={`https://etherscan.io/address/${fromAddress}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {shortenAddress(fromAddress, 2, 4)}\n                  </Link>\n                )}\n              </TD>\n\n              <TD>\n                {toAddress && (\n                  <Link href={`https://etherscan.io/address/${toAddress}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                    {shortenAddress(toAddress, 2, 4)}\n                  </Link>\n                )}\n              </TD>\n              <TD>{eventTimestamp && getTimeDifference(eventTimestamp.toString())}</TD>\n            </TR>\n          )\n        })}\n    </ActivityTable>\n  )\n}\n\nexport default AssetActivity\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYyB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGM6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRjOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkZDo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGU6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkZTpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGc6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/details/AssetDetails.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/details/AssetDetails.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAAA31U7Y7aMBD8f09hnYQEEkZOCoHL6aR7j6qqnHiTuGfiyDGQu4p3r78CDk37JzLr8ezseMzmZ/Ipm4pdEvT7CaEjHXADvG50jkoqyuULOTcIoyTbdcPq1SJ4e0NsCemG13DswplucrQ/hFohB9w3lMlLjkwJpfazs58zVUsc9lZrt5ncNlVd0OWerFGS7NYo3ZkV2aSm9fVpM2pNndZO9lxz2eZIgaCan8G2lWdQlbBNG84YtLYWpCWELOzPjjLG2xpr2Y3FiPzbAzkteilO2pG7E8SuBFQ6LAuptTyGH8o7Q2bajq791XHrrY+MddYbnPP+Ze+sjw7svzOqKaalHfrtWasTPP9wJBoGjRmUUlGv/tQyUIK3Xv50F5dSSJWH+1D1JYOvdHUD3o5iWVU9GFkHf7OPNLrh5UcLfZ+j1CNmiH9NR6BOrssI/zKXkZu1Mv2wKU2AhQNSwesW9yAqYw60GtQEVM6Hd3Twnt57OvpSSSFsza8KqsYIt9LaFdPnOb5A8cE1voFdR8b7TtDPmSPsPymKshPHxdnqBr3PaIdStUlGANKTllHVM43FMYhh9oVz/P0IjFO0jJ5oQtKt8cMp3Ezf/9TEbHtuLPE1BtIArAQMmHEFpZ/Q3Pnp6J7beF1cw7GPZ5nwFFHDIMwJPxwWK88yV51QlDOax9d2nZ8925J/jx69wHT8G5uy7zLvyET2vWVEegikDxFxwv4AXhINj3UFAAA=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var image = '_1yohfdw1 rgw6ez7av rgw6ez1dp rgw6ez4p';\nexport var embedContainer = '_1yohfdw2';\nexport var embed = '_1yohfdw3 _1yohfdw1 rgw6ez7av rgw6ez1dp rgw6ez4p';\nexport var container = '_1yohfdw4 rgw6ez43v rgw6ez46p rgw6ez3j';\nexport var marketplace = 'rgw6ez7a7';\nexport var tab = '_1yohfdw7 rgw6ezcv rgw6ezb1 rgw6ezed rgw6ez4dp rgw6ez7hz rgw6ez2s7 rgw6ez4rd rgw6ez78z';\nexport var creator = '_1yohfdw8';\nexport var columns = '_1yohfdwa rgw6ez43v rgw6ez461 rgw6ez46p rgw6ez16v rgw6ez2d7 rgw6ez2dr rgw6ez2ey rgw6ez2ip rgw6ez2j9 rgw6ez2kg rgw6ez27p rgw6ez289 rgw6ez29g rgw6ez2o7 rgw6ez3tp rgw6ez3tl rgw6ez3um';\nexport var column = '_1yohfdwb';\nexport var columnRight = '_1yohfdwc';\nexport var audioControls = '_1yohfdwd';","import { OpacityHoverState } from 'components/Common'\nimport useCopyClipboard from 'hooks/useCopyClipboard'\nimport { CollectionInfoForAsset, GenieAsset } from 'nft/types'\nimport { putCommas } from 'nft/utils'\nimport { shortenAddress } from 'nft/utils/address'\nimport { useCallback } from 'react'\nimport { Copy } from 'react-feather'\nimport styled from 'styled-components/macro'\n\nconst Details = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  grid-gap: 40px;\n\n  @media (max-width: 600px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  @media (max-width: 450px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nconst Header = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  font-size: 14px;\n  line-height: 20px;\n`\n\nconst Body = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 14px;\n  line-height: 20px;\n  margin-top: 8px;\n`\n\nconst Center = styled.span`\n  align-items: center;\n  cursor: pointer;\n  display: flex;\n  gap: 8px;\n\n  ${OpacityHoverState}\n`\n\nconst CreatorLink = styled.a`\n  color: ${({ theme }) => theme.textPrimary};\n  text-decoration: none;\n\n  ${OpacityHoverState}\n`\n\nconst CopyIcon = styled(Copy)`\n  cursor: pointer;\n`\n\nconst GridItem = ({ header, body }: { header: string; body: React.ReactNode }) => {\n  return (\n    <div>\n      <Header>{header}</Header>\n      <Body>{body}</Body>\n    </div>\n  )\n}\n\nconst stringShortener = (text: string) => `${text.substring(0, 4)}...${text.substring(text.length - 4, text.length)}`\n\nconst DetailsContainer = ({ asset, collection }: { asset: GenieAsset; collection: CollectionInfoForAsset }) => {\n  const { address, tokenId, tokenType, creator } = asset\n  const { totalSupply } = collection\n\n  const [, setCopied] = useCopyClipboard()\n  const copy = useCallback(() => {\n    setCopied(address ?? '')\n  }, [address, setCopied])\n\n  return (\n    <Details>\n      <GridItem\n        header=\"Contract address\"\n        body={\n          <Center onClick={copy}>\n            {shortenAddress(address, 2, 4)} <CopyIcon size={13} />\n          </Center>\n        }\n      />\n      <GridItem header=\"Token ID\" body={tokenId.length > 9 ? stringShortener(tokenId) : tokenId} />\n      <GridItem header=\"Token standard\" body={tokenType} />\n      <GridItem header=\"Blockchain\" body=\"Ethereum\" />\n      <GridItem header=\"Total supply\" body={`${putCommas(totalSupply ?? 0)}`} />\n      <GridItem\n        header=\"Creator\"\n        body={\n          creator?.address && (\n            <CreatorLink\n              href={`https://etherscan.io/address/${creator.address}`}\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              {shortenAddress(creator.address, 2, 4)}\n            </CreatorLink>\n          )\n        }\n      />\n    </Details>\n  )\n}\n\nexport default DetailsContainer\n","import { useState } from 'react'\nimport { ChevronDown, ChevronUp } from 'react-feather'\nimport styled, { css } from 'styled-components/macro'\n\nconst Header = styled.div<{ isOpen: boolean }>`\n  display: flex;\n  border-radius: ${({ isOpen }) => (isOpen ? '16px 16px 0px 0px' : '16px')};\n  justify-content: space-between;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  padding: 14px 20px;\n  cursor: pointer;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  margin-top: 28px;\n  width: 100%;\n  align-items: center;\n\n  &:hover {\n    background-color: ${({ theme }) => theme.stateOverlayHover};\n  }\n\n  &:active {\n    background-color: ${({ theme }) => theme.stateOverlayPressed};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => css`background-color ${duration.medium} ${timing.ease}`};\n`\n\nconst PrimaryHeader = styled.span`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  color: ${({ theme }) => theme.textPrimary};\n  font-weight: 500;\n  line-height: 28px;\n  font-size: 20px;\n`\n\nconst SecondaryHeader = styled.span`\n  font-size: 12px;\n  color: ${({ theme }) => theme.textSecondary};\n`\n\nconst SecondaryHeaderContainer = styled.span`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  gap: 32px;\n  color: ${({ theme }) => theme.textPrimary};\n`\n\nconst ContentContainer = styled.div`\n  padding: 20px;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-top: none;\n  border-radius: 0px 0px 16px 16px;\n  background-color: ${({ theme }) => theme.backgroundSurface}; ;\n`\n\nconst InfoContainer = ({\n  children,\n  primaryHeader,\n  secondaryHeader,\n  defaultOpen,\n  ...props\n}: {\n  children: JSX.Element\n  primaryHeader: string\n  secondaryHeader: React.ReactNode\n  defaultOpen?: boolean\n}) => {\n  const [isOpen, setIsOpen] = useState(!!defaultOpen)\n\n  return (\n    <div>\n      <Header {...props} isOpen={isOpen} onClick={() => setIsOpen(!isOpen)}>\n        <PrimaryHeader>\n          {primaryHeader} <SecondaryHeader>{secondaryHeader}</SecondaryHeader>\n        </PrimaryHeader>\n        <SecondaryHeaderContainer>{isOpen ? <ChevronUp /> : <ChevronDown />}</SecondaryHeaderContainer>\n      </Header>\n      {isOpen && <ContentContainer>{children}</ContentContainer>}\n    </div>\n  )\n}\n\nexport default InfoContainer\n","import { OpacityHoverState } from 'components/Common'\nimport { GenieAsset, Trait } from 'nft/types'\nimport qs from 'query-string'\nimport { useMemo } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nconst Grid = styled.div`\n  display: grid;\n  grid-template-columns: 1fr 1fr 1fr 1fr;\n  gap: 16px;\n  max-width: 780px;\n\n  @media (max-width: 1080px) {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n\n  @media (max-width: 420px) {\n    grid-template-columns: 1fr 1fr;\n  }\n`\n\nconst GridItemContainer = styled(Link)`\n  background-color: ${({ theme }) => theme.backgroundInteractive};\n  border-radius: 12px;\n  cursor: pointer;\n  padding: 12px;\n  text-decoration: none;\n\n  ${OpacityHoverState}\n  min-width: 0;\n`\n\nconst TraitType = styled.div`\n  color: ${({ theme }) => theme.textSecondary};\n  font-weight: 600;\n  font-size: 10px;\n  line-height: 12px;\n  white-space: nowrap;\n  width: 100%;\n`\n\nconst TraitValue = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 16px;\n  line-height: 24px;\n  margin-top: 4px;\n  display: inline-block;\n\n  display: inline-block;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  max-width: 100%;\n`\n\nconst GridItem = ({ trait, collectionAddress }: { trait: Trait; collectionAddress: string }) => {\n  const { trait_type, trait_value } = trait\n  const params = qs.stringify(\n    { traits: [`(\"${trait_type}\",\"${trait_value}\")`] },\n    {\n      arrayFormat: 'comma',\n    }\n  )\n\n  return (\n    <GridItemContainer to={`/nfts/collection/${collectionAddress}?${params}`}>\n      <TraitType>{trait_type}</TraitType>\n      <TraitValue>{trait_value}</TraitValue>\n    </GridItemContainer>\n  )\n}\n\nconst TraitsContainer = ({ asset }: { asset: GenieAsset }) => {\n  const traits = useMemo(() => asset.traits?.sort((a, b) => a.trait_type.localeCompare(b.trait_type)), [asset])\n\n  return (\n    <Grid>\n      {traits?.map((trait) => {\n        return <GridItem key={trait.trait_type} trait={trait} collectionAddress={asset.address} />\n      })}\n    </Grid>\n  )\n}\n\nexport default TraitsContainer\n","import Column from 'components/Column'\nimport Loader from 'components/Loader'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { ScreenBreakpointsPaddings } from 'nft/pages/collection/index.css'\nimport styled, { useTheme } from 'styled-components/macro'\n\nconst BREAKPOINT = '960px'\n\nconst Title = styled(LoadingBubble)`\n  height: 16px;\n  width: 136px;\n`\n\nconst SubTitle = styled(LoadingBubble)`\n  height: 40px;\n  width: 200px;\n  margin-top: 8px;\n\n  @media (max-width: ${BREAKPOINT}) {\n    width: 100%;\n  }\n`\n\nconst Seller = styled(LoadingBubble)`\n  height: 16px;\n  width: 40px;\n`\n\nconst SellerAddress = styled(LoadingBubble)`\n  margin-top: 4px;\n  height: 24px;\n  width: 95px;\n`\n\nconst PrimaryBody = styled(LoadingBubble)`\n  width: 100%;\n  height: 260px;\n`\n\nconst ActivityLoader = styled(LoadingBubble)`\n  width: 100%;\n  height: 428px;\n`\n\nconst PrimaryContent = styled(Column)`\n  max-width: 780px;\n  margin-top: 28px;\n  width: 100%;\n  gap: 28px;\n\n  @media (max-width: ${BREAKPOINT}) {\n    max-width: 100%;\n  }\n`\n\nconst LoaderContainer = styled.div`\n  width: 100%;\n  padding-top: 200px;\n  padding-bottom: 200px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  color: pink;\n`\n\nconst BuyNowContainer = styled(LoadingBubble)`\n  height: 180px;\n  width: 360px;\n\n  @media (max-width: ${BREAKPOINT}) {\n    width: 100%;\n  }\n`\n\nconst LoadingContainer = styled.div`\n  display: flex;\n  margin-top: 48px;\n  width: 100%;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 1296px;\n\n  ${ScreenBreakpointsPaddings}\n\n  @media (max-width: ${BREAKPOINT}) {\n    max-width: 100%;\n    margin-top: 0;\n  }\n`\n\nconst StyledColumn = styled(Column)`\n  max-width: 780px;\n  width: 100%;\n\n  @media (max-width: ${BREAKPOINT}) {\n    max-width: 100%;\n  }\n`\n\nconst BuyNowLoadingDesktop = styled(Column)`\n  margin-top: 20px;\n  padding-left: 60px;\n  gap: 24px;\n\n  @media (max-width: ${BREAKPOINT}) {\n    display: none;\n  }\n`\n\nconst BuyNowLoadingMobile = styled(Column)`\n  display: none;\n  margin-top: 16px;\n  gap: 24px;\n\n  @media (max-width: ${BREAKPOINT}) {\n    display: flex;\n  }\n`\n\nexport const AssetDetailsLoading = () => {\n  const theme = useTheme()\n\n  return (\n    <LoadingContainer>\n      <StyledColumn>\n        <LoaderContainer>\n          <Loader stroke={theme.accentAction} size=\"40px\" />\n        </LoaderContainer>\n        <BuyNowLoadingMobile>\n          <Column>\n            <Title />\n            <SubTitle />\n          </Column>\n          <BuyNowContainer />\n          <Column>\n            <Seller />\n            <SellerAddress />\n          </Column>\n        </BuyNowLoadingMobile>\n        <PrimaryContent>\n          <PrimaryBody />\n          <ActivityLoader />\n          <PrimaryBody />\n          <PrimaryBody />\n        </PrimaryContent>\n      </StyledColumn>\n      <BuyNowLoadingDesktop>\n        <Column>\n          <Title />\n          <SubTitle />\n        </Column>\n        <BuyNowContainer />\n        <Column>\n          <Seller />\n          <SellerAddress />\n        </Column>\n      </BuyNowLoadingDesktop>\n    </LoadingContainer>\n  )\n}\n","import { Trace } from '@uniswap/analytics'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport { useNftAssetDetails } from 'graphql/data/nft/Details'\nimport { AssetDetails } from 'nft/components/details/AssetDetails'\nimport { AssetDetailsLoading } from 'nft/components/details/AssetDetailsLoading'\nimport { AssetPriceDetails } from 'nft/components/details/AssetPriceDetails'\nimport { useParams } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nconst AssetContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  gap: 60px;\n  padding: 48px 48px 0 48px;\n\n  @media (max-width: 960px) {\n    padding: 40px 40px 0 40px;\n  }\n  @media (max-width: 540px) {\n    padding: 20px 20px 0 20px;\n  }\n  @media (max-width: 420px) {\n    padding: 16px 16px 0 16px;\n  }\n`\n\nconst AssetPriceDetailsContainer = styled.div`\n  min-width: 360px;\n  position: relative;\n\n  @media (max-width: 960px) {\n    display: none;\n  }\n`\n\nconst AssetPage = () => {\n  const { tokenId = '', contractAddress = '' } = useParams()\n  const { data, loading } = useNftAssetDetails(contractAddress, tokenId)\n\n  const [asset, collection] = data\n\n  if (loading) return <AssetDetailsLoading />\n\n  return (\n    <>\n      <Trace\n        page={InterfacePageName.NFT_DETAILS_PAGE}\n        properties={{ collection_address: contractAddress, token_id: tokenId }}\n        shouldLogImpression\n      >\n        {!!asset && !!collection && (\n          <AssetContainer>\n            <AssetDetails collection={collection} asset={asset} />\n            <AssetPriceDetailsContainer>\n              <AssetPriceDetails collection={collection} asset={asset} />\n            </AssetPriceDetailsContainer>\n          </AssetContainer>\n        )}\n      </Trace>\n    </>\n  )\n}\n\nexport default AssetPage\n"],"sourceRoot":""}