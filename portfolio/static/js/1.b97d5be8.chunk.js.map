{"version":3,"sources":["nft/css/loading.css.ts","nft/components/collection/Card.tsx","nft/components/collection/Card.css.ts","nft/components/bag/profile/utils.ts","nft/components/bag/profile/ListingModal.css.ts","nft/utils/tokenRoutes.ts","nft/hooks/useTokenInput.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/components/bag/BagFooter.tsx","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePermit2Approval.ts","nft/components/bag/profile/ListingSection.tsx","nft/components/bag/profile/ListingModal.tsx","nft/utils/nftRoute.ts","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","nft/components/bag/Bag.css.ts","nft/components/profile/list/Modal/BelowFloorWarningModal.tsx","nft/components/bag/profile/ListingButton.tsx"],"names":["loadingBlock","loadingAsset","AssetMediaType","loadingBackground","cardImageHover","playbackSwitch","CardContext","createContext","undefined","BORDER_RADIUS","useCardContext","context","useContext","Error","useNotForSale","asset","useMemo","notForSale","BigNumber","from","priceInfo","ETHPrice","lt","useAssetMediaType","assetMediaType","Image","animationUrl","isAudio","Audio","isVideo","Video","baseHref","address","tokenId","asset_contract","DetailsLinkContainer","styled","a","theme","accentAction","accentActionSoft","OpacityHoverState","SuspiciousIcon","AlertTriangle","accentFailure","RankingContainer","div","backgroundOutline","ThemedText","HeadlineSmall","backgroundBackdrop","backgroundInteractive","textPrimary","StyledImageContainer","isDisabled","opacity","disabled","enabled","Container","selected","addAssetToBag","removeAssetFromBag","children","onClick","useReducer","s","hovered","toggleHovered","useState","href","setHref","providerValue","assetRef","useRef","useLayoutEffect","current","matches","toggleHover","useCallback","Provider","value","Box","position","ref","borderRadius","className","draggable","onMouseEnter","onMouseLeave","transition","e","preventDefault","ImageContainer","handleUniformAspectRatio","uniformAspectRatio","setUniformAspectRatio","renderedHeight","setRenderedHeight","UniformAspectRatios","square","height","currentTarget","clientHeight","aspectRatio","clientWidth","unset","getHeightFromAspectRatio","smallImageUrl","imageUrl","noContent","setNoContent","loaded","setLoaded","isMobile","useIsMobile","display","overflow","borderTopLeftRadius","borderTopRightRadius","as","width","style","src","objectFit","onError","onLoad","clsx","styles","getMediaAspectRatio","shouldPlay","setCurrentTokenPlayingMedia","vidRef","imageLoaded","setImageLoaded","play","pause","alt","name","willChange","visibility","stopPropagation","left","top","onEnded","loop","playsInline","audRef","DetailsContainer","paddingX","paddingTop","justifyContent","flexDirection","InfoContainer","TruncatedTextRow","Row","ProfileNftDetails","hideDetails","shouldShowUserListedPrice","tokenType","NftStandard","Erc1155","flexWrap","bodySmall","color","themeVars","colors","textSecondary","collectionIsVerified","justifyItems","body","assetName","susFlag","buttonTextMedium","floor_sell_order_price","floorFormatter","PrimaryRow","gap","PrimaryDetails","whiteSpace","PrimaryInfo","textOverflow","SecondaryRow","marginTop","SecondaryDetails","SecondaryInfo","lineHeight","subhead","MarketplaceIcon","marketplace","DetailsLink","Ranking","rarity","provider","rarityVerified","rarityLogo","rank","text","marginRight","collectionName","primaryProvider","fallbackProvider","placement","paddingBottom","putCommas","Suspicious","flexShrink","marginLeft","Pool","NoContentContainer","background","backgroundSurface","textAlign","transform","updateStatus","listing","newStatus","rows","setRows","callback","rowsCopy","index","findIndex","n","status","approveCollectionRow","collectionRow","signer","setCollectionStatusAndCallback","pauseAllRows","ListingStatus","SIGNING","collectionAddress","addresses","addressesByNetwork","SupportedChainId","MAINNET","spender","OPENSEA_CROSS_CHAIN_CONDUIT","LOOKSRARE_MARKETPLACE_CONTRACT","X2Y2_TRANSFER_CONTRACT","TRANSFER_MANAGER_ERC721","approveCollection","REJECTED","FAILED","signListingRow","getLooksRareNonce","setLooksRareNonce","setListingStatusAndCallback","looksRareNonce","signListing","res","getTotalEthValue","sellAssets","total","reduce","newListings","length","maxListing","b","price","maxFee","fee","LOOKS_RARE_CREATOR_BASIS_POINTS","basisPoints","Math","round","Number","EPSILON","getListings","newCollectionsToApprove","forEach","marketplaces","newListing","images","icon","DEFINED","find","push","some","newCollectionRow","image_url","isVerified","getListingState","collectionsRequiringApproval","listings","allListingsPending","allListingsDefined","allListingsApproved","allCollectionsPending","allCollectionsDefined","anyActiveSigning","anyActiveFailures","anyActiveRejections","anyPaused","collection","PENDING","PAUSED","APPROVED","verifyStatus","pauseRow","row","resetRow","chevron","chevronDown","sectionDivider","button","listingModalIcon","warningTooltip","listingSectionBorder","buildTradeRouteInput","swap","inputAmount","amount","swapAmounts","outputAmount","quotient","toString","token","currency","isToken","chainId","decimals","isNative","pools","route","map","pool","isPool","pair","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","buildPool","useTokenInput","create","devtools","set","inputCurrency","tokenTradeInput","setInputCurrency","clearInputCurrency","setTokenTradeInput","usePayWithAnyTokenSwap","trade","allowance","allowedSlippage","state","hasRoutes","routes","hasInputAmount","hasAllowance","useEffect","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","swaps","protocol","Protocol","MIXED","V2","buildAllTradeRouteInputs","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","permit","slippageToleranceBasisPoints","tokenAmount","FooterContainer","Footer","FooterHeader","Column","usingPayWithAnyToken","CurrencyRow","TotalColumn","WarningIcon","WarningText","BodyPrimary","$color","HelperText","Caption","CurrencyInput","PayButton","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","ActionButton","backgroundColor","textColor","Warning","fontSize","Helper","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","TradeState","LOADING","fontWeight","SYNCING","ethNumberStandardFormatter","toExact","formatWeiToDecimal","symbol","FiatValue","usdcValue","priceImpact","priceImpactColor","size","BodySmall","formatPriceImpact","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","BagStatus","FETCHING_ROUTE","CONFIRMING_IN_WALLET","FETCHING_FINAL_ROUTE","PROCESSING_TRANSACTION","BagFooter","fetchAssets","eventProperties","toggleWalletModal","useToggleWalletModal","useTheme","useWeb3React","account","connector","connected","Boolean","shouldUsePayWithAnyToken","usePayWithAnyTokenEnabled","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","useBag","isLocked","bagStatus","setBagExpanded","setBagStatus","shallow","bagIsLocked","tokenSelectorOpen","setTokenSelectorOpen","isPending","includes","parsedOutputAmount","tryParseCurrencyAmount","formatEther","useBestTrade","TradeType","EXACT_OUTPUT","useAutoSlippageTolerance","maximumAmountIn","useDerivedPayWithAnyTokenSwapInfo","maximumAmount","usePermit2Allowance","UNIVERSAL_ROUTER_ADDRESS","isApprovalLoading","AllowanceState","REQUIRED","isAllowancePending","setIsAllowancePending","updateAllowance","invariant","approveAndPermit","sendAnalyticsEvent","InterfaceEventName","APPROVE_TOKEN_TXN_SUBMITTED","chain_id","token_symbol","token_address","console","error","usePermit2Approval","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","stablecoinPriceImpact","computeFiatValuePriceImpact","severity","warningSeverity","priceImpactWarning","accentWarning","accentCritical","balanceInEth","useWalletBalance","balance","sufficientBalance","lessThan","parseEther","gte","ADDING_TO_BAG","handleClick","buttonText","warningText","warningTextColor","helperText","helperTextColor","buttonColor","buttonTextColor","accentTextLightPrimary","switchChain","WARNING","VALID","CONFIRM_QUOTE","bagExpanded","traceEventProperties","usd_value","using_erc20","SubHeaderSmall","NFTEventName","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","marginBottom","justify","events","BrowserEvent","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","Loader","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","selectedCurrency","onlyShowCurrenciesWithBalance","ListingSection","sectionTitle","caption","title","openIndex","isSuccessScreen","setIsOpen","notAllApproved","useSellAsset","removeAssetMarketplace","removeRow","getListingRowPrice","listingRow","allApproved","badge","image","zIndex","maxWidth","sm","md","formatEthPrice","numberToWei","buttonTextSmall","border","cursor","ListingModal","useNFTList","listingStatus","setListingStatus","setListings","setCollectionsRequiringApproval","getSigner","setOpenIndex","allCollectionsApproved","setAllCollectionsApproved","toggleCart","toggleBag","looksRareNonceRef","trace","useTrace","modal","InterfaceModalName","NFT_LISTING","subscribe","totalEthListingValue","ethPriceInUSD","setEthPriceInUSD","fetchPrice","then","startListingEventProperties","collection_addresses","token_ids","Array","Set","list_quantity","every","CONTINUE","resetAllRows","signListings","allCollectionsApprovedOrPaused","allListingsApprovedOrPaused","startListingFlow","NFT_SELL_START_LISTING","getAddress","signerAddress","looksRareNonceFetcher","allListingsSigned","paused","NFT_LISTING_COMPLETED","signatures_approved","filter","logListing","showSuccessScreen","paddingLeft","paddingRight","headlineSmall","fill","overflowX","overflowY","maxHeight","pluralize","subheadSmall","ListingButton","showWarningOverride","type","buildRoutingItem","routingItem","action","RoutingActions","Buy","toLowerCase","amountIn","assetIn","baseAsset","basePrice","baseDecimals","amountOut","assetOut","id","contractAddress","orderSource","buildRouteResponse","routeResponse","useErc20Token","valueToSend","sendAmount","data","calldata","to","toAddress","dash","keyframes","Circle","circle","TimedLoader","strokeWidth","strokeLinecap","transformOrigin","r","cx","cy","bagRow","bagRowImage","grayscaleImage","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","BagRow","usdPrice","removeAsset","showRemove","grayscale","loadedImage","noImageAvailable","setNoImageAvailable","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","parseFloat","handleRemoveClick","getAssetHref","textDecoration","emphasis","ButtonEmphasis","medium","ButtonSize","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","gt","handleRemove","handleKeep","borderTopColor","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","borderStyle","borderWidth","borderColor","UnavailableAssetsHeaderRow","clearUnavailableAssets","didOpenUnavailableAssets","setDidOpenUnavailableAssets","toggleOpen","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","slice","BagContent","uncheckedItemsInBag","itemsInBag","setItemsInBag","removeAssetsFromBag","recalculateBagUsingPooledAssets","fetchedPriceData","useQuery","unchangedAssets","item","BagItemStatus","ADDED_TO_BAG","REVIEWED","priceChangedAssets","REVIEWING_PRICE_CHANGE","unavailableAssets","UNAVAILABLE","availableItems","hasAssetsInReview","hasAssets","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","IN_REVIEW","CONFIRM_REVIEW","reverse","ClearButton","ButtonText","IconWrapper","CounterDot","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","numberOfCharacters","getCircleSizing","StyledColumn","EmptyState","useIsNftProfilePage","textTertiary","ProfileAssetRow","removeSellAsset","setHovered","handleHover","handleRemoveAsset","ProfileBagContent","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","shallowShadow","raiseZIndex","Z_INDEX","modalOverTooltip","modalBackdrop","breakpoint","xxxl","DetailsPageBackground","ScrollingIndicator","show","marginX","borderBottomColor","Bag","resetSellAssets","reset","useProfilePageState","setProfilePageState","profilePageState","setLocked","setTotalEthPrice","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","isNftListV2","useNftListV2Flag","NftListV2Variant","Enabled","usingGqlRouting","useGqlRoutingFlag","GqlRoutingVariant","sendTransaction","useSendTransaction","transactionState","setTransactionState","setState","transactionStateRef","useTransactionResponse","setTransactionResponse","queryClient","useQueryClient","isModalOpen","setModalIsOpen","userCanScroll","setUserCanScroll","scrollProgress","setScrollProgress","add","purchaseAssets","routingData","purchasingWithErc20","purchaseResponse","TxStateType","Success","Failed","handleCloseBag","manualClose","useNftRouteLazyQuery","fetchGqlRoute","itemsToBuy","ethSellObject","buildSellObject","ethTotal","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","nftRoute","combineBuyItemsWithTxRoute","hasPriceAdjustment","updatedAssets","shouldRefetchCalldata","fetchedPriceChangedAssets","sort","sortUpdatedAssets","fetchedUnavailableAssets","isUnavailable","fetchedUnchangedAssets","hasReviewedAssets","hasUnavailableAssets","shouldReview","unavailableAsset","changedAsset","unchangedAsset","shouldLock","fetchQuery","fetchRoute","toSell","toBuy","routeData","Confirming","Denied","Invalid","New","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","Portal","ProfilePageStateType","LISTING","node","canScroll","scrollHeight","onScroll","event","scrollTop","containerHeight","paddingY","commonButtonStyles","NFT_PROFILE_PAGE_START_SELL","Overlay","ModalWrapper","deepShadow","BREAKPOINTS","CloseIconWrapper","CloseIcon","X","HazardIconWrap","ContinueButton","ButtonPrimary","EditListings","span","BelowFloorWarningModal","listingsBelowFloor","closeModal","startListing","floorPrice","toFixed","addMarketplaceWarning","removeAllMarketplaceWarnings","showResolveIssues","toggleShowResolveIssues","issues","setIssues","showWarning","setShowWarning","canContinue","setCanContinue","warningRef","useOnClickOutside","noMarketplacesSelected","missingExpiration","expirationTime","isNaN","Date","now","invalidExpiration","overMaxExpiration","listingsMissingPrice","listingsAboveSellOrderFloor","invalidPrices","overrideFloorPrice","foundIssues","continueCheck","disableListButton","warningMessage","warningWrappedClick","message","addWarningMessages","bottom","accentTextDarkPrimary","white"],"mappings":"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","file":"static/js/1.b97d5be8.chunk.js","sourcesContent":["import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#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\\\"}!../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/loading.css.ts.vanilla.css!=!../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/loading.css.ts.vanilla.css\\\",\\\"source\\\":\\\"QGtleWZyYW1lcyBfMmtkdmZ3MCB7CiAgMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7CiAgfQogIDEwMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlOwogIH0KfQouXzJrZHZmdzEgewogIGFuaW1hdGlvbjogXzJrZHZmdzAgMS41cyBpbmZpbml0ZTsKICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCAjN0M4NUEyNEQgMjUlLCByZ2JhKDAsMCwwLDAuMykgNTAlLCAjN0M4NUEyNEQgNzUlKTsKICBiYWNrZ3JvdW5kLXNpemU6IDQwMCU7CiAgd2lsbC1jaGFuZ2U6IGJhY2tncm91bmQtcG9zaXRpb247Cn0KLl8ya2R2ZnczIHsKICB1c2VyLXNlbGVjdDogbm9uZTsKfQ==\\\"}!../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var loadingBlock = '_2kdvfw1';\nexport var loadingAsset = '_2kdvfw3 _2kdvfw1 rgw6ez7aj rgw6ez78v rgw6ez4fj';","import { BigNumber } from '@ethersproject/bignumber'\nimport clsx from 'clsx'\nimport { OpacityHoverState } from 'components/Common'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport { Box } from 'nft/components/Box'\nimport { Row } from 'nft/components/Flex'\nimport {\n  MinusIconLarge,\n  PauseButtonIcon,\n  PlayButtonIcon,\n  PlusIconLarge,\n  PoolIcon,\n  RarityVerifiedIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { body, bodySmall, buttonTextMedium, subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { useIsMobile } from 'nft/hooks'\nimport { GenieAsset, Rarity, UniformAspectRatio, UniformAspectRatios, WalletAsset } from 'nft/types'\nimport { fallbackProvider, isAudio, isVideo, putCommas } from 'nft/utils'\nimport { floorFormatter } from 'nft/utils/numbers'\nimport {\n  createContext,\n  MouseEvent,\n  ReactNode,\n  useCallback,\n  useContext,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react'\nimport { AlertTriangle } from 'react-feather'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport * as styles from './Card.css'\n\n/* -------- ASSET CONTEXT -------- */\nexport interface CardContextProps {\n  asset: GenieAsset | WalletAsset\n  hovered: boolean\n  selected: boolean\n  href: string\n  setHref: (href: string) => void\n  addAssetToBag: () => void\n  removeAssetFromBag: () => void\n}\n\nconst CardContext = createContext<CardContextProps | undefined>(undefined)\n\nconst BORDER_RADIUS = '12'\n\nconst useCardContext = () => {\n  const context = useContext(CardContext)\n  if (!context) throw new Error('Must use context inside of provider')\n  return context\n}\n\nexport enum AssetMediaType {\n  Image,\n  Video,\n  Audio,\n}\n\nconst useNotForSale = (asset: GenieAsset) =>\n  useMemo(() => {\n    let notForSale = true\n    notForSale = asset.notForSale || BigNumber.from(asset.priceInfo ? asset.priceInfo.ETHPrice : 0).lt(0)\n    return notForSale\n  }, [asset])\n\nconst useAssetMediaType = (asset: GenieAsset | WalletAsset) =>\n  useMemo(() => {\n    let assetMediaType = AssetMediaType.Image\n    if (asset.animationUrl) {\n      if (isAudio(asset.animationUrl)) {\n        assetMediaType = AssetMediaType.Audio\n      } else if (isVideo(asset.animationUrl)) {\n        assetMediaType = AssetMediaType.Video\n      }\n    }\n    return assetMediaType\n  }, [asset])\n\nconst baseHref = (asset: GenieAsset | WalletAsset) => {\n  if ('address' in asset) return `/#/nfts/asset/${asset.address}/${asset.tokenId}?origin=collection`\n  if ('asset_contract' in asset) return `/#/nfts/asset/${asset.asset_contract.address}/${asset.tokenId}?origin=profile`\n  return '/#/nfts/profile'\n}\n\nconst DetailsLinkContainer = styled.a`\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n  text-decoration: none;\n  font-size: 14px;\n  font-weight: 500;\n  border: 1px solid;\n  color: ${({ theme }) => theme.accentAction};\n  border-color: ${({ theme }) => theme.accentActionSoft};\n  padding: 2px 6px;\n  border-radius: 6px;\n  ${OpacityHoverState};\n`\n\nconst SuspiciousIcon = styled(AlertTriangle)`\n  width: 16px;\n  height: 16px;\n  color: ${({ theme }) => theme.accentFailure};\n`\n\nconst Erc1155ControlsRow = styled.div`\n  position: absolute;\n  display: flex;\n  width: 100%;\n  bottom: 12px;\n  z-index: 2;\n  justify-content: center;\n`\n\nconst Erc1155ControlsContainer = styled.div`\n  display: flex;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: ${BORDER_RADIUS}px;\n  overflow: hidden;\n`\n\nconst Erc1155ControlsDisplay = styled(ThemedText.HeadlineSmall)`\n  display: flex;\n  padding: 6px 8px;\n  width: 60px;\n  background: ${({ theme }) => theme.backgroundBackdrop};\n  justify-content: center;\n  cursor: default;\n`\n\nconst Erc1155ControlsInput = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 40px;\n  background: ${({ theme }) => theme.backgroundInteractive};\n  color: ${({ theme }) => theme.textPrimary};\n\n  :hover {\n    color: ${({ theme }) => theme.accentAction};\n  }\n`\n\nconst RankingContainer = styled.div`\n  position: absolute;\n  top: 12px;\n  left: 12px;\n  z-index: 2;\n`\n\nconst StyledImageContainer = styled.div<{ isDisabled?: boolean }>`\n  position: relative;\n  pointer-events: auto;\n  &:hover {\n    opacity: ${({ isDisabled, theme }) => (isDisabled ? theme.opacity.disabled : theme.opacity.enabled)};\n  }\n  cursor: ${({ isDisabled }) => (isDisabled ? 'default' : 'pointer')};\n`\n\n/* -------- ASSET CARD -------- */\ninterface CardProps {\n  asset: GenieAsset | WalletAsset\n  selected: boolean\n  addAssetToBag: () => void\n  removeAssetFromBag: () => void\n  children: ReactNode\n  isDisabled?: boolean\n  onClick?: () => void\n}\n\nconst Container = ({\n  asset,\n  selected,\n  addAssetToBag,\n  removeAssetFromBag,\n  children,\n  isDisabled,\n  onClick,\n}: CardProps) => {\n  const [hovered, toggleHovered] = useReducer((s) => !s, false)\n  const [href, setHref] = useState(baseHref(asset))\n\n  const providerValue = useMemo(\n    () => ({\n      asset,\n      selected,\n      hovered,\n      toggleHovered,\n      href,\n      setHref,\n      addAssetToBag,\n      removeAssetFromBag,\n    }),\n    [asset, hovered, selected, href, addAssetToBag, removeAssetFromBag]\n  )\n\n  const assetRef = useRef<HTMLDivElement>(null)\n\n  useLayoutEffect(() => {\n    if (hovered && assetRef.current?.matches(':hover') === false) toggleHovered()\n  }, [hovered])\n\n  const handleAssetInBag = (e: MouseEvent) => {\n    if (!asset.notForSale) {\n      e.preventDefault()\n      !selected ? addAssetToBag() : removeAssetFromBag()\n    }\n  }\n\n  const toggleHover = useCallback(() => toggleHovered(), [])\n\n  return (\n    <CardContext.Provider value={providerValue}>\n      <Box\n        position=\"relative\"\n        ref={assetRef}\n        borderRadius={BORDER_RADIUS}\n        className={selected ? styles.selectedCard : styles.card}\n        draggable={false}\n        onMouseEnter={toggleHover}\n        onMouseLeave={toggleHover}\n        transition=\"250\"\n        onClick={isDisabled ? () => null : onClick ?? handleAssetInBag}\n      >\n        {children}\n      </Box>\n    </CardContext.Provider>\n  )\n}\n\nconst ImageContainer = ({ children, isDisabled = false }: { children: ReactNode; isDisabled?: boolean }) => (\n  <StyledImageContainer isDisabled={isDisabled}>{children}</StyledImageContainer>\n)\n\nconst handleUniformAspectRatio = (\n  uniformAspectRatio: UniformAspectRatio,\n  e: React.SyntheticEvent<HTMLElement, Event>,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void,\n  renderedHeight?: number,\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n) => {\n  if (uniformAspectRatio !== UniformAspectRatios.square && setUniformAspectRatio) {\n    const height = e.currentTarget.clientHeight\n    const width = e.currentTarget.clientWidth\n    const aspectRatio = width / height\n\n    if (\n      (!renderedHeight || renderedHeight !== height) &&\n      aspectRatio < 1 &&\n      uniformAspectRatio !== UniformAspectRatios.square &&\n      setRenderedHeight\n    ) {\n      setRenderedHeight(height)\n    }\n\n    if (uniformAspectRatio === UniformAspectRatios.unset) {\n      setUniformAspectRatio(aspectRatio >= 1 ? UniformAspectRatios.square : aspectRatio)\n    } else if (uniformAspectRatio !== aspectRatio) {\n      setUniformAspectRatio(UniformAspectRatios.square)\n      setRenderedHeight && setRenderedHeight(undefined)\n    }\n  }\n}\n\nfunction getHeightFromAspectRatio(uniformAspectRatio: UniformAspectRatio, renderedHeight?: number): number | undefined {\n  return uniformAspectRatio === UniformAspectRatios.square || uniformAspectRatio === UniformAspectRatios.unset\n    ? undefined\n    : renderedHeight\n}\n\ninterface ImageProps {\n  uniformAspectRatio?: UniformAspectRatio\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n  renderedHeight?: number\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n}\n\nconst Image = ({\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n}: ImageProps) => {\n  const { hovered, asset } = useCardContext()\n  const [noContent, setNoContent] = useState(!asset.smallImageUrl && !asset.imageUrl)\n  const [loaded, setLoaded] = useState(false)\n  const isMobile = useIsMobile()\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <Box display=\"flex\" overflow=\"hidden\" borderTopLeftRadius={BORDER_RADIUS} borderTopRightRadius={BORDER_RADIUS}>\n      <Box\n        as=\"img\"\n        width=\"full\"\n        style={{\n          aspectRatio: `${uniformAspectRatio === UniformAspectRatios.square || !setUniformAspectRatio ? '1' : 'auto'}`,\n          transition: 'transform 0.25s ease 0s',\n        }}\n        src={asset.imageUrl || asset.smallImageUrl}\n        objectFit=\"contain\"\n        draggable={false}\n        onError={() => setNoContent(true)}\n        onLoad={(e) => {\n          handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n          setLoaded(true)\n        }}\n        className={clsx(hovered && !isMobile && styles.cardImageHover, !loaded && styles.loadingBackground)}\n      />\n    </Box>\n  )\n}\n\nfunction getMediaAspectRatio(\n  uniformAspectRatio: UniformAspectRatio,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n): string {\n  return uniformAspectRatio === UniformAspectRatios.square || !setUniformAspectRatio ? '1' : 'auto'\n}\n\ninterface MediaProps {\n  shouldPlay: boolean\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\n}\n\nconst Video = ({\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n  shouldPlay,\n  setCurrentTokenPlayingMedia,\n}: MediaProps & ImageProps) => {\n  const vidRef = useRef<HTMLVideoElement>(null)\n  const { hovered, asset } = useCardContext()\n  const [noContent, setNoContent] = useState(!asset.smallImageUrl && !asset.imageUrl)\n  const [imageLoaded, setImageLoaded] = useState(false)\n  const isMobile = useIsMobile()\n\n  if (shouldPlay) {\n    vidRef.current?.play()\n  } else {\n    vidRef.current?.pause()\n  }\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <>\n      <Box display=\"flex\" overflow=\"hidden\">\n        <Box\n          as=\"img\"\n          alt={asset.name || asset.tokenId}\n          width=\"full\"\n          style={{\n            aspectRatio: getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio),\n            transition: 'transform 0.25s ease 0s',\n            willChange: 'transform',\n          }}\n          src={asset.imageUrl || asset.smallImageUrl}\n          objectFit=\"contain\"\n          draggable={false}\n          onError={() => setNoContent(true)}\n          onLoad={(e) => {\n            handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n            setImageLoaded(true)\n          }}\n          visibility={shouldPlay ? 'hidden' : 'visible'}\n          className={clsx(hovered && !isMobile && styles.cardImageHover, !imageLoaded && styles.loadingBackground)}\n        />\n      </Box>\n      {shouldPlay ? (\n        <>\n          <Box className={styles.playbackSwitch}>\n            <PauseButtonIcon\n              width=\"100%\"\n              height=\"100%\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n              className=\"playback-icon\"\n            />\n          </Box>\n          <Box position=\"absolute\" left=\"0\" top=\"0\" display=\"flex\">\n            <Box\n              as=\"video\"\n              ref={vidRef}\n              width=\"full\"\n              style={{\n                aspectRatio: `${\n                  uniformAspectRatio === UniformAspectRatios.square || !setUniformAspectRatio ? '1' : 'auto'\n                }`,\n              }}\n              onEnded={(e) => {\n                e.preventDefault()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n              loop\n              playsInline\n            >\n              <source src={asset.animationUrl} />\n            </Box>\n          </Box>\n        </>\n      ) : (\n        <Box className={styles.playbackSwitch}>\n          {((!isMobile && hovered) || isMobile) && (\n            <PlayButtonIcon\n              width=\"100%\"\n              height=\"100%\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(asset.tokenId)\n              }}\n              className=\"playback-icon\"\n            />\n          )}\n        </Box>\n      )}\n    </>\n  )\n}\n\nconst Audio = ({\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n  shouldPlay,\n  setCurrentTokenPlayingMedia,\n}: MediaProps & ImageProps) => {\n  const audRef = useRef<HTMLAudioElement>(null)\n  const { hovered, asset } = useCardContext()\n  const [noContent, setNoContent] = useState(!asset.smallImageUrl && !asset.imageUrl)\n  const [imageLoaded, setImageLoaded] = useState(false)\n  const isMobile = useIsMobile()\n\n  if (shouldPlay) {\n    audRef.current?.play()\n  } else {\n    audRef.current?.pause()\n  }\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <>\n      <Box display=\"flex\" overflow=\"hidden\">\n        <Box\n          as=\"img\"\n          alt={asset.name || asset.tokenId}\n          width=\"full\"\n          style={{\n            aspectRatio: getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio),\n            transition: 'transform 0.4s ease 0s',\n          }}\n          src={asset.imageUrl || asset.smallImageUrl}\n          objectFit=\"contain\"\n          draggable={false}\n          onError={() => setNoContent(true)}\n          onLoad={(e) => {\n            handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n            setImageLoaded(true)\n          }}\n          className={clsx(hovered && !isMobile && styles.cardImageHover, !imageLoaded && styles.loadingBackground)}\n        />\n      </Box>\n      {shouldPlay ? (\n        <>\n          <Box className={styles.playbackSwitch}>\n            <PauseButtonIcon\n              width=\"100%\"\n              height=\"100%\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n              className=\"playback-icon\"\n            />\n          </Box>\n          <Box position=\"absolute\" left=\"0\" top=\"0\" display=\"flex\">\n            <Box\n              as=\"audio\"\n              ref={audRef}\n              width=\"full\"\n              height=\"full\"\n              onEnded={(e) => {\n                e.preventDefault()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n            >\n              <source src={asset.animationUrl} />\n            </Box>\n          </Box>\n        </>\n      ) : (\n        <Box className={styles.playbackSwitch}>\n          {((!isMobile && hovered) || isMobile) && (\n            <PlayButtonIcon\n              width=\"100%\"\n              height=\"100%\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(asset.tokenId)\n              }}\n              className=\"playback-icon\"\n            />\n          )}\n        </Box>\n      )}\n    </>\n  )\n}\n\n/* -------- CARD DETAILS CONTAINER -------- */\ninterface CardDetailsContainerProps {\n  children: ReactNode\n}\n\nconst DetailsContainer = ({ children }: CardDetailsContainerProps) => {\n  return (\n    <Row\n      position=\"relative\"\n      paddingX=\"12\"\n      paddingTop=\"12\"\n      justifyContent=\"space-between\"\n      flexDirection=\"column\"\n      transition=\"250\"\n    >\n      {children}\n    </Row>\n  )\n}\n\nconst InfoContainer = ({ children }: { children: ReactNode }) => {\n  return (\n    <Box overflow=\"hidden\" width=\"full\">\n      {children}\n    </Box>\n  )\n}\n\nconst TruncatedTextRow = styled(Row)`\n  padding: 2px;\n  white-space: pre;\n  text-overflow: ellipsis;\n  display: block;\n  overflow: hidden;\n  flex: 1;\n`\n\ninterface ProfileNftDetailsProps {\n  asset: WalletAsset\n  hideDetails: boolean\n}\n\nconst ProfileNftDetails = ({ asset, hideDetails }: ProfileNftDetailsProps) => {\n  const assetName = () => {\n    if (!asset.name && !asset.tokenId) return\n    return asset.name ? asset.name : `#${asset.tokenId}`\n  }\n\n  const shouldShowUserListedPrice = !asset.notForSale && asset.asset_contract.tokenType !== NftStandard.Erc1155\n\n  return (\n    <Box overflow=\"hidden\" width=\"full\" flexWrap=\"nowrap\">\n      <PrimaryRow>\n        <PrimaryDetails>\n          <TruncatedTextRow className={bodySmall} style={{ color: themeVars.colors.textSecondary }}>\n            {!!asset.asset_contract.name && <span>{asset.asset_contract.name}</span>}\n          </TruncatedTextRow>\n          {asset.collectionIsVerified && <VerifiedIcon height=\"18px\" width=\"18px\" />}\n        </PrimaryDetails>\n        {!hideDetails && <DetailsLink />}\n      </PrimaryRow>\n      <Row justifyItems=\"flex-start\">\n        <TruncatedTextRow\n          className={body}\n          style={{\n            color: themeVars.colors.textPrimary,\n          }}\n        >\n          {assetName()}\n        </TruncatedTextRow>\n        {asset.susFlag && <Suspicious />}\n      </Row>\n      <TruncatedTextRow className={buttonTextMedium} style={{ color: themeVars.colors.textPrimary }}>\n        {shouldShowUserListedPrice && asset.floor_sell_order_price\n          ? `${floorFormatter(asset.floor_sell_order_price)} ETH`\n          : ' '}\n      </TruncatedTextRow>\n    </Box>\n  )\n}\n\nconst PrimaryRow = ({ children }: { children: ReactNode }) => (\n  <Row gap=\"8\" justifyContent=\"space-between\">\n    {children}\n  </Row>\n)\n\nconst PrimaryDetails = ({ children }: { children: ReactNode }) => (\n  <Row justifyItems=\"center\" overflow=\"hidden\" whiteSpace=\"nowrap\">\n    {children}\n  </Row>\n)\n\nconst PrimaryInfo = ({ children }: { children: ReactNode }) => {\n  return (\n    <Box overflow=\"hidden\" whiteSpace=\"nowrap\" textOverflow=\"ellipsis\" className={body}>\n      {children}\n    </Box>\n  )\n}\n\nconst SecondaryRow = ({ children }: { children: ReactNode }) => (\n  <Row height=\"20\" justifyContent=\"space-between\" marginTop=\"6\">\n    {children}\n  </Row>\n)\n\nconst SecondaryDetails = ({ children }: { children: ReactNode }) => (\n  <Row overflow=\"hidden\" whiteSpace=\"nowrap\">\n    {children}\n  </Row>\n)\n\nconst SecondaryInfo = ({ children }: { children: ReactNode }) => {\n  return (\n    <Box\n      color=\"textPrimary\"\n      overflow=\"hidden\"\n      whiteSpace=\"nowrap\"\n      textOverflow=\"ellipsis\"\n      style={{ lineHeight: '20px' }}\n      className={subhead}\n    >\n      {children}\n    </Box>\n  )\n}\n\nconst TertiaryInfo = ({ children }: { children: ReactNode }) => {\n  return (\n    <Box marginTop=\"8\" color=\"textSecondary\">\n      {children}\n    </Box>\n  )\n}\n\ninterface Erc1155ControlsInterface {\n  quantity: string\n}\n\nconst Erc1155Controls = ({ quantity }: Erc1155ControlsInterface) => {\n  const { addAssetToBag, removeAssetFromBag } = useCardContext()\n\n  return (\n    <Erc1155ControlsRow>\n      <Erc1155ControlsContainer>\n        <Erc1155ControlsInput\n          onClick={(e: MouseEvent) => {\n            e.stopPropagation()\n            removeAssetFromBag()\n          }}\n        >\n          <MinusIconLarge width=\"24px\" height=\"24px\" />\n        </Erc1155ControlsInput>\n        <Erc1155ControlsDisplay>{quantity}</Erc1155ControlsDisplay>\n        <Erc1155ControlsInput\n          onClick={(e: MouseEvent) => {\n            e.stopPropagation()\n            addAssetToBag()\n          }}\n        >\n          <PlusIconLarge width=\"24px\" height=\"24px\" />\n        </Erc1155ControlsInput>\n      </Erc1155ControlsContainer>\n    </Erc1155ControlsRow>\n  )\n}\n\nconst MarketplaceIcon = ({ marketplace }: { marketplace: string }) => {\n  return (\n    <Box\n      as=\"img\"\n      alt={marketplace}\n      src={`/nft/svgs/marketplaces/${marketplace}.svg`}\n      className={styles.marketplaceIcon}\n    />\n  )\n}\n\nconst DetailsLink = () => {\n  const { asset } = useCardContext()\n\n  return (\n    <DetailsLinkContainer\n      href={baseHref(asset)}\n      onClick={(e: MouseEvent) => {\n        e.stopPropagation()\n      }}\n    >\n      <Box data-testid=\"nft-details-link\">Details</Box>\n    </DetailsLinkContainer>\n  )\n}\n\n/* -------- RANKING CARD -------- */\ninterface RankingProps {\n  rarity: Rarity\n  provider: { url?: string; rank?: number }\n  rarityVerified: boolean\n  rarityLogo?: string\n}\n\nconst Ranking = ({ rarity, provider, rarityVerified, rarityLogo }: RankingProps) => {\n  const { asset } = useCardContext()\n\n  return (\n    <>\n      {provider.rank && (\n        <RankingContainer>\n          <MouseoverTooltip\n            text={\n              <Row>\n                <Box display=\"flex\" marginRight=\"4\">\n                  <img src={rarityLogo} alt=\"cardLogo\" width={16} />\n                </Box>\n                <Box width=\"full\" className={bodySmall}>\n                  {rarityVerified\n                    ? `Verified by ${\n                        ('collectionName' in asset && asset.collectionName) ||\n                        ('asset_contract' in asset && asset.asset_contract?.name)\n                      }`\n                    : `Ranking by ${rarity.primaryProvider === 'Genie' ? fallbackProvider : rarity.primaryProvider}`}\n                </Box>\n              </Row>\n            }\n            placement=\"top\"\n          >\n            <Box className={styles.rarityInfo}>\n              <Box paddingTop=\"2\" paddingBottom=\"2\" display=\"flex\">\n                {putCommas(provider.rank)}\n              </Box>\n\n              <Box display=\"flex\" height=\"16\">\n                {rarityVerified ? <RarityVerifiedIcon /> : null}\n              </Box>\n            </Box>\n          </MouseoverTooltip>\n        </RankingContainer>\n      )}\n    </>\n  )\n}\nconst SUSPICIOUS_TEXT = 'Blocked on OpenSea'\n\nconst Suspicious = () => {\n  return (\n    <MouseoverTooltip text={<Box className={bodySmall}>{SUSPICIOUS_TEXT}</Box>} placement=\"top\">\n      <Box display=\"flex\" flexShrink=\"0\" marginLeft=\"4\">\n        <SuspiciousIcon />\n      </Box>\n    </MouseoverTooltip>\n  )\n}\n\nconst Pool = () => {\n  return (\n    <MouseoverTooltip\n      text={\n        <Box className={bodySmall}>\n          This NFT is part of a liquidity pool. Buying this will increase the price of the remaining pooled NFTs.\n        </Box>\n      }\n      placement=\"top\"\n    >\n      <Box display=\"flex\" flexShrink=\"0\" marginLeft=\"4\" color=\"textSecondary\">\n        <PoolIcon width=\"20\" height=\"20\" />\n      </Box>\n    </MouseoverTooltip>\n  )\n}\n\nconst NoContentContainer = ({ height }: { height?: number }) => (\n  <>\n    <Box\n      position=\"relative\"\n      width=\"full\"\n      style={{\n        height: height ? `${height}px` : 'auto',\n        paddingTop: '100%',\n        background: `linear-gradient(90deg, ${themeVars.colors.backgroundSurface} 0%, ${themeVars.colors.backgroundInteractive} 95.83%)`,\n      }}\n    >\n      <Box\n        position=\"absolute\"\n        textAlign=\"center\"\n        left=\"1/2\"\n        top=\"1/2\"\n        style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n        color=\"gray500\"\n        className={body}\n      >\n        Content not\n        <br />\n        available yet\n      </Box>\n    </Box>\n  </>\n)\n\nexport {\n  Audio,\n  Container,\n  DetailsContainer,\n  DetailsLink,\n  Erc1155Controls,\n  Image,\n  ImageContainer,\n  InfoContainer,\n  MarketplaceIcon,\n  Pool,\n  PrimaryDetails,\n  PrimaryInfo,\n  PrimaryRow,\n  ProfileNftDetails,\n  Ranking,\n  SecondaryDetails,\n  SecondaryInfo,\n  SecondaryRow,\n  Suspicious,\n  SUSPICIOUS_TEXT,\n  TertiaryInfo,\n  useAssetMediaType,\n  useNotForSale,\n  Video,\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/collection/Card.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/collection/Card.css.ts.vanilla.css\\\",\\\"source\\\":\\\"LnhzdGpndzEgewogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgLXdlYmtpdC1ib3gtc2l6aW5nOiBib3JkZXItYm94OwogIGJveC1zaGFkb3c6IHZhcigtLXJndzZlenApOwogIGJhY2tncm91bmQtY29sb3I6IHZhcigtLWdlbmllLWNvbG9ycy1iYWNrZ3JvdW5kU3VyZmFjZSk7Cn0KLnhzdGpndzE6YWZ0ZXIgewogIGNvbnRlbnQ6ICIiOwogIHBvc2l0aW9uOiBhYnNvbHV0ZTsKICB0b3A6IDBweDsKICByaWdodDogIDBweDsKICBib3R0b206ICAwcHg7CiAgbGVmdDogMHB4OwogIGJvcmRlcjogIDFweCBzb2xpZDsKICBib3JkZXItcmFkaXVzOiAxNnB4OwogIGJvcmRlci1jb2xvcjogIzVENjc4NTI0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci54c3RqZ3cyIHsKICBiYWNrZ3JvdW5kOiBsaW5lYXItZ3JhZGllbnQoMjcwZGVnLCB2YXIoLS1nZW5pZS1jb2xvcnMtYmFja2dyb3VuZE91dGxpbmUpIDAlLCB2YXIoLS1nZW5pZS1jb2xvcnMtYmFja2dyb3VuZFN1cmZhY2UpIDEwMCUpOwp9Ci54c3RqZ3czIHsKICB0cmFuc2Zvcm06IHNjYWxlKDEuMTUpOwp9Ci54c3RqZ3c1OmFmdGVyIHsKICBib3JkZXI6IDJweCBzb2xpZDsKICBib3JkZXItY29sb3I6IHZhcigtLXJndzZlejIpOwp9Ci54c3RqZ3c3IHsKICBsaW5lLWhlaWdodDogMTZweDsKfQoueHN0amd3OSB7CiAgdmVydGljYWwtYWxpZ246IHRvcDsKfQoueHN0amd3YiB7CiAgbGluZS1oZWlnaHQ6IDEycHg7CiAgbGV0dGVyLXNwYWNpbmc6IDAuMDRlbTsKICBiYWNrZHJvcC1maWx0ZXI6IGJsdXIoNnB4KTsKfQoueHN0amd3ZCB7CiAgbWFyZ2luLWxlZnQ6IGNhbGMoMTAwJSAtIDUwcHgpOwogIHRyYW5zZm9ybTogdHJhbnNsYXRlWSgtNTZweCk7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var card = 'xstjgw1 rgw6ez7l3 rgw6ez27d rgw6ez7ar';\nexport var loadingBackground = 'xstjgw2';\nexport var cardImageHover = 'xstjgw3';\nexport var selectedCard = 'xstjgw5 xstjgw1 rgw6ez7l3 rgw6ez27d rgw6ez7ar rgw6ez4od';\nexport var button = 'xstjgw7 rgw6ez2nj rgw6ez271 rgw6ez43v rgw6ez16v rgw6ez481 rgw6ezwj rgw6ezwq rgw6ezgd rgw6ez7aj rgw6ez7hz rgw6ez46p rgw6ez7nn rgw6ez78z';\nexport var marketplaceIcon = 'xstjgw9 rgw6ez447 rgw6ez121 rgw6ez18v rgw6ez7a7 rgw6ez3wv rgw6ezlj';\nexport var rarityInfo = 'xstjgwb rgw6ez2c7 rgw6ez2hp rgw6ez43v rgw6ez7a7 rgw6ez18v rgw6ez4dj rgw6ez4nv rgw6ezaj rgw6ezd1';\nexport var playbackSwitch = 'xstjgwd rgw6ez47p rgw6ez13d rgw6ez1a7 rgw6ez3p7';","import type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { addressesByNetwork, SupportedChainId } from '@looksrare/sdk'\nimport { LOOKSRARE_MARKETPLACE_CONTRACT, X2Y2_TRANSFER_CONTRACT } from 'nft/queries'\nimport { OPENSEA_CROSS_CHAIN_CONDUIT } from 'nft/queries/openSea'\nimport { AssetRow, CollectionRow, ListingMarket, ListingRow, ListingStatus, WalletAsset } from 'nft/types'\nimport { approveCollection, LOOKS_RARE_CREATOR_BASIS_POINTS, signListing } from 'nft/utils/listNfts'\nimport { Dispatch } from 'react'\n\nconst updateStatus = ({\n  listing,\n  newStatus,\n  rows,\n  setRows,\n  callback,\n}: {\n  listing: AssetRow\n  newStatus: ListingStatus\n  rows: AssetRow[]\n  setRows: Dispatch<AssetRow[]>\n  callback?: () => Promise<void>\n}) => {\n  const rowsCopy = [...rows]\n  const index = rows.findIndex((n) => n === listing)\n  listing.status = newStatus\n  if (callback) listing.callback = callback\n  rowsCopy[index] = listing\n  setRows(rowsCopy)\n}\n\nexport async function approveCollectionRow(\n  collectionRow: CollectionRow,\n  signer: JsonRpcSigner,\n  setCollectionStatusAndCallback: (\n    collection: CollectionRow,\n    status: ListingStatus,\n    callback?: () => Promise<void>\n  ) => void,\n  pauseAllRows?: () => void\n) {\n  const callback = () => approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback, pauseAllRows)\n  setCollectionStatusAndCallback(collectionRow, ListingStatus.SIGNING, callback)\n  const { marketplace, collectionAddress } = collectionRow\n  const addresses = addressesByNetwork[SupportedChainId.MAINNET]\n  const spender =\n    marketplace.name === 'OpenSea'\n      ? OPENSEA_CROSS_CHAIN_CONDUIT\n      : marketplace.name === 'Rarible'\n      ? LOOKSRARE_MARKETPLACE_CONTRACT\n      : marketplace.name === 'X2Y2'\n      ? X2Y2_TRANSFER_CONTRACT\n      : addresses.TRANSFER_MANAGER_ERC721\n  !!collectionAddress &&\n    (await approveCollection(spender, collectionAddress, signer, (newStatus: ListingStatus) =>\n      setCollectionStatusAndCallback(collectionRow, newStatus, callback)\n    ))\n  if (\n    (collectionRow.status === ListingStatus.REJECTED || collectionRow.status === ListingStatus.FAILED) &&\n    pauseAllRows\n  )\n    pauseAllRows()\n}\n\nexport async function signListingRow(\n  listing: ListingRow,\n  signer: JsonRpcSigner,\n  provider: Web3Provider,\n  getLooksRareNonce: () => number,\n  setLooksRareNonce: (nonce: number) => void,\n  setListingStatusAndCallback: (listing: ListingRow, status: ListingStatus, callback?: () => Promise<void>) => void,\n  pauseAllRows?: () => void\n) {\n  const looksRareNonce = getLooksRareNonce()\n  const callback = () => {\n    return signListingRow(\n      listing,\n      signer,\n      provider,\n      getLooksRareNonce,\n      setLooksRareNonce,\n      setListingStatusAndCallback,\n      pauseAllRows\n    )\n  }\n  setListingStatusAndCallback(listing, ListingStatus.SIGNING, callback)\n  const { asset, marketplace } = listing\n  const res = await signListing(marketplace, asset, signer, provider, looksRareNonce, (newStatus: ListingStatus) =>\n    setListingStatusAndCallback(listing, newStatus, callback)\n  )\n  if (listing.status === ListingStatus.REJECTED && pauseAllRows) {\n    pauseAllRows()\n  } else {\n    res && listing.marketplace.name === 'LooksRare' && setLooksRareNonce(looksRareNonce + 1)\n  }\n}\n\nexport const getTotalEthValue = (sellAssets: WalletAsset[]) => {\n  const total = sellAssets.reduce((total, asset: WalletAsset) => {\n    if (asset.newListings?.length) {\n      const maxListing = asset.newListings.reduce((a, b) => ((a.price ?? 0) > (b.price ?? 0) ? a : b))\n      // LooksRare is a unique case where creator royalties are a flat 0.5% or 50 basis points\n      const maxFee =\n        maxListing.marketplace.fee +\n        (maxListing.marketplace.name === 'LooksRare' ? LOOKS_RARE_CREATOR_BASIS_POINTS : asset?.basisPoints ?? 0) / 100\n      return total + (maxListing.price ?? 0) - (maxListing.price ?? 0) * (maxFee / 100)\n    }\n    return total\n  }, 0)\n  return total ? Math.round(total * 10000 + Number.EPSILON) / 10000 : 0\n}\n\nexport const getListings = (sellAssets: WalletAsset[]): [CollectionRow[], ListingRow[]] => {\n  const newCollectionsToApprove: CollectionRow[] = []\n\n  const newListings: ListingRow[] = []\n  sellAssets.forEach((asset) => {\n    asset.marketplaces?.forEach((marketplace: ListingMarket) => {\n      const newListing = {\n        images: [asset.smallImageUrl, marketplace.icon],\n        name: asset.name || `#${asset.tokenId}`,\n        status: ListingStatus.DEFINED,\n        asset,\n        marketplace,\n        price: asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price,\n      }\n      newListings.push(newListing)\n      if (\n        !newCollectionsToApprove.some(\n          (collectionRow: CollectionRow) =>\n            collectionRow.collectionAddress === asset.asset_contract.address &&\n            collectionRow.marketplace.name === marketplace.name\n        )\n      ) {\n        const newCollectionRow = {\n          images: [asset.asset_contract.image_url, marketplace.icon],\n          name: asset.asset_contract.name,\n          status: ListingStatus.DEFINED,\n          collectionAddress: asset.asset_contract.address,\n          isVerified: asset.collectionIsVerified,\n          marketplace,\n        }\n        newCollectionsToApprove.push(newCollectionRow)\n      }\n    })\n  })\n  return [newCollectionsToApprove, newListings]\n}\n\ntype ListingState = {\n  allListingsPending: boolean\n  allListingsDefined: boolean\n  allListingsApproved: boolean\n  allCollectionsPending: boolean\n  allCollectionsDefined: boolean\n  anyActiveSigning: boolean\n  anyActiveFailures: boolean\n  anyActiveRejections: boolean\n  anyPaused: boolean\n}\n\nexport const getListingState = (\n  collectionsRequiringApproval: CollectionRow[],\n  listings: ListingRow[]\n): ListingState => {\n  let allListingsPending = true\n  let allListingsDefined = true\n  let allListingsApproved = true\n  let allCollectionsPending = true\n  let allCollectionsDefined = true\n  let anyActiveSigning = false\n  let anyActiveFailures = false\n  let anyActiveRejections = false\n  let anyPaused = false\n\n  if (collectionsRequiringApproval.length === 0) {\n    allCollectionsDefined = allCollectionsPending = false\n  }\n  for (const collection of collectionsRequiringApproval) {\n    if (collection.status !== ListingStatus.PENDING) allCollectionsPending = false\n    if (collection.status !== ListingStatus.DEFINED) allCollectionsDefined = false\n    if (collection.status === ListingStatus.SIGNING) anyActiveSigning = true\n    else if (collection.status === ListingStatus.FAILED) anyActiveFailures = true\n    else if (collection.status === ListingStatus.REJECTED) anyActiveRejections = true\n    else if (collection.status === ListingStatus.PAUSED) anyPaused = true\n  }\n\n  if (listings.length === 0) {\n    allListingsApproved = allListingsDefined = allListingsPending = false\n  }\n  for (const listing of listings) {\n    if (listing.status !== ListingStatus.PENDING) allListingsPending = false\n    if (listing.status !== ListingStatus.DEFINED) allListingsDefined = false\n    if (listing.status !== ListingStatus.APPROVED) allListingsApproved = false\n    if (listing.status === ListingStatus.SIGNING) anyActiveSigning = true\n    else if (listing.status === ListingStatus.FAILED) anyActiveFailures = true\n    else if (listing.status === ListingStatus.REJECTED) anyActiveRejections = true\n    else if (listing.status === ListingStatus.PAUSED) anyPaused = true\n  }\n  return {\n    allListingsPending,\n    allListingsDefined,\n    allListingsApproved,\n    allCollectionsPending,\n    allCollectionsDefined,\n    anyActiveSigning,\n    anyActiveFailures,\n    anyActiveRejections,\n    anyPaused,\n  }\n}\n\nexport const verifyStatus = (status: ListingStatus) => {\n  return status !== ListingStatus.PAUSED && status !== ListingStatus.APPROVED\n}\n\nexport const pauseRow = (row: AssetRow, rows: AssetRow[], setRows: Dispatch<AssetRow[]>) => {\n  if (row.status === ListingStatus.PENDING || row.status === ListingStatus.DEFINED)\n    updateStatus({\n      listing: row,\n      newStatus: ListingStatus.PAUSED,\n      rows,\n      setRows,\n    })\n}\n\nexport const resetRow = (row: AssetRow, rows: AssetRow[], setRows: Dispatch<AssetRow[]>) => {\n  if (\n    row.status === ListingStatus.PAUSED ||\n    row.status === ListingStatus.FAILED ||\n    row.status === ListingStatus.REJECTED\n  )\n    updateStatus({\n      listing: row,\n      newStatus: ListingStatus.DEFINED,\n      rows,\n      setRows,\n    })\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/profile/ListingModal.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/profile/ListingModal.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xM2J4ZzQyIHsKICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpOwogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEzYnhnNDggewogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgbWFyZ2luLWxlZnQ6IC0ycHg7CiAgbWFyZ2luLXJpZ2h0OiA0cHg7Cn0KLl8xM2J4ZzRhIHsKICBib3gtc2hhZG93OiAwcHggNHB4IDE2cHggcmdiYSgxMCwgMTAsIDU5LCAwLjIpOwp9\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var chevron = 'rgw6ez19p rgw6ez12v rgw6ez7nn rgw6ezpv rgw6ezq7';\nexport var chevronDown = '_13bxg42';\nexport var sectionDivider = 'rgw6ez7av rgw6ezwj rgw6ez16v rgw6ez7in rgw6ez79b rgw6ez501';\nexport var button = 'rgw6ez2cv rgw6ez2d8 rgw6ez2id rgw6ez2iq rgw6ez2np rgw6ez2o8 rgw6ez277 rgw6ez27q rgw6ez45d rgw6ezd1 rgw6ezb1 rgw6ezb8 rgw6eze7 rgw6ezee rgw6ez43v rgw6ez3j rgw6ez46p rgw6ez4v rgw6ez7aj';\nexport var listingModalIcon = '_13bxg48 rgw6ez7ir rgw6ez79b rgw6ez507';\nexport var warningTooltip = '_13bxg4a rgw6ez2nj rgw6ez2i1 rgw6ez271 rgw6ez2cv';\nexport var listingSectionBorder = 'rgw6ez2t1 rgw6ez7ab rgw6ez501 rgw6ez79b rgw6ez7ir';","import { IRoute, Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { TokenAmountInput, TokenTradeRouteInput, TradePoolInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { InterfaceTrade } from 'state/routing/types'\n\ninterface SwapAmounts {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\ninterface TradeTokenInputAmounts {\n  inputAmount: TokenAmountInput\n  outputAmount: TokenAmountInput\n}\n\ninterface Swap {\n  route: IRoute<Currency, Currency, Pair | Pool>\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\n  return {\n    inputAmount: {\n      amount: swapAmounts.inputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.inputAmount.currency.isToken\n          ? swapAmounts.inputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.inputAmount.currency.chainId,\n        decimals: swapAmounts.inputAmount.currency.decimals,\n        isNative: swapAmounts.inputAmount.currency.isNative,\n      },\n    },\n    outputAmount: {\n      amount: swapAmounts.outputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.outputAmount.currency.isToken\n          ? swapAmounts.outputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.outputAmount.currency.chainId,\n        decimals: swapAmounts.outputAmount.currency.decimals,\n        isNative: swapAmounts.outputAmount.currency.isNative,\n      },\n    },\n  }\n}\n\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\n  const isPool = 'fee' in pool\n\n  return {\n    pair: !isPool\n      ? {\n          tokenAmountA: {\n            amount: pool.reserve0.quotient.toString(),\n            token: {\n              address: pool.token0.address,\n              chainId: pool.token0.chainId,\n              decimals: pool.token0.decimals,\n              isNative: pool.token0.isNative,\n            },\n          },\n          tokenAmountB: {\n            amount: pool.reserve1.quotient.toString(),\n            token: {\n              address: pool.token1.address,\n              chainId: pool.token1.chainId,\n              decimals: pool.token1.decimals,\n              isNative: pool.token1.isNative,\n            },\n          },\n        }\n      : undefined,\n    pool: isPool\n      ? {\n          fee: pool.fee,\n          liquidity: pool.liquidity.toString(),\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\n          tickCurrent: pool.tickCurrent.toString(),\n          tokenA: {\n            address: pool.token0.address,\n            chainId: pool.token0.chainId,\n            decimals: pool.token0.decimals,\n            isNative: pool.token0.isNative,\n          },\n          tokenB: {\n            address: pool.token1.address,\n            chainId: pool.token1.chainId,\n            decimals: pool.token1.decimals,\n            isNative: pool.token1.isNative,\n          },\n        }\n      : undefined,\n  }\n}\n\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\n  return pools.map((pool) => buildPool(pool))\n}\n\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\n  return {\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\n    pools: buildPools(swap.route.pools),\n  }\n}\n\nexport function buildAllTradeRouteInputs(trade: InterfaceTrade<Currency, Currency, TradeType>): {\n  mixedTokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\n  v2TokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\n  v3TokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\n} {\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n\n  const swaps = trade.swaps\n\n  for (const swap of swaps) {\n    if (swap.route.protocol === Protocol.MIXED) {\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else if (swap.route.protocol === Protocol.V2) {\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else {\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    }\n  }\n\n  return {\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\n  }\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\nimport create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface TokenInputState {\n  inputCurrency: Currency | undefined\n  setInputCurrency: (currency: Currency | undefined) => void\n  clearInputCurrency: () => void\n  tokenTradeInput: TokenTradeInput | undefined\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\n}\n\nexport const useTokenInput = create<TokenInputState>()(\n  devtools(\n    (set) => ({\n      inputCurrency: undefined,\n      tokenTradeInput: undefined,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\n    }),\n    { name: 'useTokenInput' }\n  )\n)\n","import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\nimport { Allowance } from 'hooks/usePermit2Allowance'\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\nimport { useEffect } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport { useTokenInput } from './useTokenInput'\n\nexport default function usePayWithAnyTokenSwap(\n  trade?: InterfaceTrade<Currency, Currency, TradeType> | undefined,\n  allowance?: Allowance,\n  allowedSlippage?: Percent\n) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\n  const hasRoutes = !!trade && trade.routes\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\n  const hasAllowance = !!allowedSlippage && !!allowance\n\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(undefined)\n      return\n    }\n\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\n\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\n      buildAllTradeRouteInputs(trade)\n\n    const routes: TokenTradeRoutesInput = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs,\n    }\n\n    const permitInput: PermitInput | undefined =\n      'permitSignature' in allowance && allowance.permitSignature\n        ? {\n            details: {\n              amount: allowance.permitSignature.details.amount.toString(),\n              expiration: allowance.permitSignature.details.expiration.toString(),\n              nonce: allowance.permitSignature.details.nonce.toString(),\n              token: allowance.permitSignature.details.token,\n            },\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n            signature: allowance.permitSignature.signature,\n            spender: allowance.permitSignature.spender,\n          }\n        : undefined\n\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative,\n        },\n      },\n    })\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { parseEther } from '@ethersproject/units'\nimport { t, Trans } from '@lingui/macro'\nimport { sendAnalyticsEvent, TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { formatPriceImpact } from '@uniswap/conedison/format'\nimport { Currency, CurrencyAmount, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport Column from 'components/Column'\nimport Loader from 'components/Loader'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Row from 'components/Row'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { SupportedChainId } from 'constants/chains'\nimport { usePayWithAnyTokenEnabled } from 'featureFlags/flags/payWithAnyToken'\nimport { useCurrency } from 'hooks/Tokens'\nimport { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useBag } from 'nft/hooks/useBag'\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\nimport usePermit2Approval from 'nft/hooks/usePermit2Approval'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport { useToggleWalletModal } from 'state/application/hooks'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { computeFiatValuePriceImpact } from 'utils/computeFiatValuePriceImpact'\nimport { warningSeverity } from 'utils/prices'\nimport { switchChain } from 'utils/switchChain'\nimport shallow from 'zustand/shallow'\n\nconst LOW_SEVERITY_THRESHOLD = 1\nconst MEDIUM_SEVERITY_THRESHOLD = 3\n\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\n  color: ${({ theme }) => theme.textPrimary};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst FooterHeader = styled(Column)<{ usingPayWithAnyToken?: boolean }>`\n  padding-top: 8px;\n  padding-bottom: ${({ usingPayWithAnyToken }) => (usingPayWithAnyToken ? '16px' : '20px')};\n`\n\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`\n\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow-x: hidden;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`\n\nconst HelperText = styled(ThemedText.Caption)<{ $color: string }>`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`\n\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`\n\nconst PayButton = styled.button<{ $backgroundColor: string; $color: string }>`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 600;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 1rem;\n  align-self: end;\n`\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`\n\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 500;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface ActionButtonProps {\n  disabled?: boolean\n  onClick: () => void\n  backgroundColor: string\n  textColor: string\n}\n\nconst ActionButton = ({\n  disabled,\n  children,\n  onClick,\n  backgroundColor,\n  textColor,\n}: PropsWithChildren<ActionButtonProps>) => {\n  return (\n    <PayButton disabled={disabled} onClick={onClick} $backgroundColor={backgroundColor} $color={textColor}>\n      {children}\n    </PayButton>\n  )\n}\n\ninterface HelperTextProps {\n  color: string\n}\n\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <HelperText lineHeight=\"16px\" $color={color}>\n      {children}\n    </HelperText>\n  )\n}\n\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade,\n}: {\n  usingPayWithAnyToken: boolean\n  totalEthPrice: BigNumber\n  activeCurrency: Currency | undefined | null\n  tradeState: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n}) => {\n  if (!usingPayWithAnyToken) {\n    return (\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"500\">\n        {formatWeiToDecimal(totalEthPrice.toString())}\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  if (tradeState === TradeState.LOADING) {\n    return (\n      <ThemedText.BodyPrimary color=\"textTertiary\" lineHeight=\"20px\" fontWeight=\"500\">\n        <Trans>Fetching price...</Trans>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <ValueText color={tradeState === TradeState.SYNCING ? 'textTertiary' : 'textPrimary'}>\n      {ethNumberStandardFormatter(trade?.inputAmount.toExact())}\n    </ValueText>\n  )\n}\n\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  priceImpactColor,\n  tradeState,\n  usingPayWithAnyToken,\n}: {\n  usdcValue: CurrencyAmount<Token> | null\n  priceImpact: Percent | undefined\n  priceImpactColor: string | undefined\n  tradeState: TradeState\n  usingPayWithAnyToken: boolean\n}) => {\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null\n    }\n\n    return <FiatLoadingBubble />\n  }\n\n  return (\n    <PriceImpactContainer>\n      {priceImpact && priceImpactColor && (\n        <>\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\n            <PriceImpactRow>\n              <AlertTriangle color={priceImpactColor} size=\"16px\" />\n              <ThemedText.BodySmall style={{ color: priceImpactColor }} lineHeight=\"20px\">\n                (<Trans>{formatPriceImpact(priceImpact)}</Trans>)\n              </ThemedText.BodySmall>\n            </PriceImpactRow>\n          </MouseoverTooltip>\n        </>\n      )}\n      <ThemedText.BodySmall color=\"textTertiary\" lineHeight=\"20px\">\n        {`${ethNumberStandardFormatter(usdcValue?.toExact(), true)}`}\n      </ThemedText.BodySmall>\n    </PriceImpactContainer>\n  )\n}\n\ninterface BagFooterProps {\n  totalEthPrice: BigNumber\n  fetchAssets: () => void\n  eventProperties: Record<string, unknown>\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\nexport const BagFooter = ({ totalEthPrice, fetchAssets, eventProperties }: BagFooterProps) => {\n  const toggleWalletModal = useToggleWalletModal()\n  const theme = useTheme()\n  const { account, chainId, connector } = useWeb3React()\n  const connected = Boolean(account && chainId)\n  const shouldUsePayWithAnyToken = usePayWithAnyTokenEnabled()\n  const inputCurrency = useTokenInput((state) => state.inputCurrency)\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\n  const defaultCurrency = useCurrency('ETH')\n  const inputCurrencyBalance = useTokenBalance(\n    account ?? undefined,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\n  )\n\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  } = useBag(\n    ({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\n      isLocked,\n      bagStatus,\n      setBagExpanded,\n      setBagStatus,\n    }),\n    shallow\n  )\n\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\n\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n  const activeCurrency = inputCurrency ?? defaultCurrency\n  const usingPayWithAnyToken = !!inputCurrency && shouldUsePayWithAnyToken && chainId === SupportedChainId.MAINNET\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage,\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\n  const { allowance, isAllowancePending, isApprovalLoading, updateAllowance } = usePermit2Approval(\n    trade?.inputAmount.currency.isToken ? (trade?.inputAmount as CurrencyAmount<Token>) : undefined,\n    maximumAmountIn,\n    shouldUsePayWithAnyToken\n  )\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\n\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\n  const stablecoinPriceImpact = useMemo(\n    () =>\n      tradeState === TradeState.SYNCING || !trade\n        ? undefined\n        : computeFiatValuePriceImpact(fiatValueTradeInput, fiatValueTradeOutput),\n    [fiatValueTradeInput, fiatValueTradeOutput, tradeState, trade]\n  )\n  const { priceImpactWarning, priceImpactColor } = useMemo(() => {\n    const severity = warningSeverity(stablecoinPriceImpact)\n\n    if (severity < LOW_SEVERITY_THRESHOLD) {\n      return { priceImpactWarning: false, priceImpactColor: undefined }\n    }\n\n    if (severity < MEDIUM_SEVERITY_THRESHOLD) {\n      return { priceImpactWarning: false, priceImpactColor: theme.accentWarning }\n    }\n\n    return { priceImpactWarning: true, priceImpactColor: theme.accentCritical }\n  }, [stablecoinPriceImpact, theme.accentCritical, theme.accentWarning])\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== SupportedChainId.MAINNET) {\n      return undefined\n    }\n\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount\n\n      if (!inputCurrencyBalance || !inputAmount) {\n        return undefined\n      }\n\n      return !inputCurrencyBalance.lessThan(inputAmount)\n    }\n\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\n\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG)\n  }, [inputCurrency, setBagStatus])\n\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor,\n  } = useMemo(() => {\n    let handleClick = fetchAssets\n    let buttonText = <Trans>Something went wrong</Trans>\n    let disabled = true\n    let warningText = undefined\n    let warningTextColor = theme.accentWarning\n    let helperText = undefined\n    let helperTextColor = theme.textSecondary\n    let buttonColor = theme.accentAction\n    let buttonTextColor = theme.accentTextLightPrimary\n\n    if (connected && chainId !== SupportedChainId.MAINNET) {\n      handleClick = () => switchChain(connector, SupportedChainId.MAINNET)\n      buttonText = <Trans>Switch networks</Trans>\n      disabled = false\n      warningText = <Trans>Wrong network</Trans>\n    } else if (sufficientBalance === false) {\n      buttonText = <Trans>Pay</Trans>\n      disabled = true\n      warningText = <Trans>Insufficient funds</Trans>\n    } else if (bagStatus === BagStatus.WARNING) {\n      warningText = <Trans>Something went wrong. Please try again.</Trans>\n    } else if (!connected) {\n      handleClick = () => {\n        toggleWalletModal()\n        setBagExpanded({ bagExpanded: false })\n      }\n      disabled = false\n      buttonText = <Trans>Connect wallet</Trans>\n    } else if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      disabled = true\n      buttonText = <Trans>Proceed in wallet</Trans>\n    } else if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      disabled = true\n      buttonText = <Trans>Transaction pending</Trans>\n    } else if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      disabled = true\n      buttonText = <Trans>Fetching Route</Trans>\n\n      if (tradeState === TradeState.INVALID) {\n        buttonText = <Trans>Pay</Trans>\n      }\n\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        buttonText = <Trans>Insufficient liquidity</Trans>\n        buttonColor = theme.backgroundInteractive\n        buttonTextColor = theme.textPrimary\n        helperText = <Trans>Insufficient pool liquidity to complete transaction</Trans>\n      }\n    } else if (allowance.state === AllowanceState.REQUIRED || allowance.state === AllowanceState.LOADING) {\n      handleClick = () => updateAllowance()\n      disabled = isAllowancePending || isApprovalLoading || allowance.state === AllowanceState.LOADING\n\n      if (allowance.state === AllowanceState.LOADING) {\n        buttonText = <Trans>Loading Allowance</Trans>\n      } else if (isAllowancePending) {\n        buttonText = <Trans>Approve in your wallet</Trans>\n      } else if (isApprovalLoading) {\n        buttonText = <Trans>Approval pending</Trans>\n      } else {\n        helperText = <Trans>An approval is needed to use this token. </Trans>\n        buttonText = <Trans>Approve</Trans>\n      }\n    } else if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      disabled = false\n      warningTextColor = theme.accentAction\n      warningText = <Trans>Price updated</Trans>\n      buttonText = <Trans>Pay</Trans>\n    } else if (priceImpactWarning && priceImpactColor) {\n      disabled = false\n      buttonColor = priceImpactColor\n      helperText = <Trans>Price impact warning</Trans>\n      helperTextColor = priceImpactColor\n      buttonText = <Trans>Pay Anyway</Trans>\n    } else if (sufficientBalance === true) {\n      disabled = false\n      buttonText = <Trans>Pay</Trans>\n      helperText = usingPayWithAnyToken ? <Trans>Refunds for unavailable items will be given in ETH</Trans> : undefined\n    }\n\n    return {\n      buttonText,\n      buttonTextColor,\n      disabled,\n      warningText,\n      warningTextColor,\n      helperText,\n      helperTextColor,\n      handleClick,\n      buttonColor,\n    }\n  }, [\n    fetchAssets,\n    theme.accentWarning,\n    theme.textSecondary,\n    theme.accentAction,\n    theme.accentTextLightPrimary,\n    theme.backgroundInteractive,\n    theme.textPrimary,\n    connected,\n    chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    allowance.state,\n    priceImpactWarning,\n    priceImpactColor,\n    connector,\n    toggleWalletModal,\n    setBagExpanded,\n    isAllowancePending,\n    isApprovalLoading,\n    updateAllowance,\n  ])\n\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties,\n  }\n\n  return (\n    <FooterContainer>\n      <Footer>\n        {shouldUsePayWithAnyToken && (\n          <FooterHeader gap=\"xs\" usingPayWithAnyToken={shouldUsePayWithAnyToken}>\n            <CurrencyRow>\n              <Column gap=\"xs\">\n                <ThemedText.SubHeaderSmall>\n                  <Trans>Pay with</Trans>\n                </ThemedText.SubHeaderSmall>\n                <CurrencyInput\n                  onClick={() => {\n                    if (!bagIsLocked) {\n                      setTokenSelectorOpen(true)\n                      sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\n                    }\n                  }}\n                >\n                  <CurrencyLogo currency={activeCurrency} size=\"24px\" />\n                  <ThemedText.HeadlineSmall fontWeight={500} lineHeight=\"24px\">\n                    {activeCurrency?.symbol}\n                  </ThemedText.HeadlineSmall>\n                  <ChevronDown size={20} color={theme.textSecondary} />\n                </CurrencyInput>\n              </Column>\n              <TotalColumn gap=\"xs\">\n                <ThemedText.SubHeaderSmall marginBottom=\"4px\">\n                  <Trans>Total</Trans>\n                </ThemedText.SubHeaderSmall>\n                <InputCurrencyValue\n                  usingPayWithAnyToken={usingPayWithAnyToken}\n                  totalEthPrice={totalEthPrice}\n                  activeCurrency={activeCurrency}\n                  tradeState={tradeState}\n                  trade={trade}\n                />\n              </TotalColumn>\n            </CurrencyRow>\n            <FiatValue\n              usdcValue={usdcValue}\n              priceImpact={stablecoinPriceImpact}\n              priceImpactColor={priceImpactColor}\n              tradeState={tradeState}\n              usingPayWithAnyToken={usingPayWithAnyToken}\n            />\n          </FooterHeader>\n        )}\n        {!shouldUsePayWithAnyToken && (\n          <FooterHeader gap=\"xs\">\n            <Row justify=\"space-between\">\n              <div>\n                <ThemedText.HeadlineSmall>Total</ThemedText.HeadlineSmall>\n              </div>\n              <div>\n                <ThemedText.HeadlineSmall>\n                  {formatWeiToDecimal(totalEthPrice.toString())}\n                  &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n                </ThemedText.HeadlineSmall>\n              </div>\n            </Row>\n            <FiatValue\n              usdcValue={usdcValue}\n              priceImpact={stablecoinPriceImpact}\n              priceImpactColor={priceImpactColor}\n              tradeState={tradeState}\n              usingPayWithAnyToken={usingPayWithAnyToken}\n            />\n          </FooterHeader>\n        )}\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={NFTEventName.NFT_BUY_BAG_PAY}\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...traceEventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning color={warningTextColor}>{warningText}</Warning>\n          <Helper color={helperTextColor}>{helperText}</Helper>\n          <ActionButton\n            onClick={handleClick}\n            disabled={disabled}\n            backgroundColor={buttonColor}\n            textColor={buttonTextColor}\n          >\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n      <CurrencySearchModal\n        isOpen={tokenSelectorOpen}\n        onDismiss={() => setTokenSelectorOpen(false)}\n        onCurrencySelect={(currency: Currency) => {\n          setInputCurrency(currency.isNative ? undefined : currency)\n          if (currency.isToken) {\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n              token_address: currency.address,\n              token_symbol: currency.symbol,\n            })\n          }\n        }}\n        selectedCurrency={activeCurrency ?? undefined}\n        onlyShowCurrenciesWithBalance={true}\n      />\n    </FooterContainer>\n  )\n}\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useBestTrade } from 'hooks/useBestTrade'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n  maximumAmountIn: CurrencyAmount<Token> | undefined\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useBestTrade(TradeType.EXACT_OUTPUT, parsedOutputAmount, inputCurrency ?? undefined)\n  const allowedSlippage = useAutoSlippageTolerance(trade)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n","import { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { InterfaceEventName } from '@uniswap/analytics-events'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useCallback, useMemo, useState } from 'react'\nimport invariant from 'tiny-invariant'\n\nexport default function usePermit2Approval(\n  amount?: CurrencyAmount<Token>,\n  maximumAmount?: CurrencyAmount<Token>,\n  enabled?: boolean\n) {\n  const { chainId } = useWeb3React()\n\n  const allowance = usePermit2Allowance(\n    enabled ? maximumAmount ?? (amount?.currency.isToken ? (amount as CurrencyAmount<Token>) : undefined) : undefined,\n    enabled && chainId ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\n  )\n  const isApprovalLoading = allowance.state === AllowanceState.REQUIRED && allowance.isApprovalLoading\n  const [isAllowancePending, setIsAllowancePending] = useState(false)\n  const updateAllowance = useCallback(async () => {\n    invariant(allowance.state === AllowanceState.REQUIRED)\n    setIsAllowancePending(true)\n    try {\n      await allowance.approveAndPermit()\n      sendAnalyticsEvent(InterfaceEventName.APPROVE_TOKEN_TXN_SUBMITTED, {\n        chain_id: chainId,\n        token_symbol: maximumAmount?.currency.symbol,\n        token_address: maximumAmount?.currency.address,\n      })\n    } catch (e) {\n      console.error(e)\n    } finally {\n      setIsAllowancePending(false)\n    }\n  }, [allowance, chainId, maximumAmount?.currency.address, maximumAmount?.currency.symbol])\n\n  return useMemo(() => {\n    return {\n      allowance,\n      isApprovalLoading,\n      isAllowancePending,\n      updateAllowance,\n    }\n  }, [allowance, isAllowancePending, isApprovalLoading, updateAllowance])\n}\n","import clsx from 'clsx'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ApprovedCheckmarkIcon, ChevronUpIcon, FailedListingIcon, LoadingIcon } from 'nft/components/icons'\nimport { badge, bodySmall, buttonTextSmall, subhead } from 'nft/css/common.css'\nimport { useSellAsset } from 'nft/hooks'\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\nimport { formatEthPrice, numberToWei } from 'nft/utils/currency'\nimport { useEffect, useState } from 'react'\n\nimport * as styles from './ListingModal.css'\n\nexport const ListingSection = ({\n  sectionTitle,\n  caption = undefined,\n  title = undefined,\n  rows,\n  index,\n  openIndex,\n  isSuccessScreen = false,\n}: {\n  sectionTitle: string\n  caption?: string\n  title?: string\n  rows: AssetRow[]\n  index: number\n  openIndex: number\n  isSuccessScreen?: boolean\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const notAllApproved = rows.some((row: AssetRow) => row.status !== ListingStatus.APPROVED)\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\n\n  const removeRow = (row: any) => {\n    // collections\n    if (index === 1) {\n      for (const asset of sellAssets)\n        if (asset.asset_contract.address === row.collectionAddress) removeAssetMarketplace(asset, row.marketplace)\n    }\n    // listings\n    else removeAssetMarketplace(row.asset, row.marketplace)\n  }\n\n  useEffect(() => {\n    setIsOpen(index === openIndex)\n  }, [index, openIndex])\n\n  function getListingRowPrice(row: AssetRow): number | undefined {\n    const listingRow = row as ListingRow\n    const newListings = listingRow.asset.newListings\n    return newListings?.find((listing) => listing.marketplace.name === listingRow.marketplace.name)?.price ?? 0\n  }\n\n  const allApproved = !notAllApproved && rows.length > 0 && !isSuccessScreen\n\n  return (\n    <Row\n      flexWrap=\"wrap\"\n      className={subhead}\n      marginTop=\"10\"\n      marginBottom=\"10\"\n      onClick={() => rows.length > 0 && setIsOpen(!isOpen)}\n      color={allApproved ? 'accentSuccess' : 'textPrimary'}\n    >\n      {allApproved && <ApprovedCheckmarkIcon style={{ marginRight: '8px' }} />}\n      {sectionTitle}\n      {!isSuccessScreen && <ChevronUpIcon className={clsx(`${isOpen ? '' : styles.chevronDown} ${styles.chevron}`)} />}\n      {(isOpen || isSuccessScreen) && (\n        <Column\n          gap=\"12\"\n          width=\"full\"\n          paddingTop={isSuccessScreen ? '28' : 'auto'}\n          className={clsx(!isSuccessScreen && styles.listingSectionBorder)}\n        >\n          {caption && (\n            <Box color=\"textPrimary\" fontWeight=\"normal\" className={caption}>\n              {caption}\n            </Box>\n          )}\n          {title && (\n            <Box color=\"textSecondary\" className={badge}>\n              {title}\n            </Box>\n          )}\n          <Column gap=\"8\">\n            {rows.map((row: AssetRow, index) => {\n              return (\n                <Column key={index} gap=\"8\">\n                  <Row>\n                    {row.images?.map((image, index) => {\n                      return (\n                        <Box\n                          as=\"img\"\n                          height=\"20\"\n                          width=\"20\"\n                          borderRadius={index === 0 && (row as CollectionRow).collectionAddress ? 'round' : '4'}\n                          style={{ zIndex: 2 - index }}\n                          className={styles.listingModalIcon}\n                          src={image}\n                          alt={row.name}\n                          key={index}\n                        />\n                      )\n                    })}\n                    <Box\n                      marginLeft=\"8\"\n                      marginRight=\"auto\"\n                      fontWeight=\"normal\"\n                      color=\"textPrimary\"\n                      textOverflow=\"ellipsis\"\n                      overflow=\"hidden\"\n                      whiteSpace=\"nowrap\"\n                      maxWidth={{\n                        sm: 'max',\n                        md:\n                          row.status === ListingStatus.REJECTED || row.status === ListingStatus.FAILED ? '120' : 'full',\n                      }}\n                      className={bodySmall}\n                    >\n                      {row.name}\n                    </Box>\n                    {isSuccessScreen ? (\n                      getListingRowPrice(row) &&\n                      `${formatEthPrice(numberToWei(getListingRowPrice(row) ?? 0).toString())} ETH`\n                    ) : row.status === ListingStatus.APPROVED ? (\n                      <ApprovedCheckmarkIcon height=\"20\" width=\"20\" />\n                    ) : row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED ? (\n                      <Row gap=\"4\">\n                        <Box fontWeight=\"normal\" fontSize=\"14\" color=\"textSecondary\">\n                          {row.status}\n                        </Box>\n                        <FailedListingIcon />\n                      </Row>\n                    ) : (\n                      row.status === ListingStatus.SIGNING && <LoadingIcon height=\"20\" width=\"20\" stroke=\"#4673FA\" />\n                    )}\n                  </Row>\n                  {(row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED) && (\n                    <Row gap=\"8\" justifyContent=\"center\">\n                      <Box\n                        width=\"120\"\n                        as=\"button\"\n                        className={buttonTextSmall}\n                        borderRadius=\"12\"\n                        border=\"none\"\n                        color=\"red400\"\n                        height=\"32\"\n                        cursor=\"pointer\"\n                        style={{ backgroundColor: '#FA2B391A' }}\n                        onClick={async (e) => {\n                          e.stopPropagation()\n                          removeRow(row)\n                        }}\n                      >\n                        Remove\n                      </Box>\n                      <Box\n                        width=\"120\"\n                        as=\"button\"\n                        className={buttonTextSmall}\n                        borderRadius=\"12\"\n                        border=\"none\"\n                        color=\"accentAction\"\n                        height=\"32\"\n                        cursor=\"pointer\"\n                        style={{ backgroundColor: '#4C82FB29' }}\n                        onClick={async (e) => {\n                          e.stopPropagation()\n                          if (row.callback) {\n                            await row.callback()\n                          }\n                        }}\n                      >\n                        Try again\n                      </Box>\n                    </Row>\n                  )}\n                </Column>\n              )\n            })}\n          </Column>\n        </Column>\n      )}\n    </Row>\n  )\n}\n","import { sendAnalyticsEvent, Trace, useTrace } from '@uniswap/analytics'\nimport { InterfaceModalName, NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ChevronLeftIcon, XMarkIcon } from 'nft/components/icons'\nimport { caption, headlineSmall, subhead, subheadSmall } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { useBag, useIsMobile, useNFTList, useSellAsset } from 'nft/hooks'\nimport { logListing, looksRareNonceFetcher } from 'nft/queries'\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\nimport { fetchPrice } from 'nft/utils/fetchPrice'\nimport { pluralize } from 'nft/utils/roundAndPluralize'\nimport { Dispatch, useEffect, useMemo, useRef, useState } from 'react'\nimport shallow from 'zustand/shallow'\n\nimport { ListingButton } from './ListingButton'\nimport * as styles from './ListingModal.css'\nimport { ListingSection } from './ListingSection'\nimport { approveCollectionRow, getTotalEthValue, pauseRow, resetRow, signListingRow, verifyStatus } from './utils'\n\nconst ListingModal = () => {\n  const { provider } = useWeb3React()\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const {\n    listingStatus,\n    setListingStatus,\n    setListings,\n    setCollectionsRequiringApproval,\n    setListingStatusAndCallback,\n    setCollectionStatusAndCallback,\n    looksRareNonce,\n    setLooksRareNonce,\n    getLooksRareNonce,\n    collectionsRequiringApproval,\n    listings,\n  } = useNFTList(\n    ({\n      listingStatus,\n      setListingStatus,\n      setListings,\n      setCollectionsRequiringApproval,\n      setListingStatusAndCallback,\n      setCollectionStatusAndCallback,\n      looksRareNonce,\n      setLooksRareNonce,\n      getLooksRareNonce,\n      collectionsRequiringApproval,\n      listings,\n    }) => ({\n      listingStatus,\n      setListingStatus,\n      setListings,\n      setCollectionsRequiringApproval,\n      setListingStatusAndCallback,\n      setCollectionStatusAndCallback,\n      looksRareNonce,\n      setLooksRareNonce,\n      getLooksRareNonce,\n      collectionsRequiringApproval,\n      listings,\n    }),\n    shallow\n  )\n  const signer = provider?.getSigner()\n  const [openIndex, setOpenIndex] = useState(0)\n  const [allCollectionsApproved, setAllCollectionsApproved] = useState(false)\n  const toggleCart = useBag((state) => state.toggleBag)\n  const looksRareNonceRef = useRef(looksRareNonce)\n  const isMobile = useIsMobile()\n  const trace = useTrace({ modal: InterfaceModalName.NFT_LISTING })\n\n  useEffect(() => {\n    useNFTList.subscribe((state) => (looksRareNonceRef.current = state.looksRareNonce))\n  }, [])\n\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\n\n  const [ethPriceInUSD, setEthPriceInUSD] = useState(0)\n\n  useEffect(() => {\n    fetchPrice().then((price) => {\n      setEthPriceInUSD(price || 0)\n    })\n  }, [])\n\n  const startListingEventProperties = {\n    collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n    token_ids: sellAssets.map((asset) => asset.tokenId),\n    marketplaces: Array.from(new Set(listings.map((asset) => asset.marketplace.name))),\n    list_quantity: listings.length,\n    usd_value: ethPriceInUSD * totalEthListingValue,\n    ...trace,\n  }\n\n  // when all collections have been approved, auto start the signing process\n  useEffect(() => {\n    collectionsRequiringApproval?.length &&\n      setAllCollectionsApproved(\n        collectionsRequiringApproval.every((collection: CollectionRow) => collection.status === ListingStatus.APPROVED)\n      )\n    if (\n      allCollectionsApproved &&\n      (listingStatus === ListingStatus.PENDING ||\n        listingStatus === ListingStatus.CONTINUE ||\n        listingStatus === ListingStatus.SIGNING)\n    ) {\n      resetAllRows()\n      signListings()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [collectionsRequiringApproval, allCollectionsApproved])\n\n  const allCollectionsApprovedOrPaused = useMemo(\n    () =>\n      collectionsRequiringApproval.every(\n        (collection: CollectionRow) =>\n          collection.status === ListingStatus.APPROVED || collection.status === ListingStatus.PAUSED\n      ),\n    [collectionsRequiringApproval]\n  )\n  const allListingsApprovedOrPaused = useMemo(\n    () =>\n      listings.every(\n        (listing: ListingRow) => listing.status === ListingStatus.APPROVED || listing.status === ListingStatus.PAUSED\n      ),\n    [listings]\n  )\n\n  // go back to a ready state after a successful retry\n  useEffect(() => {\n    if (listingStatus === ListingStatus.SIGNING && allCollectionsApprovedOrPaused && allListingsApprovedOrPaused) {\n      resetAllRows()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allCollectionsApprovedOrPaused, allListingsApprovedOrPaused])\n\n  // handles the modal wide listing state based on conglomeration of the wallet, collection, and listing states\n  const startListingFlow = async () => {\n    if (!signer) return\n    sendAnalyticsEvent(NFTEventName.NFT_SELL_START_LISTING, { ...startListingEventProperties })\n    setListingStatus(ListingStatus.SIGNING)\n    const signerAddress = await signer.getAddress()\n    const nonce = await looksRareNonceFetcher(signerAddress)\n    setLooksRareNonce(nonce ?? 0)\n\n    if (!collectionsRequiringApproval?.some((collection) => collection.status === ListingStatus.PAUSED)) {\n      setListingStatus(ListingStatus.SIGNING)\n      setOpenIndex(1)\n    }\n    // for all unique collection, marketplace combos -> approve collections\n    for (const collectionRow of collectionsRequiringApproval) {\n      verifyStatus(collectionRow.status) &&\n        (isMobile\n          ? await approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback, pauseAllRows)\n          : approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback, pauseAllRows))\n    }\n  }\n\n  const signListings = async () => {\n    if (!signer || !provider) return\n    setListingStatus(ListingStatus.SIGNING)\n    setOpenIndex(2)\n    // sign listings\n    for (const listing of listings) {\n      verifyStatus(listing.status) &&\n        (await signListingRow(\n          listing,\n          signer,\n          provider,\n          getLooksRareNonce,\n          setLooksRareNonce,\n          setListingStatusAndCallback,\n          pauseAllRows\n        ))\n    }\n    const allListingsSigned = listings.every((listing: ListingRow) => listing.status === ListingStatus.APPROVED)\n    const paused = listings.some((listing: ListingRow) => listing.status === ListingStatus.PAUSED)\n    if (allListingsSigned) {\n      setOpenIndex(0)\n      setListingStatus(ListingStatus.APPROVED)\n    } else if (!paused) {\n      setListingStatus(ListingStatus.FAILED)\n    }\n    sendAnalyticsEvent(NFTEventName.NFT_LISTING_COMPLETED, {\n      signatures_approved: listings.filter((asset) => asset.status === ListingStatus.APPROVED),\n      list_quantity: listings.length,\n      usd_value: ethPriceInUSD * totalEthListingValue,\n      ...trace,\n    })\n    await logListing(listings, (await signer?.getAddress()) ?? '')\n  }\n\n  const pauseAllRows = () => {\n    for (const collection of collectionsRequiringApproval) {\n      pauseRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\n    }\n    for (const listing of listings) {\n      pauseRow(listing, listings, setListings as Dispatch<AssetRow[]>)\n    }\n  }\n\n  const resetAllRows = () => {\n    for (const collection of collectionsRequiringApproval) {\n      resetRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\n    }\n    for (const listing of listings) {\n      resetRow(listing, listings, setListings as Dispatch<AssetRow[]>)\n    }\n  }\n\n  const clickStopListing = () => {\n    pauseAllRows()\n  }\n\n  const clickStartListingFlow = () => {\n    resetAllRows()\n    allCollectionsApproved ? signListings() : startListingFlow()\n  }\n\n  const showSuccessScreen = useMemo(() => listingStatus === ListingStatus.APPROVED, [listingStatus])\n\n  return (\n    <Trace modal={InterfaceModalName.NFT_LISTING}>\n      <Column paddingTop=\"20\" paddingBottom=\"20\" paddingLeft=\"12\" paddingRight=\"12\">\n        <Row className={headlineSmall} marginBottom=\"10\">\n          {isMobile && !showSuccessScreen && (\n            <Box paddingTop=\"4\" marginRight=\"4\" onClick={toggleCart}>\n              <ChevronLeftIcon height={28} width={28} />\n            </Box>\n          )}\n          {showSuccessScreen ? 'Success!' : `Listing ${sellAssets.length} NFTs`}\n          <Box\n            as=\"button\"\n            border=\"none\"\n            color=\"textSecondary\"\n            backgroundColor=\"backgroundSurface\"\n            marginLeft=\"auto\"\n            marginRight=\"0\"\n            paddingRight=\"0\"\n            display={{ sm: 'flex', md: 'none' }}\n            cursor=\"pointer\"\n            onClick={toggleCart}\n          >\n            <XMarkIcon height={28} width={28} fill={themeVars.colors.textPrimary} />\n          </Box>\n        </Row>\n        <Column overflowX=\"hidden\" overflowY=\"auto\" style={{ maxHeight: '60vh' }}>\n          {showSuccessScreen ? (\n            <Trace\n              name={NFTEventName.NFT_LISTING_COMPLETED}\n              properties={{ list_quantity: listings.length, usd_value: ethPriceInUSD * totalEthListingValue, ...trace }}\n              shouldLogImpression\n            >\n              <ListingSection\n                sectionTitle={`Listed ${listings.length} item${pluralize(listings.length)} for sale`}\n                rows={listings}\n                index={0}\n                openIndex={openIndex}\n                isSuccessScreen={true}\n              />\n            </Trace>\n          ) : (\n            <>\n              <ListingSection\n                sectionTitle={`Approve ${collectionsRequiringApproval.length} collection${pluralize(\n                  collectionsRequiringApproval.length\n                )}`}\n                title=\"COLLECTIONS\"\n                rows={collectionsRequiringApproval}\n                index={1}\n                openIndex={openIndex}\n              />\n              <ListingSection\n                sectionTitle={`Confirm ${listings.length} listing${pluralize(listings.length)}`}\n                caption=\"Now you can sign to list each item\"\n                title=\"NFTS\"\n                rows={listings}\n                index={2}\n                openIndex={openIndex}\n              />\n            </>\n          )}\n        </Column>\n        <hr className={styles.sectionDivider} />\n        <Row className={subhead} marginTop=\"12\" marginBottom={showSuccessScreen ? '8' : '20'}>\n          Return if sold\n          <Row className={subheadSmall} marginLeft=\"auto\" marginRight=\"0\">\n            {totalEthListingValue}\n            &nbsp;ETH\n          </Row>\n        </Row>\n        {showSuccessScreen ? (\n          <Box as=\"span\" className={caption} color=\"textSecondary\">\n            Status:{' '}\n            <Box as=\"span\" color=\"accentSuccess\">\n              Confirmed\n            </Box>\n          </Box>\n        ) : (\n          <ListingButton onClick={clickStartListingFlow} buttonText=\"Start listing\" showWarningOverride={isMobile} />\n        )}\n        {(listingStatus === ListingStatus.PENDING || listingStatus === ListingStatus.SIGNING) && (\n          <Box\n            as=\"button\"\n            border=\"none\"\n            backgroundColor=\"backgroundSurface\"\n            cursor=\"pointer\"\n            color=\"orange\"\n            className={styles.button}\n            onClick={clickStopListing}\n            type=\"button\"\n          >\n            Stop listing\n          </Box>\n        )}\n      </Column>\n    </Trace>\n  )\n}\n\nexport default ListingModal\n","import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n","import { Box } from 'nft/components/Box'\nimport styled, { keyframes } from 'styled-components/macro'\n\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accentAction};\n`\nexport const TimedLoader = () => {\n  const stroke = 1.5\n\n  return (\n    <Box display=\"flex\" position=\"absolute\">\n      <svg height=\"18px\" width=\"18px\">\n        <Circle\n          strokeWidth={`${stroke}`}\n          strokeLinecap=\"round\"\n          style={{\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n          }}\n          fill=\"transparent\"\n          r=\"8px\"\n          cx=\"9px\"\n          cy=\"9px\"\n        />\n      </svg>\n    </Box>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYyB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGM6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRjOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkZDo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGU6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkZTpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGc6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtc3RhdGVPdmVybGF5SG92ZXIpOwp9Ci5fMWt1YXdjNyB7CiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7Cn0KLl8xa3Vhd2M5IHsKICBsaW5lLWhlaWdodDogMjRweDsKfQouXzFrdWF3Y2IgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var bagRow = '_1kuawc1 rgw6ez2cv rgw6ez2id rgw6ez2nj rgw6ez271 rgw6ez4dj rgw6ez3sj rgw6ez78z rgw6ez1dp rgw6ez7aj';\nexport var unavailableAssetsContainer = 'rgw6ez2o7 rgw6ez27p rgw6ezlj rgw6ezr1 rgw6ez4rj rgw6ez3sj rgw6ez4dj rgw6ez79b rgw6ez7ir rgw6ez537 rgw6ez5zj rgw6ez5np rgw6ez1dp';\nexport var priceChangeColumn = 'rgw6ez2o7 rgw6ez27p rgw6ezlj rgw6ezr1 rgw6ez4rj rgw6ez3s7 rgw6ez4dj rgw6ez79b rgw6ez7ir rgw6ez537 rgw6ez5np rgw6ez1dp rgw6ez78z';\nexport var priceChangeRow = 'rgw6ezcp rgw6ezav rgw6eze7 rgw6ez4bd rgw6ez3rv';\nexport var bagRowImage = 'rgw6ez14d rgw6ez1b7 rgw6ez48p rgw6ez7ab';\nexport var grayscaleImage = '_1kuawc7';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3rv rgw6ezb1 rgw6ezd1 rgw6ez3wv';\nexport var assetName = '_1kuawcb rgw6ezb1 rgw6ezcv rgw6ez7l3 rgw6ez44v rgw6ez44p';\nexport var collectionName = 'rgw6ezcp rgw6ezav rgw6eze7 rgw6ez7l3 rgw6ez44p rgw6ez44v rgw6ez4dp';\nexport var icon = 'rgw6ez3wv';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/collection/Card'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal, getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\n  <RemoveAssetOverlay onClick={onClick}>\n    <CircularCloseIcon />\n  </RemoveAssetOverlay>\n)\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"normal\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice: number | undefined\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatWeiToDecimal(assetEthPrice)\n  const assetUSDPriceFormatted = ethNumberStandardFormatter(\n    usdPrice ? parseFloat(formatEther(assetEthPrice)) * usdPrice : usdPrice,\n    true\n  )\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'textSecondary' : 'textPrimary'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice: number | undefined\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'backgroundOutline' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatWeiToDecimal(\n          asset.priceInfo.ETHPrice\n        )} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice: number | undefined\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"backgroundSurface\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"textSecondary\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"textSecondary\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"textPrimary\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","import { sendAnalyticsEvent, Trace } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\nimport { Column } from 'nft/components/Flex'\nimport { useBag, useIsMobile } from 'nft/hooks'\nimport { BagItemStatus, BagStatus } from 'nft/types'\nimport { fetchPrice, formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useEffect, useMemo } from 'react'\nimport { useQuery } from 'react-query'\n\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus)\n  const setBagStatus = useBag((s) => s.setBagStatus)\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\n  }, [uncheckedItemsInBag])\n\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\n      .map((item) => item.asset)\n    const priceChangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\n      .map((item) => item.asset)\n    const unavailableAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\n      .map((item) => item.asset)\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\n\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\n  }, [itemsInBag])\n\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0\n    const hasAssets = itemsInBag.length > 0\n\n    if (hasAssetsInReview)\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: fetchedPriceData,\n        bag_quantity: itemsInBag,\n        ...formatAssetEventProperties(priceChangedAssets),\n      })\n\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, fetchedPriceData])\n\n  return (\n    <>\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\n        {unavailableAssets.length > 0 && (\n          <Trace\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\n            properties={{\n              usd_value: fetchedPriceData,\n              bag_quantity: itemsInBag.length,\n              ...formatAssetEventProperties(unavailableAssets),\n            }}\n            shouldLogImpression\n          >\n            <UnavailableAssetsHeaderRow\n              assets={unavailableAssets}\n              usdPrice={fetchedPriceData}\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n              isMobile={isMobile}\n            />\n          </Trace>\n        )}\n        {priceChangedAssets.map((asset, index) => (\n          <PriceChangeBagRow\n            key={asset.id}\n            asset={asset}\n            usdPrice={fetchedPriceData}\n            markAssetAsReviewed={markAssetAsReviewed}\n            top={index === 0 && unavailableAssets.length === 0}\n            isMobile={isMobile}\n          />\n        ))}\n      </Column>\n      <Column>\n        {unchangedAssets\n          .slice(0)\n          .reverse()\n          .map((asset) => (\n            <BagRow\n              key={asset.id}\n              asset={asset}\n              usdPrice={fetchedPriceData}\n              removeAsset={removeAssetsFromBag}\n              showRemove={true}\n              isMobile={isMobile}\n            />\n          ))}\n      </Column>\n    </>\n  )\n}\n","import { Trans } from '@lingui/macro'\nimport { OpacityHoverState } from 'components/Common'\nimport { BagCloseIcon } from 'nft/components/icons'\nimport { useMemo } from 'react'\nimport styled from 'styled-components/macro'\nimport { ButtonText, ThemedText } from 'theme'\n\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.textSecondary};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`\nconst CounterDot = styled.div<{ sizing: string }>`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accentAction};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 28px;\n  text-align: center;\n`\ninterface BagHeaderProps {\n  numberOfAssets: number\n  closeBag: () => void\n  resetFlow: () => void\n  isProfilePage: boolean\n}\n\nconst BASE_SIZING = 14\nconst INCREMENTAL_SIZING = 6\n\nconst getCircleSizing = (numberOfAssets: number): string => {\n  const numberOfCharacters = numberOfAssets.toString().length\n\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\n}\n\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\n\n  return (\n    <Wrapper>\n      <ThemedText.HeadlineSmall>{isProfilePage ? <Trans>Sell</Trans> : <Trans>Bag</Trans>}</ThemedText.HeadlineSmall>\n      {numberOfAssets > 0 && (\n        <>\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\n          <ClearButton onClick={resetFlow}>\n            <Trans>Clear all</Trans>\n          </ClearButton>\n        </>\n      )}\n      <IconWrapper onClick={closeBag}>\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\n      </IconWrapper>\n    </Wrapper>\n  )\n}\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Center, Column } from 'nft/components/Flex'\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport styled from 'styled-components/macro'\n\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`\n\nconst EmptyState = () => {\n  const isProfilePage = useIsNftProfilePage()\n\n  return (\n    <StyledColumn>\n      <Center>\n        {isProfilePage ? (\n          <LargeTagIcon color={themeVars.colors.textTertiary} />\n        ) : (\n          <BagIcon color={themeVars.colors.textTertiary} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\n        )}\n      </Center>\n      {isProfilePage ? (\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\n          No NFTs selected\n        </Center>\n      ) : (\n        <Column gap=\"16\">\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\n            Your bag is empty\n          </Center>\n          <Center fontSize=\"12\" fontWeight=\"normal\" color=\"textSecondary\" style={{ lineHeight: '16px' }}>\n            Selected NFTs will appear here\n          </Center>\n        </Column>\n      )}\n    </StyledColumn>\n  )\n}\n\nexport default EmptyState\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useState } from 'react'\n\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\nimport * as styles from '../BagRow.css'\n\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const isMobile = useIsMobile()\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    removeAsset(asset)\n  }\n\n  return (\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\n      <Box position=\"relative\" display=\"flex\">\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\n      </Box>\n      <Column overflow=\"hidden\" width=\"full\" color=\"textPrimary\">\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\n        </Row>\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n        </Row>\n      </Column>\n      {hovered && !isMobile && (\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>\n      )}\n    </Row>\n  )\n}\n\nexport default ProfileAssetRow\n","import { Column } from 'nft/components/Flex'\nimport { useSellAsset } from 'nft/hooks'\n\nimport ProfileAssetRow from './ProfileAssetRow'\n\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  return (\n    <Column>\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\n    </Column>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { GqlRoutingVariant, useGqlRoutingFlag } from 'featureFlags/flags/gqlRouting'\nimport { NftListV2Variant, useNftListV2Flag } from 'featureFlags/flags/nftListV2'\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport ListingModal from 'nft/components/bag/profile/ListingModal'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column } from 'nft/components/Flex'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { buttonTextMedium, commonButtonStyles } from 'nft/css/common.css'\nimport {\n  useBag,\n  useIsMobile,\n  useProfilePageState,\n  useSellAsset,\n  useSendTransaction,\n  useTransactionResponse,\n} from 'nft/hooks'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { fetchRoute } from 'nft/queries'\nimport { BagItemStatus, BagStatus, ProfilePageStateType, RouteResponse, TxStateType } from 'nft/types'\nimport {\n  buildNftTradeInputFromBagItems,\n  buildSellObject,\n  formatAssetEventProperties,\n  recalculateBagUsingPooledAssets,\n  sortUpdatedAssets,\n} from 'nft/utils'\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\nimport { combineBuyItemsWithTxRoute } from 'nft/utils/txRoute/combineItemsWithTxRoute'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useQueryClient } from 'react-query'\nimport styled from 'styled-components/macro'\nimport { Z_INDEX } from 'theme/zIndex'\nimport shallow from 'zustand/shallow'\n\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\nexport const BAG_WIDTH = 320\nexport const XXXL_BAG_WIDTH = 360\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop + 2) : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"24\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'backgroundOutline'}\n    borderBottomColor={top ? 'backgroundOutline' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { account, provider } = useWeb3React()\n\n  const { resetSellAssets, sellAssets } = useSellAsset(\n    ({ reset, sellAssets }) => ({\n      resetSellAssets: reset,\n      sellAssets,\n    }),\n    shallow\n  )\n\n  const { profilePageState, setProfilePageState } = useProfilePageState(\n    ({ setProfilePageState, state }) => ({ profilePageState: state, setProfilePageState }),\n    shallow\n  )\n\n  const {\n    bagStatus,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    bagIsLocked,\n    setLocked,\n    reset,\n    setItemsInBag,\n    bagExpanded,\n    toggleBag,\n    setTotalEthPrice,\n    setBagExpanded,\n  } = useBag((state) => ({ ...state, bagIsLocked: state.isLocked, uncheckedItemsInBag: state.itemsInBag }), shallow)\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n  const isNftListV2 = useNftListV2Flag() === NftListV2Variant.Enabled\n  const usingGqlRouting = useGqlRoutingFlag() === GqlRoutingVariant.Enabled\n\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const [setTransactionResponse] = useTransactionResponse((state) => [state.setTransactionResponse])\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\n\n  const queryClient = useQueryClient()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isModalOpen, setModalIsOpen] = useState(false)\n  const [userCanScroll, setUserCanScroll] = useState(false)\n  const [scrollProgress, setScrollProgress] = useState(0)\n  const scrollRef = (node: HTMLDivElement) => {\n    if (node !== null) {\n      const canScroll = node.scrollHeight > node.clientHeight\n      canScroll !== userCanScroll && setUserCanScroll(canScroll)\n    }\n  }\n\n  const { totalEthPrice } = useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n\n    return { totalEthPrice }\n  }, [itemsInBag])\n\n  const purchaseAssets = async (routingData: RouteResponse, purchasingWithErc20: boolean) => {\n    if (!provider || !routingData) return\n    const purchaseResponse = await sendTransaction(\n      provider?.getSigner(),\n      itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset),\n      routingData,\n      purchasingWithErc20\n    )\n    if (\n      purchaseResponse &&\n      (transactionStateRef.current === TxStateType.Success || transactionStateRef.current === TxStateType.Failed)\n    ) {\n      setLocked(false)\n      setModalIsOpen(false)\n      setTransactionResponse(purchaseResponse)\n      setBagExpanded({ bagExpanded: false })\n      reset()\n    }\n  }\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n\n  const fetchAssets = async () => {\n    const itemsToBuy = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n    const ethSellObject = buildSellObject(\n      itemsToBuy\n        .reduce((ethTotal, asset) => ethTotal.add(BigNumber.from(asset.priceInfo.ETHPrice)), BigNumber.from(0))\n        .toString()\n    )\n\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n    try {\n      if (usingGqlRouting) {\n        fetchGqlRoute({\n          variables: {\n            senderAddress: usingGqlRouting && account ? account : '',\n            nftTrades: usingGqlRouting ? buildNftTradeInputFromBagItems(itemsInBag) : [],\n            tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\n          },\n          onCompleted: (data) => {\n            if (!data.nftRoute || !data.nftRoute.route) {\n              setBagStatus(BagStatus.ADDING_TO_BAG)\n              setLocked(false)\n              return\n            }\n\n            const purchasingWithErc20 = !!tokenTradeInput\n            const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\n\n            const { hasPriceAdjustment, updatedAssets } = combineBuyItemsWithTxRoute(itemsToBuy, route)\n            const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\n\n            const fetchedPriceChangedAssets = updatedAssets\n              .filter((asset) => asset.updatedPriceInfo)\n              .sort(sortUpdatedAssets)\n            const fetchedUnavailableAssets = updatedAssets.filter((asset) => asset.isUnavailable)\n            const fetchedUnchangedAssets = updatedAssets.filter(\n              (asset) => !asset.updatedPriceInfo && !asset.isUnavailable\n            )\n            const hasReviewedAssets = fetchedUnchangedAssets.length > 0\n            const hasAssetsInReview = fetchedPriceChangedAssets.length > 0\n            const hasUnavailableAssets = fetchedUnavailableAssets.length > 0\n            const hasAssets = hasReviewedAssets || hasAssetsInReview || hasUnavailableAssets\n            const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n            setItemsInBag([\n              ...fetchedUnavailableAssets.map((unavailableAsset) => ({\n                asset: unavailableAsset,\n                status: BagItemStatus.UNAVAILABLE,\n              })),\n              ...fetchedPriceChangedAssets.map((changedAsset) => ({\n                asset: changedAsset,\n                status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n              })),\n              ...fetchedUnchangedAssets.map((unchangedAsset) => ({\n                asset: unchangedAsset,\n                status: BagItemStatus.REVIEWED,\n              })),\n            ])\n\n            let shouldLock = false\n\n            if (hasAssets) {\n              if (!shouldReview) {\n                if (shouldRefetchCalldata) {\n                  setBagStatus(BagStatus.CONFIRM_QUOTE)\n                } else {\n                  purchaseAssets(routeResponse, purchasingWithErc20)\n                  setBagStatus(BagStatus.CONFIRMING_IN_WALLET)\n                  shouldLock = true\n                }\n              } else if (!hasAssetsInReview) setBagStatus(BagStatus.CONFIRM_REVIEW)\n              else {\n                setBagStatus(BagStatus.IN_REVIEW)\n              }\n            } else {\n              setBagStatus(BagStatus.ADDING_TO_BAG)\n            }\n\n            setLocked(shouldLock)\n          },\n        })\n      } else {\n        const routeData = await queryClient.fetchQuery(['assetsRoute', ethSellObject, itemsToBuy, account], () =>\n          fetchRoute({\n            toSell: [ethSellObject],\n            toBuy: itemsToBuy,\n            senderAddress: account ?? '',\n          })\n        )\n\n        const { updatedAssets } = combineBuyItemsWithTxRoute(itemsToBuy, routeData.route)\n\n        const fetchedPriceChangedAssets = updatedAssets\n          .filter((asset) => asset.updatedPriceInfo)\n          .sort(sortUpdatedAssets)\n        const fetchedUnavailableAssets = updatedAssets.filter((asset) => asset.isUnavailable)\n        const fetchedUnchangedAssets = updatedAssets.filter((asset) => !asset.updatedPriceInfo && !asset.isUnavailable)\n        const hasReviewedAssets = fetchedUnchangedAssets.length > 0\n        const hasAssetsInReview = fetchedPriceChangedAssets.length > 0\n        const hasUnavailableAssets = fetchedUnavailableAssets.length > 0\n        const hasAssets = hasReviewedAssets || hasAssetsInReview || hasUnavailableAssets\n        const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n        setItemsInBag([\n          ...fetchedUnavailableAssets.map((unavailableAsset) => ({\n            asset: unavailableAsset,\n            status: BagItemStatus.UNAVAILABLE,\n          })),\n          ...fetchedPriceChangedAssets.map((changedAsset) => ({\n            asset: changedAsset,\n            status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n          })),\n          ...fetchedUnchangedAssets.map((unchangedAsset) => ({\n            asset: unchangedAsset,\n            status: BagItemStatus.REVIEWED,\n          })),\n        ])\n        setLocked(false)\n\n        if (hasAssets) {\n          if (!shouldReview) {\n            purchaseAssets(routeData, false)\n            setBagStatus(BagStatus.CONFIRMING_IN_WALLET)\n          } else if (!hasAssetsInReview) setBagStatus(BagStatus.CONFIRM_REVIEW)\n          else {\n            setBagStatus(BagStatus.IN_REVIEW)\n          }\n        } else {\n          setBagStatus(BagStatus.ADDING_TO_BAG)\n        }\n      }\n    } catch (error) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isModalOpen])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) setBagStatus(BagStatus.WARNING)\n      else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [transactionStateRef.current])\n\n  useEffect(() => {\n    setTotalEthPrice(totalEthPrice)\n  }, [totalEthPrice, setTotalEthPrice])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n\n  const scrollHandler = (event: React.UIEvent<HTMLDivElement>) => {\n    const scrollTop = event.currentTarget.scrollTop\n    const containerHeight = event.currentTarget.clientHeight\n    const scrollHeight = event.currentTarget.scrollHeight\n\n    setScrollProgress(scrollTop ? ((scrollTop + containerHeight) / scrollHeight) * 100 : 0)\n  }\n\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\n        {!(isProfilePage && profilePageState === ProfilePageStateType.LISTING) ? (\n          <>\n            <BagHeader\n              numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n              closeBag={handleCloseBag}\n              resetFlow={isProfilePage ? resetSellAssets : reset}\n              isProfilePage={isProfilePage}\n            />\n            {shouldRenderEmptyState && <EmptyState />}\n            <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n            <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n              {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n            </Column>\n            {hasAssetsToShow && !isProfilePage && (\n              <BagFooter totalEthPrice={totalEthPrice} fetchAssets={fetchAssets} eventProperties={eventProperties} />\n            )}\n            {isSellingAssets && isProfilePage && (\n              <Box\n                marginTop=\"32\"\n                marginX=\"28\"\n                marginBottom=\"16\"\n                paddingY=\"10\"\n                className={`${buttonTextMedium} ${commonButtonStyles}`}\n                backgroundColor=\"accentAction\"\n                color=\"white\"\n                textAlign=\"center\"\n                onClick={() => {\n                  ;(isMobile || isNftListV2) && toggleBag()\n                  setProfilePageState(ProfilePageStateType.LISTING)\n                  sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n                    list_quantity: sellAssets.length,\n                    collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n                    token_ids: sellAssets.map((asset) => asset.tokenId),\n                  })\n                }}\n              >\n                Continue\n              </Box>\n            )}\n          </>\n        ) : (\n          <ListingModal />\n        )}\n      </BagContainer>\n\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2dj rgw6ez2j1 rgw6ez1y7 rgw6ez7mf';\nexport var bagContainer = '_1jcz50r3 rgw6ez47v rgw6ez3e7 rgw6ez3i2 rgw6ez16v rgw6ez1dp rgw6ez38p rgw6ez4od rgw6ez79j rgw6ez501 rgw6ez7ir rgw6ez4dj';","import { Plural, t, Trans } from '@lingui/macro'\nimport { ButtonPrimary } from 'components/Button'\nimport Column from 'components/Column'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { Listing, WalletAsset } from 'nft/types'\nimport React from 'react'\nimport { AlertTriangle, X } from 'react-feather'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\nimport { Z_INDEX } from 'theme/zIndex'\n\nconst ModalWrapper = styled(Column)`\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 420px;\n  z-index: ${Z_INDEX.modal};\n  background: ${({ theme }) => theme.backgroundSurface};\n  border-radius: 20px;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  box-shadow: ${({ theme }) => theme.deepShadow};\n  padding: 20px 24px 24px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    width: 100%;\n  }\n`\nconst CloseIconWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n`\nconst CloseIcon = styled(X)`\n  cursor: pointer;\n  &:hover {\n    opacity: 0.6;\n  }\n`\n\nconst HazardIconWrap = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  padding: 32px 120px;\n`\n\nconst ContinueButton = styled(ButtonPrimary)`\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 24px;\n  margin-top: 12px;\n`\n\nconst EditListings = styled.span`\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 20px;\n  color: ${({ theme }) => theme.accentAction};\n  text-align: center;\n  cursor: pointer;\n  padding: 12px 16px;\n\n  &:hover {\n    opacity: 0.6;\n  }\n`\n\nexport const BelowFloorWarningModal = ({\n  listingsBelowFloor,\n  closeModal,\n  startListing,\n}: {\n  listingsBelowFloor: [WalletAsset, Listing][]\n  closeModal: () => void\n  startListing: () => void\n}) => {\n  const theme = useTheme()\n  const clickContinue = (e: React.MouseEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    startListing()\n    closeModal()\n  }\n  return (\n    <Portal>\n      <ModalWrapper>\n        <CloseIconWrapper>\n          <CloseIcon width={24} height={24} onClick={closeModal} />{' '}\n        </CloseIconWrapper>\n        <HazardIconWrap>\n          <AlertTriangle height={90} width={90} color={theme.accentCritical} />\n        </HazardIconWrap>\n        <ThemedText.HeadlineSmall lineHeight=\"28px\" textAlign=\"center\">\n          <Trans>Low listing price</Trans>\n        </ThemedText.HeadlineSmall>\n        <ThemedText.BodyPrimary textAlign=\"center\">\n          <Plural\n            value={listingsBelowFloor.length !== 1 ? 2 : 1}\n            _1={t`One NFT is listed ${(\n              (1 - (listingsBelowFloor[0][1].price ?? 0) / (listingsBelowFloor[0][0].floorPrice ?? 0)) *\n              100\n            ).toFixed(0)}% `}\n            other={t`${listingsBelowFloor.length} NFTs are listed significantly `}\n          />\n          &nbsp;\n          <Trans>below the collection’s floor price. Are you sure you want to continue?</Trans>\n        </ThemedText.BodyPrimary>\n        <ContinueButton onClick={clickContinue}>\n          <Trans>Continue</Trans>\n        </ContinueButton>\n        <EditListings onClick={closeModal}>\n          <Trans>Edit listings</Trans>\n        </EditListings>\n      </ModalWrapper>\n      <Overlay onClick={closeModal} />\n    </Portal>\n  )\n}\n","import { Plural, t } from '@lingui/macro'\nimport { NftListV2Variant, useNftListV2Flag } from 'featureFlags/flags/nftListV2'\nimport { useOnClickOutside } from 'hooks/useOnClickOutside'\nimport ms from 'ms.macro'\nimport { Box } from 'nft/components/Box'\nimport { Row } from 'nft/components/Flex'\nimport { ArrowRightIcon, HazardIcon, LoadingIcon, XMarkIcon } from 'nft/components/icons'\nimport { BelowFloorWarningModal } from 'nft/components/profile/list/Modal/BelowFloorWarningModal'\nimport { bodySmall } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { useNFTList, useSellAsset } from 'nft/hooks'\nimport { Listing, ListingStatus, WalletAsset } from 'nft/types'\nimport { pluralize } from 'nft/utils/roundAndPluralize'\nimport { useEffect, useMemo, useRef, useState } from 'react'\nimport { useTheme } from 'styled-components/macro'\nimport shallow from 'zustand/shallow'\n\nimport * as styles from './ListingModal.css'\nimport { getListings } from './utils'\n\nconst BELOW_FLOOR_PRICE_THRESHOLD = 0.8\n\ninterface ListingButtonProps {\n  onClick: () => void\n  buttonText: string\n  showWarningOverride?: boolean\n}\n\nexport const ListingButton = ({ onClick, buttonText, showWarningOverride = false }: ListingButtonProps) => {\n  const {\n    addMarketplaceWarning,\n    sellAssets,\n    removeAllMarketplaceWarnings,\n    showResolveIssues,\n    toggleShowResolveIssues,\n    issues,\n    setIssues,\n  } = useSellAsset(\n    ({\n      addMarketplaceWarning,\n      sellAssets,\n      removeAllMarketplaceWarnings,\n      showResolveIssues,\n      toggleShowResolveIssues,\n      issues,\n      setIssues,\n    }) => ({\n      addMarketplaceWarning,\n      sellAssets,\n      removeAllMarketplaceWarnings,\n      showResolveIssues,\n      toggleShowResolveIssues,\n      issues,\n      setIssues,\n    }),\n    shallow\n  )\n  const { listingStatus, setListingStatus, setListings, setCollectionsRequiringApproval } = useNFTList(\n    ({ listingStatus, setListingStatus, setListings, setCollectionsRequiringApproval }) => ({\n      listingStatus,\n      setListingStatus,\n      setListings,\n      setCollectionsRequiringApproval,\n    }),\n    shallow\n  )\n\n  const isNftListV2 = useNftListV2Flag() === NftListV2Variant.Enabled\n  const [showWarning, setShowWarning] = useState(false)\n  const [canContinue, setCanContinue] = useState(false)\n  const theme = useTheme()\n  const warningRef = useRef<HTMLDivElement>(null)\n  useOnClickOutside(warningRef, () => {\n    !isNftListV2 && setShowWarning(false)\n  })\n\n  useEffect(() => {\n    const [newCollectionsToApprove, newListings] = getListings(sellAssets)\n    setListings(newListings)\n    setCollectionsRequiringApproval(newCollectionsToApprove)\n    setListingStatus(ListingStatus.DEFINED)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sellAssets])\n\n  const [\n    noMarketplacesSelected,\n    missingExpiration,\n    invalidExpiration,\n    overMaxExpiration,\n    listingsMissingPrice,\n    listingsBelowFloor,\n    listingsAboveSellOrderFloor,\n    invalidPrices,\n  ] = useMemo(() => {\n    const noMarketplacesSelected = sellAssets.some((asset: WalletAsset) => asset.marketplaces === undefined)\n    const missingExpiration = sellAssets.some((asset) => {\n      return (\n        asset.expirationTime != null &&\n        (isNaN(asset.expirationTime) || asset.expirationTime * 1000 - Date.now() < ms`60 seconds`)\n      )\n    })\n    const invalidExpiration = sellAssets.some((asset) => {\n      return asset.expirationTime != null && isNaN(asset.expirationTime)\n    })\n    const overMaxExpiration = sellAssets.some((asset) => {\n      return asset.expirationTime != null && asset.expirationTime - Date.now() > ms`180 days`\n    })\n    const listingsMissingPrice: [WalletAsset, Listing][] = []\n    const listingsBelowFloor: [WalletAsset, Listing][] = []\n    const listingsAboveSellOrderFloor: [WalletAsset, Listing][] = []\n    const invalidPrices: [WalletAsset, Listing][] = []\n    for (const asset of sellAssets) {\n      if (asset.newListings) {\n        for (const listing of asset.newListings) {\n          if (!listing.price) listingsMissingPrice.push([asset, listing])\n          else if (isNaN(listing.price) || listing.price < 0) invalidPrices.push([asset, listing])\n          else if (\n            listing.price < (asset?.floorPrice ?? 0) * BELOW_FLOOR_PRICE_THRESHOLD &&\n            !listing.overrideFloorPrice\n          )\n            listingsBelowFloor.push([asset, listing])\n          else if (asset.floor_sell_order_price && listing.price >= asset.floor_sell_order_price)\n            listingsAboveSellOrderFloor.push([asset, listing])\n        }\n      }\n    }\n    // set number of issues\n    if (isNftListV2) {\n      const foundIssues =\n        Number(missingExpiration) +\n        Number(overMaxExpiration) +\n        listingsMissingPrice.length +\n        listingsAboveSellOrderFloor.length\n      setIssues(foundIssues)\n      !foundIssues && showResolveIssues && toggleShowResolveIssues()\n      // Only show Resolve Issue text if there was a user submitted error (ie not when page loads with no prices set)\n      if ((missingExpiration || overMaxExpiration || listingsAboveSellOrderFloor.length) && !showResolveIssues)\n        toggleShowResolveIssues()\n    }\n\n    const continueCheck = listingsBelowFloor.length === 0 && listingsAboveSellOrderFloor.length === 0\n    setCanContinue(continueCheck)\n    return [\n      noMarketplacesSelected,\n      missingExpiration,\n      invalidExpiration,\n      overMaxExpiration,\n      listingsMissingPrice,\n      listingsBelowFloor,\n      listingsAboveSellOrderFloor,\n      invalidPrices,\n    ]\n  }, [isNftListV2, sellAssets, setIssues, showResolveIssues, toggleShowResolveIssues])\n\n  const [disableListButton, warningMessage] = useMemo(() => {\n    const disableListButton =\n      noMarketplacesSelected ||\n      missingExpiration ||\n      invalidExpiration ||\n      overMaxExpiration ||\n      invalidPrices.length > 0 ||\n      listingsMissingPrice.length > 0\n\n    const warningMessage = noMarketplacesSelected\n      ? 'No marketplaces selected'\n      : missingExpiration\n      ? 'Set duration'\n      : invalidExpiration\n      ? 'Invalid duration'\n      : overMaxExpiration\n      ? 'Max duration is 6 months'\n      : listingsMissingPrice.length > 0\n      ? `${listingsMissingPrice.length} item price${pluralize(listingsMissingPrice.length)} not set`\n      : invalidPrices.length > 0\n      ? `${invalidPrices.length} price${pluralize(invalidPrices.length)} are invalid`\n      : listingsBelowFloor.length > 0\n      ? `${listingsBelowFloor.length} item${pluralize(listingsBelowFloor.length)} listed below floor`\n      : listingsAboveSellOrderFloor.length > 0\n      ? `${listingsAboveSellOrderFloor.length} item${pluralize(listingsAboveSellOrderFloor.length)} already listed`\n      : ''\n    return [disableListButton, warningMessage]\n  }, [\n    noMarketplacesSelected,\n    missingExpiration,\n    invalidExpiration,\n    overMaxExpiration,\n    listingsMissingPrice,\n    invalidPrices,\n    listingsBelowFloor,\n    listingsAboveSellOrderFloor,\n  ])\n\n  useEffect(() => {\n    setShowWarning(false)\n  }, [warningMessage])\n\n  const addWarningMessages = () => {\n    removeAllMarketplaceWarnings()\n    if (!missingExpiration && !noMarketplacesSelected) {\n      if (listingsMissingPrice.length > 0) {\n        for (const [asset, listing] of listingsMissingPrice) {\n          addMarketplaceWarning(asset, {\n            message: 'PLEASE SET A PRICE',\n            marketplace: listing.marketplace,\n          })\n        }\n      } else if (invalidPrices.length > 0) {\n        for (const [asset, listing] of invalidPrices) {\n          !listing.overrideFloorPrice &&\n            addMarketplaceWarning(asset, {\n              message: `INVALID PRICE`,\n              marketplace: listing.marketplace,\n            })\n        }\n      }\n    }\n    setShowWarning(true)\n  }\n\n  const warningWrappedClick = () => {\n    if ((!disableListButton && canContinue) || showWarningOverride) {\n      if (issues && isNftListV2) !showResolveIssues && toggleShowResolveIssues()\n      else if (listingsBelowFloor.length) setShowWarning(true)\n      else onClick()\n    } else addWarningMessages()\n  }\n\n  return (\n    <>\n      <Box position=\"relative\">\n        {!showWarningOverride && showWarning && warningMessage.length > 0 && (\n          <Row\n            className={`${bodySmall} ${styles.warningTooltip}`}\n            transition=\"250\"\n            onClick={() => setShowWarning(false)}\n            color=\"textSecondary\"\n            zIndex=\"3\"\n            borderRadius=\"4\"\n            backgroundColor=\"backgroundSurface\"\n            height={!disableListButton ? '64' : '36'}\n            maxWidth=\"276\"\n            position=\"absolute\"\n            left=\"24\"\n            bottom=\"52\"\n            flexWrap={!disableListButton ? 'wrap' : 'nowrap'}\n            style={{ maxWidth: !disableListButton ? '225px' : '' }}\n            ref={warningRef}\n          >\n            <HazardIcon />\n            <Box marginLeft=\"4\" marginRight=\"8\">\n              {warningMessage}\n            </Box>\n            {disableListButton ? (\n              <Box paddingTop=\"6\">\n                <XMarkIcon fill={themeVars.colors.textSecondary} height=\"20\" width=\"20\" />\n              </Box>\n            ) : (\n              <Row\n                marginLeft=\"72\"\n                cursor=\"pointer\"\n                color=\"accentAction\"\n                onClick={() => {\n                  setShowWarning(false)\n                  setCanContinue(true)\n                  onClick()\n                }}\n              >\n                Continue\n                <ArrowRightIcon height=\"20\" width=\"20\" />\n              </Row>\n            )}\n          </Row>\n        )}\n        <Box\n          as=\"button\"\n          border=\"none\"\n          backgroundColor={showResolveIssues ? 'accentFailure' : 'accentAction'}\n          cursor={\n            [ListingStatus.APPROVED, ListingStatus.PENDING, ListingStatus.SIGNING].includes(listingStatus) ||\n            disableListButton\n              ? 'default'\n              : 'pointer'\n          }\n          className={styles.button}\n          onClick={() => listingStatus !== ListingStatus.APPROVED && warningWrappedClick()}\n          type=\"button\"\n          style={{\n            color: showResolveIssues ? theme.accentTextDarkPrimary : theme.white,\n            opacity:\n              ![ListingStatus.DEFINED, ListingStatus.FAILED, ListingStatus.CONTINUE].includes(listingStatus) ||\n              (disableListButton && !showResolveIssues)\n                ? 0.3\n                : 1,\n          }}\n        >\n          {listingStatus === ListingStatus.SIGNING || listingStatus === ListingStatus.PENDING ? (\n            isNftListV2 ? (\n              listingStatus === ListingStatus.PENDING ? (\n                'Pending'\n              ) : (\n                'Proceed in wallet'\n              )\n            ) : (\n              <Row gap=\"8\">\n                <LoadingIcon stroke=\"backgroundSurface\" height=\"20\" width=\"20\" />\n                {listingStatus === ListingStatus.PENDING ? 'Pending' : 'Proceed in wallet'}\n              </Row>\n            )\n          ) : listingStatus === ListingStatus.APPROVED ? (\n            'Complete!'\n          ) : listingStatus === ListingStatus.PAUSED ? (\n            'Paused'\n          ) : listingStatus === ListingStatus.FAILED ? (\n            'Try again'\n          ) : listingStatus === ListingStatus.CONTINUE ? (\n            'Continue'\n          ) : showResolveIssues ? (\n            <Plural value={issues !== 1 ? 2 : 1} _1=\"Resolve issue\" other={t`Resolve ${issues} issues`} />\n          ) : (\n            buttonText\n          )}\n        </Box>\n      </Box>\n      {showWarning && (\n        <BelowFloorWarningModal\n          listingsBelowFloor={listingsBelowFloor}\n          closeModal={() => setShowWarning(false)}\n          startListing={onClick}\n        />\n      )}\n    </>\n  )\n}\n"],"sourceRoot":""}