{"version":3,"sources":["components/Common/index.tsx","graphql/data/nft/Collection.ts","nft/components/explore/CollectionTable.tsx","nft/components/explore/Carousel.tsx","nft/components/explore/CarouselCard.tsx","nft/components/explore/Banner.tsx","nft/components/explore/Cells/Cells.tsx","nft/components/explore/Cells/Cells.css.ts","nft/components/explore/Explore.css.ts","nft/components/explore/Table.tsx","nft/components/explore/TrendingCollections.tsx","nft/pages/explore/index.tsx"],"names":["ScrollBarStyles","css","theme","backgroundOutline","$isHorizontalScroll","OpacityHoverState","opacity","hover","click","transition","duration","timing","medium","ease","useCollection","address","useCollectionQuery","variables","addresses","queryData","data","loading","queryCollection","nftCollections","edges","node","market","markets","traits","useMemo","forEach","trait","name","stats","map","trait_type","trait_value","value","trait_count","assets","isVerified","description","standard","nftContracts","bannerImageUrl","bannerImage","url","num_owners","owners","floor_price","floorPrice","one_day_volume","volume","one_day_change","volumePercentChange","one_day_floor_change","floorPricePercentChange","banner_image_url","total_supply","numAssets","total_listings","listings","total_volume","totalVolume","marketplaceCount","marketplaces","marketplace","toLowerCase","count","imageUrl","image","twitterUrl","twitterName","instagram","instagramName","discordUrl","externalUrl","homepageUrl","rarityVerified","gql","ColumnHeaders","CarouselContainer","styled","div","CarouselCardContainer","breakpoint","md","CarouselItemCard","a","CarouselItemIcon","textPrimary","sm","MAX_CARD_WIDTH","Carousel","children","activeIndex","toggleNextSlide","idx","useCallback","x","l","length","calculateCardIndex","getPos","i","firstVis","firstVisIdx","calculateFirstCardIndex","useSprings","springs","set","prev","useRef","runSprings","y","vy","Math","floor","position","prevPosition","current","rank","calculateRank","immediate","config","tension","friction","direction","useEffect","toggleSlide","next","interval","setInterval","clearInterval","onClick","width","height","style","LoadingCarousel","CarouselCardBorder","fast","inOut","deepShadow","CardHeaderContainer","src","LoadingCardHeaderContainer","loadingAnimation","backgroundInteractive","CardHeaderColumn","IconContainer","CollectionNameContainer","LoadingCollectionNameContainer","LoadingBubble","HeaderOverlay","CollectionImage","img","accentTextLightPrimary","LoadingCollectionImage","LoadingTableElement","TableElement","FirstColumnTextWrapper","CardBottomContainer","MarketplaceIcon","backgroundSurface","xs","MarketplaceRow","floorInEth","alt","BodySmall","color","Number","formatNumberOrString","NumberType","NFTTokenFloorPriceTrailingZeros","MARKETS_TO_CHECK","Markets","Opensea","X2Y2","LooksRare","MARKETS_ENUM_TO_NAME","CarouselCard","collection","gqlCollection","SubHeaderSmall","formatWeiToDecimal","toString","reduce","acc","cur","find","LoadingTable","Array","index","CollectionName","ThemedText","MediumHeader","CarouselCardHeader","fontWeight","LoadingCarouselCard","BannerContainer","AbsoluteFill","BannerBackground","props","backgroundImage","darkMode","PlainBackground","opacify","userThemeColor","BannerMainArea","HeaderContainer","lg","EXCLUDED_COLLECTIONS","Banner","navigate","useNavigate","useQuery","fetchTrendingCollections","volumeType","timePeriod","TimePeriod","OneDay","size","refetchOnReconnect","refetchOnWindowFocus","refetchOnMount","collections","filter","includes","slice","useState","activeCollectionIdx","setActiveCollectionIdx","onToggleNextSlide","activeCollection","TruncatedText","TruncatedSubHeader","SubHeader","TruncatedSubHeaderSmall","RoundedImage","backgroundModule","ChangeCellContainer","change","accentSuccess","accentFailure","EthContainer","CollectionTitleCell","isMobile","useIsMobile","logo","className","DiscreteNumberCell","volumeFormatter","getDenominatedValue","denomination","inWei","usdPrice","Denomination","ETH","parseFloat","formatEther","EthCell","denominatedValue","formattedValue","ethNumberStandardFormatter","TextComponent","BodyPrimary","TextCell","VolumeCell","ChangeCell","Caption","abs","round","table","thead","th","RankCellContainer","StyledRow","tr","stateOverlayHover","stateOverlayPressed","StyledLoadingRow","StyledHeader","disabled","StyledLoadingHolder","StyledCollectionNameHolder","StyledImageHolder","StyledRankHolder","Table","columns","smallHiddenColumns","mediumHiddenColumns","largeHiddenColumns","useTheme","chainId","useWeb3React","useWindowSize","useTable","initialState","sortBy","desc","id","Volume","useSortBy","getTableProps","getTableBodyProps","headerGroups","rows","prepareRow","setHiddenColumns","visibleColumns","styles","headerGroup","getHeaderGroupProps","key","headers","column","getHeaderProps","getSortByToggleProps","textAlign","paddingLeft","disableSortBy","Box","as","isSorted","isSortedDesc","transform","render","row","events","BrowserEvent","NFTEventName","NFT_TRENDING_ROW_SELECTED","properties","collection_address","original","chain_id","element","InterfaceElementName","NFT_TRENDING_ROW","getRowProps","cells","cell","cellIndex","getCellProps","maxWidth","BodySecondary","fontSize","lineHeight","_","compareFloats","b","CollectionTable","floorSort","rowA","rowB","aFloor","BigNumber","from","bFloor","gte","floorChangeSort","volumeSort","volumeChangeSort","Header","accessor","Cell","Floor","sortType","AllTime","FloorChange","sortDescFirst","VolumeChange","Items","totalSupply","Owners","timeOptions","label","SevenDays","ThirtyDays","ExploreContainer","FiltersRow","Filter","Selector","active","StyledSelectorText","textSecondary","TrendingCollections","setTimePeriod","isEthToggled","setEthToggled","refetchInterval","isSuccess","fetchPrice","trendingCollections","d","volumeChange","type","floorChange","ownersChange","sales","USD","timeOption","NftExplore","setBagExpanded","useBag","state","bagExpanded","manualClose","page","InterfacePageName","NFT_EXPLORE_PAGE","shouldLogImpression"],"mappings":"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","file":"static/js/15.d79055be.chunk.js","sourcesContent":["import { css } from 'styled-components/macro'\n\nexport const ScrollBarStyles = css<{ $isHorizontalScroll?: boolean }>`\n  // Firefox scrollbar styling\n  scrollbar-width: thin;\n  scrollbar-color: ${({ theme }) => `${theme.backgroundOutline} transparent`};\n  height: 100%;\n\n  // safari and chrome scrollbar styling\n  ::-webkit-scrollbar {\n    background: transparent;\n\n    // Set height for horizontal scrolls\n    ${({ $isHorizontalScroll }) => {\n      return $isHorizontalScroll\n        ? css`\n            height: 4px;\n            overflow-x: scroll;\n          `\n        : css`\n            width: 4px;\n            overflow-y: scroll;\n          `\n    }}\n  }\n\n  ::-webkit-scrollbar-thumb {\n    background: ${({ theme }) => theme.backgroundOutline};\n    border-radius: 8px;\n  }\n`\n\nexport const OpacityHoverState = css`\n  &:hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n\n  &:active {\n    opacity: ${({ theme }) => theme.opacity.click};\n  }\n\n  transition: ${({\n    theme: {\n      transition: { duration, timing },\n    },\n  }) => `opacity ${duration.medium} ${timing.ease}`};\n`\n","import gql from 'graphql-tag'\nimport { GenieCollection, Trait } from 'nft/types'\nimport { useMemo } from 'react'\n\nimport { NftCollection, useCollectionQuery } from '../__generated__/types-and-hooks'\n\ngql`\n  query Collection($addresses: [String!]!) {\n    nftCollections(filter: { addresses: $addresses }) {\n      edges {\n        cursor\n        node {\n          bannerImage {\n            url\n          }\n          collectionId\n          description\n          discordUrl\n          homepageUrl\n          image {\n            url\n          }\n          instagramName\n          isVerified\n          name\n          numAssets\n          twitterName\n          nftContracts {\n            address\n            chain\n            name\n            standard\n            symbol\n            totalSupply\n          }\n          traits {\n            name\n            values\n            stats {\n              name\n              value\n              assets\n              listings\n            }\n          }\n          markets(currencies: ETH) {\n            floorPrice {\n              currency\n              value\n            }\n            owners\n            totalVolume {\n              value\n              currency\n            }\n            listings {\n              value\n            }\n            volume(duration: DAY) {\n              value\n              currency\n            }\n            volumePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            floorPricePercentChange(duration: DAY) {\n              value\n              currency\n            }\n            marketplaces {\n              marketplace\n              listings\n              floorPrice\n            }\n          }\n        }\n      }\n      pageInfo {\n        endCursor\n        hasNextPage\n        hasPreviousPage\n        startCursor\n      }\n    }\n  }\n`\n\ninterface useCollectionReturnProps {\n  data: GenieCollection\n  loading: boolean\n}\n\nexport function useCollection(address: string): useCollectionReturnProps {\n  const { data: queryData, loading } = useCollectionQuery({\n    variables: {\n      addresses: address,\n    },\n  })\n\n  const queryCollection = queryData?.nftCollections?.edges?.[0]?.node as NonNullable<NftCollection>\n  const market = queryCollection?.markets?.[0]\n  const traits = useMemo(() => {\n    return {} as Record<string, Trait[]>\n  }, [])\n  if (queryCollection?.traits) {\n    queryCollection?.traits.forEach((trait) => {\n      if (trait.name && trait.stats) {\n        traits[trait.name] = trait.stats.map((stats) => {\n          return {\n            trait_type: stats.name,\n            trait_value: stats.value,\n            trait_count: stats.assets,\n          } as Trait\n        })\n      }\n    })\n  }\n  return useMemo(() => {\n    return {\n      data: {\n        address,\n        isVerified: queryCollection?.isVerified,\n        name: queryCollection?.name,\n        description: queryCollection?.description,\n        standard: queryCollection?.nftContracts?.[0]?.standard,\n        bannerImageUrl: queryCollection?.bannerImage?.url,\n        stats: {\n          num_owners: market?.owners,\n          floor_price: market?.floorPrice?.value,\n          one_day_volume: market?.volume?.value,\n          one_day_change: market?.volumePercentChange?.value,\n          one_day_floor_change: market?.floorPricePercentChange?.value,\n          banner_image_url: queryCollection?.bannerImage?.url,\n          total_supply: queryCollection?.numAssets,\n          total_listings: market?.listings?.value,\n          total_volume: market?.totalVolume?.value,\n        },\n        traits,\n        marketplaceCount: market?.marketplaces?.map((market) => {\n          return {\n            marketplace: market.marketplace?.toLowerCase() ?? '',\n            count: market.listings ?? 0,\n            floorPrice: market.floorPrice ?? 0,\n          }\n        }),\n        imageUrl: queryCollection?.image?.url ?? '',\n        twitterUrl: queryCollection?.twitterName,\n        instagram: queryCollection?.instagramName,\n        discordUrl: queryCollection?.discordUrl,\n        externalUrl: queryCollection?.homepageUrl,\n        rarityVerified: false, // TODO update when backend supports\n        // isFoundation: boolean, // TODO ask backend to add\n      },\n      loading,\n    }\n  }, [address, loading, market, queryCollection, traits])\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { CollectionTableColumn, TimePeriod } from 'nft/types'\nimport { useMemo } from 'react'\nimport { CellProps, Column, Row } from 'react-table'\nimport { MediumOnly } from 'theme/components'\n\nimport { ChangeCell, CollectionTitleCell, DiscreteNumberCell, EthCell, TextCell, VolumeCell } from './Cells/Cells'\nimport { Table } from './Table'\n\nexport enum ColumnHeaders {\n  Volume = 'Volume',\n  VolumeChange = 'Volume change',\n  Floor = 'Floor',\n  FloorChange = 'Floor change',\n  Sales = 'Sales',\n  Items = 'Items',\n  Owners = 'Owners',\n}\n\nconst VOLUME_CHANGE_MAX_VALUE = 9999\n\nconst compareFloats = (a: number, b: number): 1 | -1 => {\n  return Math.round(a * 100000) >= Math.round(b * 100000) ? 1 : -1\n}\n\nconst CollectionTable = ({ data, timePeriod }: { data: CollectionTableColumn[]; timePeriod: TimePeriod }) => {\n  const floorSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      const aFloor = BigNumber.from(rowA.original.floor.value ?? 0)\n      const bFloor = BigNumber.from(rowB.original.floor.value ?? 0)\n\n      return aFloor.gte(bFloor) ? 1 : -1\n    }\n  }, [])\n\n  const floorChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.floor.change, rowB.original.floor.change)\n    }\n  }, [])\n\n  const volumeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.value, rowB.original.volume.value)\n    }\n  }, [])\n\n  const volumeChangeSort = useMemo(() => {\n    return (rowA: Row<CollectionTableColumn>, rowB: Row<CollectionTableColumn>) => {\n      return compareFloats(rowA.original.volume.change, rowB.original.volume.change)\n    }\n  }, [])\n\n  const columns: Column<CollectionTableColumn>[] = useMemo(\n    () => [\n      {\n        Header: 'Collection name',\n        accessor: 'collection',\n        Cell: CollectionTitleCell,\n        disableSortBy: true,\n      },\n      {\n        id: ColumnHeaders.Floor,\n        Header: ColumnHeaders.Floor,\n        accessor: ({ floor }) => floor.value,\n        sortType: floorSort,\n        Cell: function ethCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <>\n              <EthCell\n                value={cell.row.original.floor.value}\n                denomination={cell.row.original.denomination}\n                usdPrice={cell.row.original.usdPrice}\n              />\n              {timePeriod !== TimePeriod.AllTime && (\n                <MediumOnly>\n                  <ChangeCell change={cell.row.original.floor.change} />\n                </MediumOnly>\n              )}\n            </>\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.FloorChange,\n        Header: ColumnHeaders.FloorChange,\n        accessor: ({ floor }) => floor.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: floorChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : (\n            <ChangeCell change={cell.row.original.floor.change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Volume,\n        Header: ColumnHeaders.Volume,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        sortType: volumeSort,\n        Cell: function volumeCell(cell: CellProps<CollectionTableColumn>) {\n          return (\n            <VolumeCell\n              value={cell.row.original.volume.value}\n              denomination={cell.row.original.denomination}\n              usdPrice={cell.row.original.usdPrice}\n            />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.VolumeChange,\n        Header: ColumnHeaders.VolumeChange,\n        accessor: ({ volume }) => volume.value,\n        sortDescFirst: true,\n        disableSortBy: timePeriod === TimePeriod.AllTime,\n        sortType: volumeChangeSort,\n        Cell: function changeCell(cell: CellProps<CollectionTableColumn>) {\n          const { change } = cell.row.original.volume\n          return timePeriod === TimePeriod.AllTime ? (\n            <TextCell value=\"-\" />\n          ) : change >= VOLUME_CHANGE_MAX_VALUE ? (\n            <ChangeCell change={change}>{`>${VOLUME_CHANGE_MAX_VALUE}`}%</ChangeCell>\n          ) : (\n            <ChangeCell change={change} />\n          )\n        },\n      },\n      {\n        id: ColumnHeaders.Items,\n        Header: ColumnHeaders.Items,\n        accessor: 'totalSupply',\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={{ value: cell.row.original.totalSupply }} />\n        },\n      },\n      {\n        Header: ColumnHeaders.Owners,\n        accessor: ({ owners }) => owners.value,\n        sortDescFirst: true,\n        Cell: function discreteNumberCell(cell: CellProps<CollectionTableColumn>) {\n          return <DiscreteNumberCell value={cell.row.original.owners} />\n        },\n      },\n    ],\n    [floorChangeSort, floorSort, volumeChangeSort, volumeSort, timePeriod]\n  )\n  return (\n    <>\n      <Table\n        smallHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.Volume,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        mediumHiddenColumns={[\n          ColumnHeaders.Items,\n          ColumnHeaders.FloorChange,\n          ColumnHeaders.VolumeChange,\n          ColumnHeaders.Owners,\n        ]}\n        largeHiddenColumns={[ColumnHeaders.Items, ColumnHeaders.Owners]}\n        {...{ data, columns }}\n      />\n    </>\n  )\n}\n\nexport default CollectionTable\n","import { ChevronLeftIcon, ChevronRightIcon } from 'nft/components/icons'\nimport { calculateCardIndex, calculateFirstCardIndex, calculateRank } from 'nft/utils'\nimport { ReactNode, useCallback, useEffect, useRef } from 'react'\nimport { a, useSprings } from 'react-spring'\nimport styled from 'styled-components/macro'\n\nconst CarouselContainer = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst CarouselCardContainer = styled.div`\n  position: relative;\n  width: 100%;\n  overflow-x: hidden;\n  max-width: 100%;\n  height: 390px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    max-width: 600px;\n  }\n`\n\nconst CarouselItemCard = styled(a.div)`\n  display: flex;\n  justify-content: center;\n  padding: 4px 12px 32px;\n  position: absolute;\n  will-change: transform;\n  width: calc(100%);\n  height: calc(100%);\n\n  @media screen and (min-width: ${({ theme }) => theme.breakpoint.md}px) {\n    padding: 4px 32px 32px;\n  }\n`\n\nconst CarouselItemIcon = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: none;\n  user-select: none;\n  height: calc(100%);\n  padding: 4px 0 32px;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    display: flex;\n  }\n\n  :hover {\n    opacity: ${({ theme }) => theme.opacity.hover};\n  }\n`\n\ninterface CarouselProps {\n  children: ReactNode[]\n  activeIndex: number\n  toggleNextSlide: (idx: number) => void\n}\n\nconst MAX_CARD_WIDTH = 800\n\nexport const Carousel = ({ children, activeIndex, toggleNextSlide }: CarouselProps) => {\n  const idx = useCallback((x: number, l = children.length) => calculateCardIndex(x, l), [children])\n  const getPos = useCallback(\n    (i: number, firstVis: number, firstVisIdx: number) => calculateFirstCardIndex(i, firstVis, firstVisIdx, idx),\n    [idx]\n  )\n  const [springs, set] = useSprings(children.length, (i) => ({\n    x: (i < children.length - 1 ? i : -1) * MAX_CARD_WIDTH,\n  }))\n  const prev = useRef([0, 1])\n\n  const runSprings = useCallback(\n    (y: number, vy: number) => {\n      const firstVis = idx(Math.floor(y / MAX_CARD_WIDTH) % children.length)\n      const firstVisIdx = vy < 0 ? children.length - 2 : 1\n      set((i) => {\n        const position = getPos(i, firstVis, firstVisIdx)\n        const prevPosition = getPos(i, prev.current[0], prev.current[1])\n        const rank = calculateRank(firstVis, firstVisIdx, position, children.length, y)\n        return {\n          x: (-y % (MAX_CARD_WIDTH * children.length)) + MAX_CARD_WIDTH * rank,\n          immediate: vy < 0 ? prevPosition > position : prevPosition < position,\n          config: { tension: 250, friction: 30 },\n        }\n      })\n      prev.current = [firstVis, firstVisIdx]\n    },\n    [idx, getPos, set, children.length]\n  )\n\n  const direction = useRef(0)\n\n  useEffect(() => {\n    runSprings(activeIndex * MAX_CARD_WIDTH, direction.current)\n  }, [activeIndex, runSprings])\n\n  const toggleSlide = useCallback(\n    (next: -1 | 1) => {\n      direction.current = next\n      toggleNextSlide(next)\n    },\n    [toggleNextSlide]\n  )\n\n  useEffect(() => {\n    const interval = setInterval(async () => {\n      toggleSlide(1)\n    }, 7_000)\n    return () => {\n      clearInterval(interval)\n    }\n  }, [toggleSlide, activeIndex])\n\n  return (\n    <CarouselContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(-1)}>\n        <ChevronLeftIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n      <CarouselCardContainer>\n        {springs.map(({ x }, i) => (\n          <CarouselItemCard key={i} style={{ x }}>\n            {children[i]}\n          </CarouselItemCard>\n        ))}\n      </CarouselCardContainer>\n      <CarouselItemIcon onClick={() => toggleSlide(1)}>\n        <ChevronRightIcon width=\"16px\" height=\"16px\" />\n      </CarouselItemIcon>\n    </CarouselContainer>\n  )\n}\n\nexport const LoadingCarousel = ({ children }: { children: ReactNode }) => (\n  <Carousel activeIndex={0} toggleNextSlide={() => undefined}>\n    {[children]}\n  </Carousel>\n)\n","import { formatNumberOrString, NumberType } from '@uniswap/conedison/format'\nimport { loadingAnimation } from 'components/Loader/styled'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useCollection } from 'graphql/data/nft/Collection'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { Markets, TrendingCollection } from 'nft/types'\nimport { formatWeiToDecimal } from 'nft/utils'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme/components/text'\n\nconst CarouselCardBorder = styled.div`\n  width: 100%;\n  position: relative;\n  border-radius: 21px;\n  cursor: pointer;\n  border: 1px solid transparent;\n  transition-property: border-color;\n  transition-duration: ${({ theme }) => theme.transition.duration.fast};\n  transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n\n  :hover {\n    border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  }\n\n  ::after {\n    content: '';\n    opacity: 0;\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    border-radius: 21px;\n    z-index: -1;\n    box-shadow: ${({ theme }) => theme.deepShadow};\n    transition-property: opacity;\n    transition-duration: ${({ theme }) => theme.transition.duration.fast};\n    transition-timing-function: ${({ theme }) => theme.transition.timing.inOut};\n  }\n\n  :hover::after {\n    opacity: 1;\n  }\n`\n\nconst CardHeaderContainer = styled.div<{ src: string }>`\n  position: relative;\n  background-image: ${({ src }) => `url(${src})`};\n  background-size: cover;\n  background-position: center;\n`\n\nconst LoadingCardHeaderContainer = styled.div`\n  position: relative;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst CardHeaderColumn = styled.div`\n  position: relative;\n  display: flex;\n  flex: 1;\n  align-items: center;\n  flex-direction: column;\n  gap: 8px;\n  height: 202px;\n  justify-content: center;\n  padding: 0 40px;\n  z-index: 1;\n`\nconst IconContainer = styled.div`\n  display: inline;\n  vertical-align: text-bottom;\n  margin-left: 2px;\n`\nconst CollectionNameContainer = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  text-align: center;\n  max-height: 56px;\n`\n\nconst LoadingCollectionNameContainer = styled(LoadingBubble)`\n  width: 50%;\n`\n\nconst HeaderOverlay = styled.div`\n  background: linear-gradient(180deg, rgba(0, 0, 0, 0) 0%, rgba(0, 0, 0, 0.6) 100%, rgba(0, 0, 0, 0.08));\n  bottom: 0px;\n  left: 0px;\n  position: absolute;\n  right: 0px;\n  top: 0px;\n  z-index: 0;\n\n  // overlay workaround for firefox only\n  @supports (-moz-appearance: none) {\n    bottom: -1px;\n  }\n`\n\nconst CollectionImage = styled.img`\n  width: 86px;\n  height: 86px;\n  background: ${({ theme }) => theme.accentTextLightPrimary};\n  border: 2px solid ${({ theme }) => theme.accentTextLightPrimary};\n  border-radius: 100px;\n`\n\nconst LoadingCollectionImage = styled.div`\n  width: 86px;\n  height: 86px;\n  border-radius: 100px;\n  animation: ${loadingAnimation} 1.5s infinite;\n  animation-fill-mode: both;\n  background: linear-gradient(\n    to left,\n    ${({ theme }) => theme.backgroundInteractive} 25%,\n    ${({ theme }) => theme.backgroundOutline} 50%,\n    ${({ theme }) => theme.backgroundInteractive} 75%\n  );\n  will-change: background-position;\n  background-size: 400%;\n`\n\nconst LoadingTableElement = styled(LoadingBubble)`\n  width: 50px;\n`\n\nconst TableElement = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 6px;\n`\n\nconst FirstColumnTextWrapper = styled.div``\n\nconst CardBottomContainer = styled.div`\n  display: grid;\n  flex: 1;\n  gap: 8px;\n  grid-template-columns: auto auto auto;\n  padding: 16px 16px 20px;\n`\n\nconst MarketplaceIcon = styled.img`\n  width: 20px;\n  height: 20px;\n`\n\nconst CarouselCardContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 20px;\n  overflow: hidden;\n  height: 100%;\n\n  ${TableElement}:nth-child(3n-1), ${LoadingTableElement}:nth-child(3n-1) {\n    justify-self: center;\n  }\n\n  ${TableElement}:nth-child(3n), ${LoadingTableElement}:nth-child(3n) {\n    justify-self: right;\n  }\n\n  @media (max-width: ${({ theme }) => theme.breakpoint.xs}px) or ((min-width: ${({ theme }) =>\n      theme.breakpoint.sm}px) and (max-width: 880px)) {\n    ${FirstColumnTextWrapper} {\n      display: none;\n    }\n    ${TableElement} {\n      justify-self: left !important;\n    }\n    ${CardHeaderColumn} {\n      padding: 0 20px;\n    }\n  }\n`\n\ninterface MarketplaceRowProps {\n  marketplace: string\n  floorInEth?: number\n  listings?: number\n}\n\nconst MarketplaceRow = ({ marketplace, floorInEth, listings }: MarketplaceRowProps) => {\n  return (\n    <>\n      <TableElement>\n        <MarketplaceIcon\n          src={`/nft/svgs/marketplaces/${marketplace.toLowerCase()}-grey.svg`}\n          alt={`${marketplace} icon`}\n        />\n        <FirstColumnTextWrapper>\n          <ThemedText.BodySmall color=\"textSecondary\">{marketplace}</ThemedText.BodySmall>\n        </FirstColumnTextWrapper>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">\n          {Number(floorInEth) > 0\n            ? `${formatNumberOrString(floorInEth, NumberType.NFTTokenFloorPriceTrailingZeros)} ETH`\n            : '-'}\n        </ThemedText.BodySmall>\n      </TableElement>\n      <TableElement>\n        <ThemedText.BodySmall color=\"textSecondary\">{Number(listings) > 0 ? listings : 'None'}</ThemedText.BodySmall>\n      </TableElement>\n    </>\n  )\n}\n\ninterface CarouselCardProps {\n  collection: TrendingCollection\n  onClick: () => void\n}\n\nconst MARKETS_TO_CHECK = [Markets.Opensea, Markets.X2Y2, Markets.LooksRare] as const\nconst MARKETS_ENUM_TO_NAME = {\n  [Markets.Opensea]: 'OpenSea',\n  [Markets.X2Y2]: 'X2Y2',\n  [Markets.LooksRare]: 'LooksRare',\n}\n\nexport const CarouselCard = ({ collection, onClick }: CarouselCardProps) => {\n  const { data: gqlCollection, loading } = useCollection(collection.address)\n\n  if (loading) return <LoadingCarouselCard />\n\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer onClick={onClick}>\n        <CarouselCardHeader collection={collection} />\n        <CardBottomContainer>\n          <>\n            <TableElement>\n              <MarketplaceIcon src=\"/nft/svgs/marketplaces/uniswap-magenta.svg\" alt=\"Uniswap icon\" />\n              <FirstColumnTextWrapper>\n                <ThemedText.SubHeaderSmall color=\"userThemeColor\">Uniswap</ThemedText.SubHeaderSmall>\n              </FirstColumnTextWrapper>\n            </TableElement>\n            <TableElement>\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                {formatWeiToDecimal(collection.floor.toString())} ETH Floor\n              </ThemedText.SubHeaderSmall>\n            </TableElement>\n            <TableElement>\n              <ThemedText.SubHeaderSmall color=\"userThemeColor\">\n                {gqlCollection.marketplaceCount?.reduce((acc, cur) => acc + cur.count, 0)} Listings\n              </ThemedText.SubHeaderSmall>\n            </TableElement>\n            {MARKETS_TO_CHECK.map((market) => {\n              const marketplace = gqlCollection.marketplaceCount?.find(\n                (marketplace) => marketplace.marketplace === market\n              )\n              if (!marketplace) {\n                return null\n              }\n              return (\n                <MarketplaceRow\n                  key={`CarouselCard-key-${collection.address}-${marketplace.marketplace}`}\n                  marketplace={MARKETS_ENUM_TO_NAME[market]}\n                  listings={marketplace.count}\n                  floorInEth={marketplace.floorPrice}\n                />\n              )\n            })}\n          </>\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n\nconst DEFAULT_TABLE_ELEMENTS = 12\n\nconst LoadingTable = () => {\n  return (\n    <>\n      {[...Array(DEFAULT_TABLE_ELEMENTS)].map((index) => (\n        <LoadingTableElement key={index} />\n      ))}\n    </>\n  )\n}\n\nconst CollectionName = styled(ThemedText.MediumHeader)`\n  display: inline;\n  vertical-align: text-bottom;\n  line-height: 28px;\n`\n\nconst CarouselCardHeader = ({ collection }: { collection: TrendingCollection }) => {\n  return (\n    <CardHeaderContainer src={collection.bannerImageUrl}>\n      <CardHeaderColumn>\n        <CollectionImage src={collection.imageUrl} />\n        <CollectionNameContainer>\n          <CollectionName color=\"accentTextLightPrimary\" fontWeight=\"500\">\n            {collection.name}\n          </CollectionName>\n          {collection.isVerified && (\n            <IconContainer>\n              <VerifiedIcon width=\"24px\" height=\"24px\" />\n            </IconContainer>\n          )}\n        </CollectionNameContainer>\n      </CardHeaderColumn>\n      <HeaderOverlay />\n    </CardHeaderContainer>\n  )\n}\n\nexport const LoadingCarouselCard = ({ collection }: { collection?: TrendingCollection }) => {\n  return (\n    <CarouselCardBorder>\n      <CarouselCardContainer>\n        {collection ? (\n          <CarouselCardHeader collection={collection} />\n        ) : (\n          <LoadingCardHeaderContainer>\n            <CardHeaderColumn>\n              <LoadingCollectionImage />\n              <LoadingCollectionNameContainer />\n            </CardHeaderColumn>\n            <HeaderOverlay />\n          </LoadingCardHeaderContainer>\n        )}\n        <CardBottomContainer>\n          <LoadingTable />\n        </CardBottomContainer>\n      </CarouselCardContainer>\n    </CarouselCardBorder>\n  )\n}\n","import { fetchTrendingCollections } from 'nft/queries'\nimport { TimePeriod } from 'nft/types'\nimport { calculateCardIndex } from 'nft/utils'\nimport { useCallback, useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport { useNavigate } from 'react-router-dom'\nimport styled from 'styled-components/macro'\nimport { opacify } from 'theme/utils'\n\nimport { Carousel, LoadingCarousel } from './Carousel'\nimport { CarouselCard, LoadingCarouselCard } from './CarouselCard'\n\nconst BannerContainer = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 100%;\n  padding-top: 22px;\n  position: relative;\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding: 32px 16px;\n  }\n`\n\nconst AbsoluteFill = styled.div`\n  position: absolute;\n  top: -96px;\n  left: 0;\n  right: 0;\n  bottom: 0;\n`\n\n// Safari has issues with blur / overflow, forcing GPU rendering with `translate3d` fixes it\n// https://stackoverflow.com/a/71353198\nconst BannerBackground = styled(AbsoluteFill)<{ backgroundImage: string }>`\n  transform: translate3d(0, 0, 0) scaleY(1.1);\n\n  background-image: ${(props) => `url(${props.backgroundImage})`};\n  filter: blur(62px);\n\n  opacity: ${({ theme }) => (theme.darkMode ? 0.3 : 0.2)};\n`\n\nconst PlainBackground = styled(AbsoluteFill)`\n  background: ${({ theme }) => `linear-gradient(${opacify(10, theme.userThemeColor)}, transparent)`};\n`\n\nconst BannerMainArea = styled.div`\n  display: flex;\n  flex-direction: row;\n  width: 100%;\n  height: 100%;\n  gap: 36px;\n  max-width: 1200px;\n  justify-content: space-between;\n  z-index: 2;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    flex-direction: column;\n    height: 100%;\n    gap: 14px;\n    margin-top: 4px;\n    margin-bottom: 6px;\n  }\n`\n\nconst HeaderContainer = styled.div`\n  display: flex;\n  max-width: 500px;\n  font-weight: 500;\n  font-size: 72px;\n  line-height: 88px;\n  align-self: center;\n  flex-shrink: 0;\n  padding-bottom: 32px;\n\n  color: ${({ theme }) => theme.textPrimary};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.lg}px`}) {\n    font-size: 48px;\n    line-height: 67px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    font-size: 36px;\n    line-height: 50px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    line-height: 43px;\n    text-align: center;\n    padding-bottom: 16px;\n\n    br {\n      display: none;\n    }\n  }\n\n  /* Custom breakpoint to split into two lines on smaller screens */\n  @media only screen and (max-width: 550px) {\n    font-size: 28px;\n    line-height: 34px;\n    padding-bottom: 0;\n\n    br {\n      display: unset;\n    }\n  }\n`\n\n// Exclude collections that are not available in any of the following - OpenSea, X2Y2 and LooksRare:\nconst EXCLUDED_COLLECTIONS = ['0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb']\nconst TRENDING_COLLECTION_SIZE = 5\n\nconst Banner = () => {\n  const navigate = useNavigate()\n\n  const { data } = useQuery(\n    ['trendingCollections'],\n    () => {\n      return fetchTrendingCollections({\n        volumeType: 'eth',\n        timePeriod: TimePeriod.OneDay,\n        size: TRENDING_COLLECTION_SIZE + EXCLUDED_COLLECTIONS.length,\n      })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n    }\n  )\n\n  const collections = useMemo(\n    () => data?.filter((collection) => !EXCLUDED_COLLECTIONS.includes(collection.address)).slice(0, 5),\n    [data]\n  )\n\n  const [activeCollectionIdx, setActiveCollectionIdx] = useState(0)\n  const onToggleNextSlide = useCallback(\n    (direction: number) => {\n      if (!collections) return\n      setActiveCollectionIdx((idx) => calculateCardIndex(idx + direction, collections.length))\n    },\n    [collections]\n  )\n\n  const activeCollection = collections?.[activeCollectionIdx]\n\n  return (\n    <BannerContainer>\n      {activeCollection ? (\n        activeCollection.bannerImageUrl ? (\n          <BannerBackground backgroundImage={activeCollection.bannerImageUrl} />\n        ) : (\n          <PlainBackground />\n        )\n      ) : null}\n      <BannerMainArea>\n        <HeaderContainer>\n          Better prices. <br />\n          More listings.\n        </HeaderContainer>\n        {collections ? (\n          <Carousel activeIndex={activeCollectionIdx} toggleNextSlide={onToggleNextSlide}>\n            {collections.map((collection) => (\n              <CarouselCard\n                key={collection.address}\n                collection={collection}\n                onClick={() => navigate(`/nfts/collection/${collection.address}`)}\n              />\n            ))}\n          </Carousel>\n        ) : (\n          <LoadingCarousel>\n            <LoadingCarouselCard />\n          </LoadingCarousel>\n        )}\n      </BannerMainArea>\n    </BannerContainer>\n  )\n}\n\nexport default Banner\n","import { formatEther } from '@ethersproject/units'\nimport { SquareArrowDownIcon, SquareArrowUpIcon, VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile } from 'nft/hooks'\nimport { Denomination } from 'nft/types'\nimport { volumeFormatter } from 'nft/utils'\nimport { ReactNode } from 'react'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from '../../../utils/currency'\nimport * as styles from './Cells.css'\n\nconst TruncatedText = styled.div`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst CollectionNameContainer = styled(TruncatedText)`\n  display: flex;\n  padding: 14px 0px 14px 8px;\n  align-items: center;\n`\n\nconst CollectionName = styled(TruncatedText)`\n  margin-left: 8px;\n`\n\nconst TruncatedSubHeader = styled(ThemedText.SubHeader)`\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\nconst TruncatedSubHeaderSmall = styled(ThemedText.SubHeaderSmall)`\n  color: ${({ theme }) => `${theme.textPrimary}`};\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`\n\nconst RoundedImage = styled.div<{ src?: string }>`\n  height: 36px;\n  width: 36px;\n  border-radius: 36px;\n  background: ${({ src, theme }) => (src ? `url(${src})` : theme.backgroundModule)};\n  background-size: cover;\n  background-position: center;\n  flex-shrink: 0;\n`\n\nconst ChangeCellContainer = styled.div<{ change: number }>`\n  display: flex;\n  color: ${({ theme, change }) => (change >= 0 ? theme.accentSuccess : theme.accentFailure)};\n  justify-content: flex-end;\n  align-items: center;\n  gap: 2px;\n`\n\nconst EthContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`\n\ninterface CellProps {\n  value: {\n    logo?: string\n    name?: string\n    address?: string\n    isVerified?: boolean\n    value?: number\n    change?: number\n  }\n}\n\nexport const CollectionTitleCell = ({ value }: CellProps) => {\n  const isMobile = useIsMobile()\n  return (\n    <CollectionNameContainer>\n      <RoundedImage src={value.logo} />\n      <CollectionName>\n        {isMobile ? (\n          <TruncatedSubHeaderSmall>{value.name}</TruncatedSubHeaderSmall>\n        ) : (\n          <TruncatedSubHeader>{value.name}</TruncatedSubHeader>\n        )}\n      </CollectionName>\n      {value.isVerified && (\n        <span className={styles.verifiedBadge}>\n          <VerifiedIcon />\n        </span>\n      )}\n    </CollectionNameContainer>\n  )\n}\n\nexport const DiscreteNumberCell = ({ value }: CellProps) => (\n  <span>{value.value ? volumeFormatter(value.value) : '-'}</span>\n)\n\nconst getDenominatedValue = (denomination: Denomination, inWei: boolean, value?: number, usdPrice?: number) => {\n  if (denomination === Denomination.ETH) return value\n  if (usdPrice && value) return usdPrice * (inWei ? parseFloat(formatEther(value)) : value)\n\n  return undefined\n}\n\nexport const EthCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, true, value, usdPrice)\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? formatWeiToDecimal(denominatedValue.toString(), true) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.BodySmall : ThemedText.BodyPrimary\n\n  return (\n    <EthContainer>\n      <TextComponent>{value ? formattedValue : '-'}</TextComponent>\n    </EthContainer>\n  )\n}\n\nexport const TextCell = ({ value }: { value: string }) => <ThemedText.BodyPrimary>{value}</ThemedText.BodyPrimary>\n\nexport const VolumeCell = ({\n  value,\n  denomination,\n  usdPrice,\n}: {\n  value?: number\n  denomination: Denomination\n  usdPrice?: number\n}) => {\n  const denominatedValue = getDenominatedValue(denomination, false, value, usdPrice)\n\n  const formattedValue = denominatedValue\n    ? denomination === Denomination.ETH\n      ? ethNumberStandardFormatter(denominatedValue.toString(), false, false, true) + ' ETH'\n      : ethNumberStandardFormatter(denominatedValue, true, false, true)\n    : '-'\n\n  return (\n    <EthContainer>\n      <ThemedText.BodyPrimary>{value ? formattedValue : '-'}</ThemedText.BodyPrimary>\n    </EthContainer>\n  )\n}\n\nexport const ChangeCell = ({ change, children }: { children?: ReactNode; change?: number }) => {\n  const isMobile = useIsMobile()\n  const TextComponent = isMobile ? ThemedText.Caption : ThemedText.BodyPrimary\n  return (\n    <ChangeCellContainer change={change ?? 0}>\n      {!change || change > 0 ? (\n        <SquareArrowUpIcon width=\"20px\" height=\"20px\" />\n      ) : (\n        <SquareArrowDownIcon width=\"20px\" height=\"20px\" />\n      )}\n      <TextComponent color=\"currentColor\">{children || `${change ? Math.abs(Math.round(change)) : 0}%`}</TextComponent>\n    </ChangeCellContainer>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYyB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGM6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRjOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkZDo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGU6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkZTpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGc6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var logo = 'rgw6ez7aj';\nexport var title = 'rgw6ezcp rgw6ezb1 rgw6ezed rgw6ez4dj rgw6ez451 rgw6ez7l3 rgw6ez44p rgw6ez44v rgw6ez2cv rgw6ez2hj';\nexport var address = 'rgw6ezcp rgw6ezb1 rgw6ezed rgw6ez4dj rgw6ez451 rgw6ez7l3 rgw6ez44p rgw6ez44v rgw6ez2cv rgw6ez2hj rgw6ezlj rgw6ez3j rgw6ez1lp rgw6ez177';\nexport var verifiedBadge = 'rgw6ezl7 rgw6ez447 rgw6ez2n7 rgw6ez19p rgw6ez12v rgw6ez451';","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYyB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGM6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRjOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkZDo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGU6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkZTpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGc6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF3KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/explore/Explore.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/explore/Explore.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xbW9yN3ZlMSB7CiAgbWF4LXdpZHRoOiAxMjAwcHg7CiAgbWFyZ2luOiAwIGF1dG87CiAgZGlzcGxheTogZmxleDsKICBmbGV4LWRpcmVjdGlvbjogcm93OwogIGZsZXgtd3JhcDogbm93cmFwOwogIHBvc2l0aW9uOiByZWxhdGl2ZTsKfQouXzFtb3I3dmUzIHsKICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gMC40cyBlYXNlOwp9Ci5fMW1vcjd2ZTggewogIHZlcnRpY2FsLWFsaWduOiBib3R0b207Cn0KLl8xbW9yN3ZlYSB7CiAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTsKICBib3gtc2hhZG93OiAwIDAgMCAxcHggcmdiYSgxNTMsIDE2MSwgMTg5LCAwLjI0KTsKICBib3JkZXItc3BhY2luZzogMHB4IDQwcHg7Cn0KLl8xbW9yN3ZlZDpudGgtbGFzdC1jaGlsZCgxKSB7CiAgcGFkZGluZy1yaWdodDogMjBweDsKfQouXzFtb3I3dmVmOm50aC1sYXN0LWNoaWxkKDEpIHsKICBwYWRkaW5nLXJpZ2h0OiAyMHB4Owp9Ci5fMW1vcjd2ZWg6bnRoLWxhc3QtY2hpbGQoMSkgewogIHBhZGRpbmctcmlnaHQ6IDIwcHg7Cn0=\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var section = '_1mor7ve1 rgw6ez2d7 rgw6ez2bs rgw6ez2ip rgw6ez2ha';\nexport var activityRow = '_1mor7ve3 rgw6ez47p rgw6ez3d rgw6ez3l';\nexport var activeRow = 'rgw6ez6jp';\nexport var timestamp = 'rgw6ez47p rgw6ezap rgw6ez4j1 rgw6ez3e1 rgw6ez39x rgw6ez36v rgw6ez38l rgw6ez3gd rgw6ez3jl';\nexport var marketplaceIcon = '_1mor7ve8 rgw6ez121 rgw6ez18v rgw6ez7a7 rgw6ez3wv rgw6ezlj';\nexport var table = '_1mor7vea rgw6ez4od rgw6ez16v rgw6ez7aj rgw6ez797';\nexport var thead = 'rgw6ezrd rgw6ez4zp rgw6ez7ir rgw6ez79r';\nexport var th = '_1mor7ved rgw6ezcp rgw6ezav rgw6eze7 rgw6ez4dp rgw6ez2nv rgw6ez27d';\nexport var td = '_1mor7vef rgw6ezcp rgw6ezb1 rgw6ezed rgw6ez2n7 rgw6ez26p rgw6ez1jd rgw6ez457 rgw6ez481';\nexport var loadingTd = '_1mor7veh rgw6ezcp rgw6ezb1 rgw6ezed rgw6ez2nj rgw6ez271 rgw6ez1jd rgw6ez457 rgw6ez481';","import { TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { useWindowSize } from 'hooks/useWindowSize'\nimport { useIsMobile } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport { useNavigate } from 'react-router-dom'\nimport { Column, ColumnInstance, HeaderGroup, IdType, useSortBy, useTable } from 'react-table'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { GlowEffect, ThemedText } from 'theme'\n\nimport { Box } from '../../components/Box'\nimport { CollectionTableColumn } from '../../types'\nimport { ArrowRightIcon } from '../icons'\nimport { ColumnHeaders } from './CollectionTable'\nimport * as styles from './Explore.css'\n\n// Default table cell max width\nconst CELL_WIDTH = '160px'\n// Collection Name cell max widths\nconst MOBILE_CELL_WIDTH = '240px'\nconst DESKTOP_CELL_WIDTH = '360px'\n\nconst RankCellContainer = styled.div`\n  display: flex;\n  align-items: center;\n  padding-left: 24px;\n  gap: 12px;\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    padding-left: 8px;\n  }\n`\n\nconst StyledRow = styled.tr`\n  cursor: pointer;\n  :hover {\n    background: ${({ theme }) => theme.stateOverlayHover};\n  }\n  :active {\n    background: ${({ theme }) => theme.stateOverlayPressed};\n  }\n`\n\nconst StyledLoadingRow = styled.tr`\n  height: 80px;\n`\n\nconst StyledHeader = styled.th<{ disabled?: boolean }>`\n  ${({ disabled }) => !disabled && `cursor: pointer;`}\n\n  :hover {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.hover};`}\n  }\n\n  :active {\n    ${({ theme, disabled }) => !disabled && `opacity: ${theme.opacity.click};`}\n  }\n`\n\nconst StyledLoadingHolder = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n  align-items: center;\n`\n\nconst StyledCollectionNameHolder = styled.div`\n  display: flex;\n  margin-left: 24px;\n  gap: 8px;\n  align-items: center;\n`\n\nconst StyledImageHolder = styled(LoadingBubble)`\n  width: 36px;\n  height: 36px;\n  border-radius: 36px;\n`\n\nconst StyledRankHolder = styled(LoadingBubble)`\n  width: 8px;\n  height: 16px;\n  margin-right: 12px;\n`\n\nconst DEFAULT_TRENDING_TABLE_QUERY_AMOUNT = 10\n\ninterface TableProps<D extends Record<string, unknown>> {\n  columns: Column<CollectionTableColumn>[]\n  data: CollectionTableColumn[]\n  smallHiddenColumns: IdType<D>[]\n  mediumHiddenColumns: IdType<D>[]\n  largeHiddenColumns: IdType<D>[]\n}\nexport function Table<D extends Record<string, unknown>>({\n  columns,\n  data,\n  smallHiddenColumns,\n  mediumHiddenColumns,\n  largeHiddenColumns,\n  ...props\n}: TableProps<D>) {\n  const theme = useTheme()\n  const { chainId } = useWeb3React()\n  const { width } = useWindowSize()\n  const isMobile = useIsMobile()\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow, setHiddenColumns, visibleColumns } =\n    useTable(\n      {\n        columns,\n        data,\n        initialState: {\n          sortBy: [\n            {\n              desc: true,\n              id: ColumnHeaders.Volume,\n            },\n          ],\n        },\n        ...props,\n      },\n      useSortBy\n    )\n\n  const navigate = useNavigate()\n\n  useEffect(() => {\n    if (!width) return\n\n    if (width <= theme.breakpoint.sm) {\n      setHiddenColumns(smallHiddenColumns)\n    } else if (width <= theme.breakpoint.md) {\n      setHiddenColumns(mediumHiddenColumns)\n    } else if (width <= theme.breakpoint.lg) {\n      setHiddenColumns(largeHiddenColumns)\n    } else {\n      setHiddenColumns([])\n    }\n  }, [width, setHiddenColumns, columns, smallHiddenColumns, mediumHiddenColumns, largeHiddenColumns, theme.breakpoint])\n\n  if (data.length === 0) {\n    return <LoadingTable headerGroups={headerGroups} visibleColumns={visibleColumns} {...getTableProps()} />\n  }\n\n  return (\n    <GlowEffect>\n      <table {...getTableProps()} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? (isMobile ? '16px' : '52px') : 0,\n                    }}\n                    disabled={column.disableSortBy}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {rows.map((row, i) => {\n            prepareRow(row)\n\n            return (\n              <TraceEvent\n                events={[BrowserEvent.onClick]}\n                name={NFTEventName.NFT_TRENDING_ROW_SELECTED}\n                properties={{ collection_address: row.original.collection.address, chain_id: chainId }}\n                element={InterfaceElementName.NFT_TRENDING_ROW}\n                key={i}\n              >\n                <StyledRow\n                  {...row.getRowProps()}\n                  key={row.id}\n                  onClick={() => navigate(`/nfts/collection/${row.original.collection.address}`)}\n                  data-testid=\"nft-trending-collection\"\n                >\n                  {row.cells.map((cell, cellIndex) => {\n                    return (\n                      <td\n                        className={styles.td}\n                        {...cell.getCellProps()}\n                        key={cellIndex}\n                        style={{\n                          maxWidth: cellIndex === 0 ? (isMobile ? MOBILE_CELL_WIDTH : DESKTOP_CELL_WIDTH) : CELL_WIDTH,\n                        }}\n                      >\n                        {cellIndex === 0 ? (\n                          <RankCellContainer>\n                            {!isMobile && (\n                              <ThemedText.BodySecondary fontSize=\"14px\" lineHeight=\"20px\">\n                                {i + 1}\n                              </ThemedText.BodySecondary>\n                            )}\n                            {cell.render('Cell')}\n                          </RankCellContainer>\n                        ) : (\n                          cell.render('Cell')\n                        )}\n                      </td>\n                    )\n                  })}\n                </StyledRow>\n              </TraceEvent>\n            )\n          })}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n\ninterface LoadingTableProps {\n  headerGroups: HeaderGroup<CollectionTableColumn>[]\n  visibleColumns: ColumnInstance<CollectionTableColumn>[]\n}\n\nfunction LoadingTable({ headerGroups, visibleColumns, ...props }: LoadingTableProps) {\n  return (\n    <GlowEffect>\n      <table {...props} className={styles.table}>\n        <thead className={styles.thead}>\n          {headerGroups.map((headerGroup) => (\n            <tr {...headerGroup.getHeaderGroupProps()} key={headerGroup.id}>\n              {headerGroup.headers.map((column, index) => {\n                return (\n                  <StyledHeader\n                    className={styles.th}\n                    {...column.getHeaderProps(column.getSortByToggleProps())}\n                    style={{\n                      textAlign: index === 0 ? 'left' : 'right',\n                      paddingLeft: index === 0 ? '52px' : 0,\n                    }}\n                    disabled={index === 0}\n                    key={index}\n                  >\n                    <Box as=\"span\" color=\"accentAction\" position=\"relative\">\n                      {column.isSorted ? (\n                        column.isSortedDesc ? (\n                          <ArrowRightIcon style={{ transform: 'rotate(90deg)', position: 'absolute' }} />\n                        ) : (\n                          <ArrowRightIcon style={{ transform: 'rotate(-90deg)', position: 'absolute' }} />\n                        )\n                      ) : (\n                        ''\n                      )}\n                    </Box>\n                    <Box as=\"span\" paddingLeft={column.isSorted ? '18' : '0'}>\n                      {column.render('Header')}\n                    </Box>\n                  </StyledHeader>\n                )\n              })}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...props}>\n          {[...Array(DEFAULT_TRENDING_TABLE_QUERY_AMOUNT)].map((_, index) => (\n            <StyledLoadingRow key={index}>\n              {[...Array(visibleColumns.length)].map((_, cellIndex) => {\n                return (\n                  <td className={styles.loadingTd} key={cellIndex}>\n                    {cellIndex === 0 ? (\n                      <StyledCollectionNameHolder>\n                        <StyledRankHolder />\n                        <StyledImageHolder />\n                        <LoadingBubble />\n                      </StyledCollectionNameHolder>\n                    ) : (\n                      <StyledLoadingHolder>\n                        <LoadingBubble />\n                      </StyledLoadingHolder>\n                    )}\n                  </td>\n                )\n              })}\n            </StyledLoadingRow>\n          ))}\n        </tbody>\n      </table>\n    </GlowEffect>\n  )\n}\n","import { OpacityHoverState } from 'components/Common'\nimport ms from 'ms.macro'\nimport { CollectionTableColumn, Denomination, TimePeriod, VolumeType } from 'nft/types'\nimport { fetchPrice } from 'nft/utils'\nimport { useMemo, useState } from 'react'\nimport { useQuery } from 'react-query'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport { fetchTrendingCollections } from '../../queries'\nimport CollectionTable from './CollectionTable'\n\nconst timeOptions: { label: string; value: TimePeriod }[] = [\n  { label: '1D', value: TimePeriod.OneDay },\n  { label: '1W', value: TimePeriod.SevenDays },\n  { label: '1M', value: TimePeriod.ThirtyDays },\n  { label: 'All', value: TimePeriod.AllTime },\n]\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  max-width: 1200px;\n  padding: 0 16px;\n`\n\nconst StyledHeader = styled.div`\n  color: ${({ theme }) => theme.textPrimary};\n  font-size: 36px;\n  line-height: 44px;\n  weight: 500;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    font-size: 20px;\n    line-height: 28px;\n  }\n`\n\nconst FiltersRow = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-top: 36px;\n  margin-bottom: 20px;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    margin-bottom: 16px;\n    margin-top: 16px;\n  }\n`\n\nconst Filter = styled.div`\n  display: flex;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  padding: 4px;\n`\n\nconst Selector = styled.div<{ active: boolean }>`\n  padding: 8px 12px;\n  border-radius: 12px;\n  background: ${({ active, theme }) => (active ? theme.backgroundInteractive : 'none')};\n  cursor: pointer;\n\n  ${OpacityHoverState}\n`\n\nconst StyledSelectorText = styled(ThemedText.SubHeader)<{ active: boolean }>`\n  color: ${({ theme, active }) => (active ? theme.textPrimary : theme.textSecondary)};\n`\n\nconst TrendingCollections = () => {\n  const [timePeriod, setTimePeriod] = useState<TimePeriod>(TimePeriod.OneDay)\n  const [isEthToggled, setEthToggled] = useState(true)\n\n  const { isSuccess, data } = useQuery(\n    ['trendingCollections', timePeriod],\n    () => {\n      return fetchTrendingCollections({ volumeType: 'eth', timePeriod, size: 100 })\n    },\n    {\n      refetchOnReconnect: false,\n      refetchOnWindowFocus: false,\n      refetchOnMount: false,\n      refetchInterval: 5000,\n    }\n  )\n\n  const { data: usdPrice } = useQuery(['fetchPrice', {}], () => fetchPrice(), {\n    refetchOnReconnect: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchInterval: ms`1m`,\n  })\n\n  const trendingCollections = useMemo(() => {\n    if (isSuccess && data) {\n      return data.map((d) => ({\n        ...d,\n        collection: {\n          name: d.name,\n          logo: d.imageUrl,\n          address: d.address,\n          isVerified: d.isVerified,\n        },\n        volume: {\n          value: d.volume,\n          change: d.volumeChange,\n          type: 'eth' as VolumeType,\n        },\n        floor: {\n          value: d.floor,\n          change: d.floorChange,\n        },\n        owners: {\n          value: d.owners,\n          change: d.ownersChange,\n        },\n        sales: d.sales,\n        totalSupply: d.totalSupply,\n        denomination: isEthToggled ? Denomination.ETH : Denomination.USD,\n        usdPrice,\n      }))\n    } else return [] as CollectionTableColumn[]\n  }, [data, isSuccess, isEthToggled, usdPrice])\n\n  return (\n    <ExploreContainer>\n      <StyledHeader>Trending NFT collections</StyledHeader>\n      <FiltersRow>\n        <Filter>\n          {timeOptions.map((timeOption) => {\n            return (\n              <Selector\n                key={timeOption.value}\n                active={timeOption.value === timePeriod}\n                onClick={() => setTimePeriod(timeOption.value)}\n              >\n                <StyledSelectorText lineHeight=\"20px\" active={timeOption.value === timePeriod}>\n                  {timeOption.label}\n                </StyledSelectorText>\n              </Selector>\n            )\n          })}\n        </Filter>\n        <Filter onClick={() => setEthToggled(!isEthToggled)}>\n          <Selector active={isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={isEthToggled}>\n              ETH\n            </StyledSelectorText>\n          </Selector>\n          <Selector active={!isEthToggled}>\n            <StyledSelectorText lineHeight=\"20px\" active={!isEthToggled}>\n              USD\n            </StyledSelectorText>\n          </Selector>\n        </Filter>\n      </FiltersRow>\n      <CollectionTable data={trendingCollections} timePeriod={timePeriod} />\n    </ExploreContainer>\n  )\n}\n\nexport default TrendingCollections\n","import { Trace } from '@uniswap/analytics'\nimport { InterfacePageName } from '@uniswap/analytics-events'\nimport Banner from 'nft/components/explore/Banner'\nimport TrendingCollections from 'nft/components/explore/TrendingCollections'\nimport { useBag } from 'nft/hooks'\nimport { useEffect } from 'react'\nimport styled from 'styled-components/macro'\n\nconst ExploreContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 100%;\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.md}px`}) {\n    gap: 16px;\n  }\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    gap: 0px;\n  }\n`\n\nconst NftExplore = () => {\n  const setBagExpanded = useBag((state) => state.setBagExpanded)\n\n  useEffect(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: false })\n  }, []) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <Trace page={InterfacePageName.NFT_EXPLORE_PAGE} shouldLogImpression>\n        <ExploreContainer>\n          <Banner />\n          <TrendingCollections />\n        </ExploreContainer>\n      </Trace>\n    </>\n  )\n}\n\nexport default NftExplore\n"],"sourceRoot":""}