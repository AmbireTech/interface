{"version":3,"sources":["nft/hooks/useBag.ts","nft/hooks/useFiltersExpanded.ts","nft/hooks/useIsMobile.ts","nft/hooks/useMarketplaceSelect.ts","nft/hooks/useNFTList.ts","nft/hooks/useProfilePageState.ts","nft/hooks/useNFTSelect.ts","nft/hooks/useSearchHistory.ts","nft/hooks/useSelectAsset.ts","nft/hooks/useSellAsset.ts","nft/hooks/useSendTransaction.ts","nft/hooks/useTransactionResponse.ts","nft/hooks/useSweep.ts","nft/hooks/useWalletBalance.ts","nft/hooks/useWalletCollections.ts","nft/hooks/useCollectionFilters.ts","nft/hooks/useIsCollectionLoading.ts","nft/utils/txRoute/combineItemsWithTxRoute.ts"],"names":["useBag","create","devtools","set","get","bagStatus","BagStatus","ADDING_TO_BAG","setBagStatus","newBagStatus","markAssetAsReviewed","asset","toKeep","itemsInBag","length","itemsInBagCopy","index","findIndex","item","id","status","BagItemStatus","REVIEWED","splice","didOpenUnavailableAssets","setDidOpenUnavailableAssets","didOpen","bagExpanded","toggleBag","isLocked","setLocked","_isLocked","setItemsInBag","items","totalEthPrice","BigNumber","from","setTotalEthPrice","totalUsdPrice","undefined","setTotalUsdPrice","addAssetToBag","assetWithId","uuidv4","ADDED_TO_BAG","removeAssetFromBag","itemsCopy","n","tokenId","address","reset","name","useFiltersExpandedStore","persist","isExpanded","setExpanded","expanded","useFiltersExpanded","s","isClient","window","getIsMobile","innerWidth","breakpoints","sm","useIsMobile","useState","isMobile","setIsMobile","useEffect","handleResize","addEventListener","removeEventListener","options","select","option","find","o","filter","x","useNFTList","looksRareNonce","listingStatus","ListingStatus","DEFINED","listings","collectionsRequiringApproval","setLooksRareNonce","nonce","getLooksRareNonce","setListingStatus","setListings","setCollectionsRequiringApproval","collections","useProfilePageState","selectedNFTs","isUniversalPrice","selectNFT","nft","toggleUniversalPrice","v","setUniversalPrice","price","map","setSingleNFTPrice","found","i","state","ProfilePageStateType","VIEWING","setProfilePageState","newState","history","addItem","historyCopy","unshift","selectedAssets","selectAsset","removeAsset","assetsCopy","useSellAsset","sellAssets","selectSellAsset","removeSellAsset","setGlobalExpiration","expirationTime","setAssetListPrice","marketplace","listingIndex","newListings","listing","overrideFloorPrice","marketAgnosticPrice","push","setGlobalMarketplaces","marketplaces","newListing","removeAssetMarketplace","assetIndex","indexOf","marketplaceIndex","oldMarket","assetCopy","JSON","parse","stringify","addMarketplaceWarning","warning","listingWarnings","removeMarketplaceWarning","setGlobalOverride","warningIndex","message","includes","forEach","removeAllMarketplaceWarnings","useSendTransaction","TxStateType","New","txHash","clearTxHash","setState","sendTransaction","signer","transactionData","a","getAddress","txNoGasLimit","to","value","valueToSend","data","estimateGas","gasLimit","mul","div","tx","Signing","res","Confirming","hash","wait","txReceipt","nftsPurchased","findNFTsPurchased","route","nftsNotPurchased","findNFTsNotPurchased","Success","Failed","console","log","code","Denied","Invalid","signerAddress","toBuy","txRoute","logs","erc721Interface","Interface","ERC721","erc1155Interface","ERC1155","cryptopunksMarketInterface","CryptoPunksMarket","transferredErc721","topics","getEventTopic","hexStripZeros","toLowerCase","parseInt","toString","transferredErc1155","parseLog","args","transferredCryptopunks","allTransferred","transferredItems","assetToBuy","some","purchasedNft","combineBuyItemsWithTxRoute","selectedAsset","useTransactionResponse","sweepAssets","setSweepAssets","assets","removeSweepAsset","transactionResponse","setTransactionResponse","txResponse","useWalletBalance","useWeb3React","account","provider","balanceString","useNativeCurrencyBalances","toSignificant","balance","weiBalance","parseEther","useWalletCollections","walletAssets","walletCollections","displayAssets","collectionFilters","listFilter","setWalletAssets","asset_contract","schema_name","setWalletCollections","setCollectionFilters","clearCollectionFilters","setListFilter","setDisplayAssets","filterWalletAssets","listing_date","SortBy","SortByPointers","HighToLow","LowToHigh","RareToCommon","CommonToRare","initialCollectionFilterState","minPrice","maxPrice","minRarity","maxRarity","traits","markets","marketCount","buyNow","search","sortBy","showFullTraitName","shouldShow","trait_value","trait_type","useCollectionFilters","setSortBy","setSearch","setBuyNow","setMarketCount","addMarket","market","removeMarket","_market","addTrait","trait","removeTrait","setMinPrice","setMaxPrice","setMinRarity","range","setMaxRarity","toggleShowFullTraitName","useIsCollectionLoading","isCollectionNftsLoading","setIsCollectionNftsLoading","isCollectionStatsLoading","setIsCollectionStatsLoading","r","action","routeAsset","isTheSame","assetOut","isUnavailable","oldPrice","newPrice","newPriceInfo","updatedPriceInfo","priceInfo","basePrice","formatWeiToDecimal","orderSource"],"mappings":"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","file":"static/js/7.d160a8c2.chunk.js","sourcesContent":["import { BigNumber } from '@ethersproject/bignumber'\nimport { BagItem, BagItemStatus, BagStatus, UpdatedGenieAsset } from 'nft/types'\nimport { v4 as uuidv4 } from 'uuid'\nimport create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface BagState {\n  bagStatus: BagStatus\n  setBagStatus: (state: BagStatus) => void\n  itemsInBag: BagItem[]\n  setItemsInBag: (items: BagItem[]) => void\n  totalEthPrice: BigNumber\n  setTotalEthPrice: (totalEthPrice: BigNumber) => void\n  totalUsdPrice: number | undefined\n  setTotalUsdPrice: (totalUsdPrice: number | undefined) => void\n  addAssetToBag: (asset: UpdatedGenieAsset) => void\n  removeAssetFromBag: (asset: UpdatedGenieAsset) => void\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  bagExpanded: boolean\n  toggleBag: () => void\n  isLocked: boolean\n  setLocked: (isLocked: boolean) => void\n  reset: () => void\n}\n\nexport const useBag = create<BagState>()(\n  devtools(\n    (set, get) => ({\n      bagStatus: BagStatus.ADDING_TO_BAG,\n      setBagStatus: (newBagStatus) =>\n        set(() => ({\n          bagStatus: newBagStatus,\n        })),\n      markAssetAsReviewed: (asset, toKeep) =>\n        set(({ itemsInBag }) => {\n          if (itemsInBag.length === 0) return { itemsInBag: [] }\n          const itemsInBagCopy = [...itemsInBag]\n          const index = itemsInBagCopy.findIndex((item) => item.asset.id === asset.id)\n          if (!toKeep && index !== -1) itemsInBagCopy.splice(index, 1)\n          else if (index !== -1) {\n            itemsInBagCopy[index].status = BagItemStatus.REVIEWED\n          }\n          return {\n            itemsInBag: itemsInBagCopy,\n          }\n        }),\n      didOpenUnavailableAssets: false,\n      setDidOpenUnavailableAssets: (didOpen) =>\n        set(() => ({\n          didOpenUnavailableAssets: didOpen,\n        })),\n      bagExpanded: false,\n      toggleBag: () =>\n        set(({ bagExpanded }) => ({\n          bagExpanded: !bagExpanded,\n        })),\n      isLocked: false,\n      setLocked: (_isLocked) =>\n        set(() => ({\n          isLocked: _isLocked,\n        })),\n      itemsInBag: [],\n      setItemsInBag: (items) =>\n        set(() => ({\n          itemsInBag: items,\n        })),\n      totalEthPrice: BigNumber.from(0),\n      setTotalEthPrice: (totalEthPrice) =>\n        set(() => ({\n          totalEthPrice,\n        })),\n      totalUsdPrice: undefined,\n      setTotalUsdPrice: (totalUsdPrice) =>\n        set(() => ({\n          totalUsdPrice,\n        })),\n      addAssetToBag: (asset) =>\n        set(({ itemsInBag }) => {\n          if (get().isLocked) return { itemsInBag: get().itemsInBag }\n          const assetWithId = { asset: { id: uuidv4(), ...asset }, status: BagItemStatus.ADDED_TO_BAG }\n          if (itemsInBag.length === 0)\n            return {\n              itemsInBag: [assetWithId],\n              bagStatus: BagStatus.ADDING_TO_BAG,\n            }\n          else\n            return {\n              itemsInBag: [...itemsInBag, assetWithId],\n              bagStatus: BagStatus.ADDING_TO_BAG,\n            }\n        }),\n      removeAssetFromBag: (asset) => {\n        set(({ itemsInBag }) => {\n          if (get().isLocked) return { itemsInBag: get().itemsInBag }\n          if (itemsInBag.length === 0) return { itemsInBag: [] }\n          const itemsCopy = [...itemsInBag]\n          const index = itemsCopy.findIndex((n) =>\n            asset.id ? n.asset.id === asset.id : n.asset.tokenId === asset.tokenId && n.asset.address === asset.address\n          )\n          if (index === -1) return { itemsInBag: get().itemsInBag }\n          itemsCopy.splice(index, 1)\n          return { itemsInBag: itemsCopy }\n        })\n      },\n      reset: () =>\n        set(() => {\n          if (!get().isLocked)\n            return {\n              bagStatus: BagStatus.ADDING_TO_BAG,\n              itemsInBag: [],\n              didOpenUnavailableAssets: false,\n              isLocked: false,\n            }\n          else return {}\n        }),\n    }),\n    { name: 'useBag' }\n  )\n)\n","import create from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\n\ninterface State {\n  isExpanded: boolean\n  setExpanded: (expanded: boolean) => void\n}\n\nconst useFiltersExpandedStore = create<State>()(\n  persist(\n    devtools(\n      (set) => ({\n        isExpanded: false,\n        setExpanded: (expanded) =>\n          set(() => ({\n            isExpanded: expanded,\n          })),\n      }),\n      { name: 'useFiltersExpanded' }\n    ),\n    { name: 'useFiltersExpanded' }\n  )\n)\n\nexport const useFiltersExpanded = (): [boolean, (expanded: boolean) => void] => {\n  const isExpanded = useFiltersExpandedStore((s) => s.isExpanded)\n  const setExpanded = useFiltersExpandedStore((s) => s.setExpanded)\n\n  return [isExpanded, setExpanded]\n}\n","import { breakpoints } from 'nft/css/sprinkles.css'\nimport { useEffect, useState } from 'react'\n\nconst isClient = typeof window !== 'undefined'\n\nfunction getIsMobile() {\n  return isClient ? window.innerWidth < breakpoints.sm : false\n}\n\nexport function useIsMobile(): boolean {\n  const [isMobile, setIsMobile] = useState(getIsMobile)\n\n  useEffect(() => {\n    function handleResize() {\n      setIsMobile(getIsMobile())\n    }\n\n    if (isClient) {\n      window.addEventListener('resize', handleResize)\n      return () => {\n        window.removeEventListener('resize', handleResize)\n      }\n    }\n    return undefined\n  }, [])\n\n  return isMobile\n}\n","import create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nexport type MarketplaceOption = { name: string; icon: string }\n\ninterface State {\n  options: MarketplaceOption[]\n  select: (o: MarketplaceOption) => void\n}\n\nexport const useMarketplaceSelect = create<State>()(\n  devtools(\n    (set) => ({\n      options: [],\n      select: (option) =>\n        set(({ options }) => {\n          if (options.find((o) => option.name === o.name))\n            return { options: options.filter((x) => x.name !== option.name) }\n          else return { options: [...options, option] }\n        }),\n    }),\n    { name: 'useMarketplaceSelect' }\n  )\n)\n","import { CollectionRow, ListingRow, ListingStatus } from 'nft/types'\nimport create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface NFTListState {\n  looksRareNonce: number\n  listingStatus: ListingStatus\n  listings: ListingRow[]\n  collectionsRequiringApproval: CollectionRow[]\n  setLooksRareNonce: (nonce: number) => void\n  getLooksRareNonce: () => number\n  setListingStatus: (status: ListingStatus) => void\n  setListings: (listings: ListingRow[]) => void\n  setCollectionsRequiringApproval: (collections: CollectionRow[]) => void\n}\n\nexport const useNFTList = create<NFTListState>()(\n  devtools((set, get) => ({\n    looksRareNonce: 0,\n    listingStatus: ListingStatus.DEFINED,\n    listings: [],\n    collectionsRequiringApproval: [],\n    setLooksRareNonce: (nonce) =>\n      set(() => {\n        return { looksRareNonce: nonce }\n      }),\n    getLooksRareNonce: () => {\n      return get().looksRareNonce\n    },\n    setListingStatus: (status) =>\n      set(() => {\n        return { listingStatus: status }\n      }),\n    setListings: (listings) =>\n      set(() => {\n        return { listings }\n      }),\n    setCollectionsRequiringApproval: (collections) =>\n      set(() => {\n        return { collectionsRequiringApproval: collections }\n      }),\n  }))\n)\n","import create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport { ProfilePageStateType } from '../types'\n\ninterface profilePageState {\n  /**\n   * State of user settings\n   */\n  state: ProfilePageStateType\n  setProfilePageState: (state: ProfilePageStateType) => void\n}\n\nexport const useProfilePageState = create<profilePageState>()(\n  devtools(\n    (set) => ({\n      state: ProfilePageStateType.VIEWING,\n      setProfilePageState: (newState) =>\n        set(() => ({\n          state: newState,\n        })),\n    }),\n    { name: 'useProfilePageState' }\n  )\n)\n","import create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport { OpenSeaAsset } from '../types'\n\ninterface SelectNFTState {\n  /**\n   * NFTs selected by a user\n   */\n  selectedNFTs: (OpenSeaAsset & { price?: number })[]\n\n  selectNFT: (nft: OpenSeaAsset & { price?: number }) => void\n  reset: () => void\n  setUniversalPrice: (price: number) => void\n  toggleUniversalPrice: (v: boolean) => void\n  setSingleNFTPrice: (id: number, price: number) => void\n  isUniversalPrice: boolean\n}\n\nexport const useNFTSelect = create<SelectNFTState>()(\n  devtools(\n    (set) => ({\n      selectedNFTs: [],\n      isUniversalPrice: false,\n      selectNFT: (nft) =>\n        set(({ selectedNFTs }) => {\n          if (selectedNFTs.length === 0) return { selectedNFTs: [nft] }\n          else if (!!selectedNFTs.find((x) => x.id === nft.id))\n            return { selectedNFTs: selectedNFTs.filter((n) => n.id !== nft.id) }\n          else return { selectedNFTs: [...selectedNFTs, nft] }\n        }),\n      reset: () => set(() => ({ selectedNFTs: [] })),\n      toggleUniversalPrice: (v) => set(() => ({ isUniversalPrice: v })),\n      setUniversalPrice: (price) =>\n        set(({ selectedNFTs }) => {\n          return {\n            selectedNFTs: selectedNFTs.map((n) => ({ ...n, price })),\n            isUniversalPrice: true,\n          }\n        }),\n      setSingleNFTPrice: (id, price) =>\n        set(({ selectedNFTs }) => {\n          const found = selectedNFTs.find((i) => i.id === id)\n\n          return {\n            selectedNFTs: [...selectedNFTs.filter((n) => n.id !== id), { ...found, price }],\n          }\n        }),\n    }),\n    { name: 'useNFTSelect' }\n  )\n)\n","import { FungibleToken, GenieCollection } from 'nft/types'\nimport create from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\n\ninterface SearchHistoryProps {\n  history: (FungibleToken | GenieCollection)[]\n  addItem: (item: FungibleToken | GenieCollection) => void\n}\n\nexport const useSearchHistory = create<SearchHistoryProps>()(\n  persist(\n    devtools((set) => ({\n      history: [],\n      addItem: (item: FungibleToken | GenieCollection) => {\n        set(({ history }) => {\n          const historyCopy = [...history]\n          if (historyCopy.length === 0 || historyCopy[0].address !== item.address) historyCopy.unshift(item)\n          return { history: historyCopy }\n        })\n      },\n    })),\n    { name: 'useSearchHistory' }\n  )\n)\n","import { v4 as uuidv4 } from 'uuid'\nimport create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport { GenieAsset } from '../types'\n\ninterface SelectAssetState {\n  selectedAssets: GenieAsset[]\n  selectAsset: (asset: GenieAsset) => void\n  removeAsset: (asset: GenieAsset) => void\n  reset: () => void\n}\n\nexport const useSelectAsset = create<SelectAssetState>()(\n  devtools((set) => ({\n    selectedAssets: [],\n    selectAsset: (asset) =>\n      set(({ selectedAssets }) => {\n        const assetWithId = { id: uuidv4(), ...asset }\n        if (selectedAssets.length === 0) return { selectedAssets: [assetWithId] }\n        else return { selectedAssets: [...selectedAssets, assetWithId] }\n      }),\n    removeAsset: (asset) => {\n      set(({ selectedAssets }) => {\n        if (selectedAssets.length === 0) return { selectedAssets: [] }\n        else selectedAssets.find((x) => x.tokenId === asset.tokenId && x.address === asset.address)\n        const assetsCopy = [...selectedAssets]\n        assetsCopy.splice(\n          selectedAssets.findIndex((n) => n.tokenId === asset.tokenId && n.address === asset.address),\n          1\n        )\n        return { selectedAssets: assetsCopy }\n      })\n    },\n    reset: () => set(() => ({ selectedAssets: [] })),\n  }))\n)\n","import { v4 as uuidv4 } from 'uuid'\nimport create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport { ListingMarket, ListingWarning, WalletAsset } from '../types'\n\ninterface SellAssetState {\n  sellAssets: WalletAsset[]\n  selectSellAsset: (asset: WalletAsset) => void\n  removeSellAsset: (asset: WalletAsset) => void\n  reset: () => void\n  setGlobalExpiration: (expirationTime: number) => void\n  setAssetListPrice: (asset: WalletAsset, price?: number, marketplace?: ListingMarket) => void\n  setGlobalMarketplaces: (marketplaces: ListingMarket[]) => void\n  removeAssetMarketplace: (asset: WalletAsset, marketplace: ListingMarket) => void\n  addMarketplaceWarning: (asset: WalletAsset, warning: ListingWarning) => void\n  removeMarketplaceWarning: (asset: WalletAsset, warning: ListingWarning, setGlobalOverride?: boolean) => void\n  removeAllMarketplaceWarnings: () => void\n}\n\nexport const useSellAsset = create<SellAssetState>()(\n  devtools(\n    (set) => ({\n      sellAssets: [],\n      selectSellAsset: (asset) =>\n        set(({ sellAssets }) => {\n          const assetWithId = { id: uuidv4(), ...asset }\n          if (sellAssets.length === 0) return { sellAssets: [assetWithId] }\n          else return { sellAssets: [...sellAssets, assetWithId] }\n        }),\n      removeSellAsset: (asset) => {\n        set(({ sellAssets }) => {\n          if (sellAssets.length === 0) return { sellAssets: [] }\n          else sellAssets.find((x) => x.id === asset.id)\n          const assetsCopy = [...sellAssets]\n          assetsCopy.splice(\n            sellAssets.findIndex((n) => n.id === asset.id),\n            1\n          )\n          return { sellAssets: assetsCopy }\n        })\n      },\n      reset: () => set(() => ({ sellAssets: [] })),\n      setGlobalExpiration: (expirationTime) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          assetsCopy.map((asset) => {\n            asset.expirationTime = expirationTime\n            return asset\n          })\n          return { sellAssets: assetsCopy }\n        })\n      },\n      setAssetListPrice: (asset, price, marketplace?) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          if (marketplace) {\n            const listingIndex = asset.newListings?.findIndex(\n              (listing) => listing.marketplace.name === marketplace.name\n            )\n            if (asset.newListings && listingIndex != null && listingIndex > -1) {\n              asset.newListings[listingIndex] = { price, marketplace, overrideFloorPrice: false }\n              if (listingIndex === 0) asset.marketAgnosticPrice = price\n            } else asset.newListings?.push({ price, marketplace, overrideFloorPrice: false })\n          } else asset.marketAgnosticPrice = price\n          const index = sellAssets.findIndex((n) => n.id === asset.id)\n          assetsCopy[index] = asset\n          return { sellAssets: assetsCopy }\n        })\n      },\n      setGlobalMarketplaces: (marketplaces) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          assetsCopy.map((asset) => {\n            asset.marketplaces = marketplaces\n            asset.newListings = []\n            for (const marketplace of marketplaces) {\n              const listingIndex = asset.newListings.findIndex(\n                (listing) => listing.marketplace.name === marketplace.name\n              )\n              const newListing = {\n                price: asset.marketAgnosticPrice,\n                marketplace,\n                overrideFloorPrice: false,\n              }\n              listingIndex > -1 ? (asset.newListings[listingIndex] = newListing) : asset.newListings.push(newListing)\n            }\n            return asset\n          })\n          return { sellAssets: assetsCopy }\n        })\n      },\n      removeAssetMarketplace: (asset, marketplace) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          const assetIndex = sellAssets.indexOf(asset)\n          const marketplaceIndex =\n            asset.marketplaces?.findIndex((oldMarket) => oldMarket.name === marketplace.name) ?? -1\n          const listingIndex = asset.newListings?.findIndex((listing) => listing.marketplace.name === marketplace.name)\n          const assetCopy = JSON.parse(JSON.stringify(asset))\n          if (marketplaceIndex > -1) {\n            assetCopy.marketplaces.splice(marketplaceIndex, 1)\n            assetCopy.newListings.splice(listingIndex, 1)\n          }\n          assetsCopy.splice(assetIndex, 1, assetCopy)\n          return { sellAssets: assetsCopy }\n        })\n      },\n      addMarketplaceWarning: (asset, warning) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          asset.listingWarnings?.push(warning)\n          const index = sellAssets.findIndex((n) => n.id === asset.id)\n          assetsCopy[index] = asset\n          return { sellAssets: assetsCopy }\n        })\n      },\n      removeMarketplaceWarning: (asset, warning, setGlobalOverride?) => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          if (asset.listingWarnings === undefined || asset.newListings === undefined) return { sellAssets: assetsCopy }\n          const warningIndex =\n            asset.listingWarnings?.findIndex((n) => n.marketplace.name === warning.marketplace.name) ?? -1\n          asset.listingWarnings?.splice(warningIndex, 1)\n          if (warning?.message?.includes('LISTING BELOW FLOOR')) {\n            if (setGlobalOverride) {\n              asset.newListings?.forEach((listing) => (listing.overrideFloorPrice = true))\n            } else {\n              const listingIndex =\n                asset.newListings?.findIndex((n) => n.marketplace.name === warning.marketplace.name) ?? -1\n              asset.newListings[listingIndex].overrideFloorPrice = true\n            }\n          }\n          const index = sellAssets.findIndex((n) => n.id === asset.id)\n          assetsCopy[index] = asset\n          return { sellAssets: assetsCopy }\n        })\n      },\n      removeAllMarketplaceWarnings: () => {\n        set(({ sellAssets }) => {\n          const assetsCopy = [...sellAssets]\n          assetsCopy.map((asset) => (asset.listingWarnings = []))\n          return { sellAssets: assetsCopy }\n        })\n      },\n    }),\n    { name: 'useSelectAsset' }\n  )\n)\n","import { Interface } from '@ethersproject/abi'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { hexStripZeros } from '@ethersproject/bytes'\nimport { ContractReceipt } from '@ethersproject/contracts'\nimport type { JsonRpcSigner } from '@ethersproject/providers'\nimport create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport ERC721 from '../../abis/erc721.json'\nimport ERC1155 from '../../abis/erc1155.json'\nimport CryptoPunksMarket from '../abis/CryptoPunksMarket.json'\nimport { GenieAsset, RouteResponse, RoutingItem, TxResponse, TxStateType, UpdatedGenieAsset } from '../types'\nimport { combineBuyItemsWithTxRoute } from '../utils/txRoute/combineItemsWithTxRoute'\n\ninterface TxState {\n  state: TxStateType\n  setState: (state: TxStateType) => void\n  txHash: string\n  clearTxHash: () => void\n  sendTransaction: (\n    signer: JsonRpcSigner,\n    selectedAssets: UpdatedGenieAsset[],\n    transactionData: RouteResponse\n  ) => Promise<TxResponse | undefined>\n}\n\nexport const useSendTransaction = create<TxState>()(\n  devtools(\n    (set) => ({\n      state: TxStateType.New,\n      txHash: '',\n      clearTxHash: () => set({ txHash: '' }),\n      setState: (newState) => set(() => ({ state: newState })),\n      sendTransaction: async (signer, selectedAssets, transactionData) => {\n        const address = await signer.getAddress()\n        try {\n          const txNoGasLimit = {\n            to: transactionData.to,\n            value: BigNumber.from(transactionData.valueToSend),\n            data: transactionData.data,\n          }\n\n          const gasLimit = (await signer.estimateGas(txNoGasLimit)).mul(105).div(100)\n          // tx['gasLimit'] = gasLimit\n          const tx = { ...txNoGasLimit, gasLimit } // TODO test this works when firing off tx\n\n          set({ state: TxStateType.Signing })\n          const res = await signer.sendTransaction(tx)\n          set({ state: TxStateType.Confirming })\n          set({ txHash: res.hash })\n\n          const txReceipt = await res.wait()\n\n          //tx was mined successfully\n          if (txReceipt.status === 1) {\n            const nftsPurchased = findNFTsPurchased(txReceipt, address, selectedAssets, transactionData.route)\n            const nftsNotPurchased = findNFTsNotPurchased(selectedAssets, nftsPurchased)\n            set({ state: TxStateType.Success })\n            return {\n              nftsPurchased,\n              nftsNotPurchased,\n              txReceipt,\n            }\n          } else {\n            set({ state: TxStateType.Failed })\n            return {\n              nftsPurchased: [],\n              nftsNotPurchased: selectedAssets,\n              txReceipt,\n            }\n          }\n        } catch (e) {\n          console.log('Error creating multiAssetSwap Transaction', e)\n          if (e.code === 4001) {\n            set({ state: TxStateType.Denied })\n          } else {\n            set({ state: TxStateType.Invalid })\n          }\n          return\n        }\n      },\n    }),\n    { name: 'useSendTransactionState' }\n  )\n)\n\nconst findNFTsPurchased = (\n  txReceipt: ContractReceipt,\n  signerAddress: string,\n  toBuy: GenieAsset[],\n  txRoute: RoutingItem[]\n): UpdatedGenieAsset[] => {\n  if (!txReceipt.logs) {\n    return []\n  }\n  const erc721Interface = new Interface(ERC721)\n  const erc1155Interface = new Interface(ERC1155)\n  const cryptopunksMarketInterface = new Interface(CryptoPunksMarket)\n\n  // Find successfully purchased NFTs (and assign to state nftsPurchased) by parsing events\n  const transferErc721BuyEvents = txReceipt.logs.filter(\n    (x) =>\n      x.topics[0] === erc721Interface.getEventTopic('Transfer') &&\n      hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase()\n  )\n\n  const transferredErc721 = transferErc721BuyEvents.map((x) => ({\n    address: x.address,\n    tokenId: parseInt(x.topics[3]).toString(),\n  }))\n  const transferErc1155BuyEvents = txReceipt.logs.filter(\n    (x) =>\n      x.topics[0] === erc1155Interface.getEventTopic('TransferSingle') &&\n      hexStripZeros(x.topics[3]).toLowerCase() === signerAddress.toLowerCase()\n  )\n\n  const transferredErc1155 = transferErc1155BuyEvents.map((x) => ({\n    address: x.address,\n    tokenId: erc1155Interface.parseLog(x).args[3].toString(),\n  }))\n\n  // Find transferred CryptoPunks\n  const transferCryptopunkEvents = txReceipt.logs.filter(\n    (x) =>\n      x.topics[0] === cryptopunksMarketInterface.getEventTopic('PunkTransfer') &&\n      hexStripZeros(x.topics[2]).toLowerCase() === signerAddress.toLowerCase()\n  )\n  const transferredCryptopunks = transferCryptopunkEvents.map((x) => ({\n    address: x.address,\n    tokenId: cryptopunksMarketInterface.parseLog(x).args[2].toString(),\n  }))\n\n  const allTransferred = [...transferredErc721, ...transferredErc1155, ...transferredCryptopunks]\n\n  const transferredItems = toBuy.filter((assetToBuy) => {\n    return allTransferred.some(\n      (purchasedNft) =>\n        assetToBuy.address.toLowerCase() === purchasedNft.address.toLowerCase() &&\n        parseInt(assetToBuy.tokenId).toString() === purchasedNft.tokenId\n    )\n  })\n\n  return combineBuyItemsWithTxRoute(transferredItems, txRoute)\n}\n\nconst findNFTsNotPurchased = (toBuy: GenieAsset[], nftsPurchased: UpdatedGenieAsset[]) => {\n  const nftsNotPurchased: Array<UpdatedGenieAsset> = []\n  toBuy.forEach((selectedAsset) => {\n    const purchasedNft = nftsPurchased.find(\n      (x) => x.address.toLowerCase() === selectedAsset.address.toLowerCase() && x.tokenId === selectedAsset.tokenId\n    )\n    if (!purchasedNft) {\n      nftsNotPurchased.push(selectedAsset)\n    }\n  })\n  return nftsNotPurchased\n}\n","import { TxResponse } from 'nft/types'\nimport create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ntype TransactionResponseValue = TxResponse | undefined\n\ntype TransactionResponseState = {\n  transactionResponse: TransactionResponseValue\n  setTransactionResponse: (txResponse: TransactionResponseValue) => void\n}\n\nexport const useTransactionResponse = create<TransactionResponseState>()(\n  devtools(\n    (set) => ({\n      transactionResponse: undefined,\n      setTransactionResponse: (txResponse) =>\n        set(() => ({\n          transactionResponse: txResponse,\n        })),\n    }),\n    { name: 'useTransactionResponse' }\n  )\n)\n","import create from 'zustand'\nimport { devtools, persist } from 'zustand/middleware'\n\nimport { GenieAsset } from '../types'\n\ninterface SweepState {\n  sweepAssets: GenieAsset[]\n  setSweepAssets: (assets: GenieAsset[]) => void\n  removeSweepAsset: (asset: GenieAsset) => void\n  reset: () => void\n}\n\nexport const useSweep = create<SweepState>()(\n  persist(\n    devtools((set) => ({\n      sweepAssets: [],\n      setSweepAssets: (assets) =>\n        set(() => {\n          return { sweepAssets: assets }\n        }),\n      removeSweepAsset: (asset) => {\n        set(({ sweepAssets }) => {\n          if (sweepAssets.length === 0) return { sweepAssets: [] }\n          else sweepAssets.find((x) => x.tokenId === asset.tokenId && x.address === asset.address)\n          const assetsCopy = [...sweepAssets]\n          assetsCopy.splice(\n            sweepAssets.findIndex((n) => n.tokenId === asset.tokenId && n.address === asset.address),\n            1\n          )\n          return { sweepAssets: assetsCopy }\n        })\n      },\n      reset: () => set(() => ({ sweepAssets: [] })),\n    })),\n    { name: 'useSweep' }\n  )\n)\n","import { BigNumber } from '@ethersproject/bignumber'\nimport type { Web3Provider } from '@ethersproject/providers'\nimport { parseEther } from '@ethersproject/units'\nimport { useWeb3React } from '@web3-react/core'\nimport { useNativeCurrencyBalances } from 'state/connection/hooks'\n\ninterface WalletBalanceProps {\n  address: string\n  balance: string\n  weiBalance: BigNumber\n  provider: Web3Provider | undefined\n}\n\nexport function useWalletBalance(): WalletBalanceProps {\n  const { account: address, provider } = useWeb3React()\n  const balanceString = useNativeCurrencyBalances(address ? [address] : [])?.[address ?? '']?.toSignificant(3) || '0'\n\n  return address == null\n    ? {\n        address: '',\n        balance: '0',\n        weiBalance: parseEther('0'),\n        provider: undefined,\n      }\n    : {\n        address,\n        balance: balanceString,\n        weiBalance: parseEther(balanceString),\n        provider,\n      }\n}\n","import create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nimport { WalletAsset, WalletCollection } from '../types'\n\ninterface WalletCollectionState {\n  walletAssets: WalletAsset[]\n  walletCollections: WalletCollection[]\n  displayAssets: WalletAsset[]\n  collectionFilters: string[]\n  listFilter: string\n  setWalletAssets: (assets: WalletAsset[]) => void\n  setWalletCollections: (collections: WalletCollection[]) => void\n  setCollectionFilters: (address: string) => void\n  clearCollectionFilters: () => void\n  setListFilter: (value: string) => void\n  setDisplayAssets: (walletAssets: WalletAsset[], listFilter: string) => void\n}\n\nexport const useWalletCollections = create<WalletCollectionState>()(\n  devtools(\n    (set) => ({\n      walletAssets: [],\n      walletCollections: [],\n      displayAssets: [],\n      collectionFilters: [],\n      listFilter: 'All',\n      setWalletAssets: (assets) =>\n        set(() => {\n          return {\n            walletAssets: assets?.filter((asset) => asset.asset_contract?.schema_name === 'ERC721'),\n          }\n        }),\n      setWalletCollections: (collections) =>\n        set(() => {\n          return { walletCollections: collections }\n        }),\n      setCollectionFilters: (address) =>\n        set(({ collectionFilters }) => {\n          if (collectionFilters.length === 0) return { collectionFilters: [address] }\n          else if (!!collectionFilters.find((x) => x === address))\n            return { collectionFilters: collectionFilters.filter((n) => n !== address) }\n          else return { collectionFilters: [...collectionFilters, address] }\n        }),\n      clearCollectionFilters: () =>\n        set(() => {\n          return { collectionFilters: [] }\n        }),\n      setListFilter: (value) =>\n        set(() => {\n          return { listFilter: value }\n        }),\n      setDisplayAssets: (walletAssets, listFilter) =>\n        set(() => {\n          return { displayAssets: filterWalletAssets(walletAssets, listFilter) }\n        }),\n    }),\n    { name: 'useWalletCollections' }\n  )\n)\n\nconst filterWalletAssets = (walletAssets: WalletAsset[], listFilter: string) => {\n  let displayAssets = walletAssets\n  if (listFilter === 'Listed')\n    displayAssets = displayAssets?.filter((x) => {\n      return x.listing_date !== null\n    })\n  if (listFilter === 'Unlisted')\n    displayAssets = displayAssets?.filter((x) => {\n      return x.listing_date === null\n    })\n  return displayAssets\n}\n","import create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\nexport enum SortBy {\n  LowToHigh,\n  HighToLow,\n  RareToCommon,\n  CommonToRare,\n}\n\nexport const SortByPointers = {\n  [SortBy.HighToLow]: 'highest',\n  [SortBy.LowToHigh]: 'lowest',\n  [SortBy.RareToCommon]: 'rare',\n  [SortBy.CommonToRare]: 'common',\n}\n\nexport type Trait = {\n  trait_type: string\n  trait_value: string\n  trait_count: number\n  floorPrice?: number\n}\n\ninterface State {\n  traits: Trait[]\n  markets: string[]\n  minPrice: string\n  maxPrice: string\n  minRarity: number | ''\n  maxRarity: number | ''\n  marketCount: Record<string, number>\n  buyNow: boolean\n  search: string\n  sortBy: SortBy\n  showFullTraitName: { shouldShow: boolean; trait_value?: string; trait_type: string }\n}\n\ntype Actions = {\n  setMarketCount: (_: Record<string, number>) => void\n  addMarket: (market: string) => void\n  removeMarket: (market: string) => void\n  addTrait: (trait: Trait) => void\n  removeTrait: (trait: Trait) => void\n  reset: () => void\n  setMinPrice: (price: string) => void\n  setMaxPrice: (price: string) => void\n  setMinRarity: (range: number | '') => void\n  setMaxRarity: (range: number | '') => void\n  setBuyNow: (bool: boolean) => void\n  setSearch: (term: string) => void\n  setSortBy: (sortBy: SortBy) => void\n  toggleShowFullTraitName: (show: { shouldShow: boolean; trait_value: string; trait_type: string }) => void\n}\n\nexport type CollectionFilters = State & Actions\n\nexport const initialCollectionFilterState: State = {\n  minPrice: '',\n  maxPrice: '',\n  minRarity: '',\n  maxRarity: '',\n  traits: [],\n  markets: [],\n  marketCount: {},\n  buyNow: true,\n  search: '',\n  sortBy: SortBy.LowToHigh,\n  showFullTraitName: { shouldShow: false, trait_value: '', trait_type: '' },\n}\n\nexport const useCollectionFilters = create<CollectionFilters>()(\n  devtools(\n    (set) => ({\n      ...initialCollectionFilterState,\n      setSortBy: (sortBy) => set({ sortBy }),\n      setSearch: (search) => set({ search }),\n      setBuyNow: (buyNow) => set({ buyNow }),\n      setMarketCount: (marketCount) => set({ marketCount }),\n      addMarket: (market) => set(({ markets }) => ({ markets: [...markets, market] })),\n      removeMarket: (market) => set(({ markets }) => ({ markets: markets.filter((_market) => market !== _market) })),\n      addTrait: (trait) => set(({ traits }) => ({ traits: [...traits, trait] })),\n      removeTrait: (trait) =>\n        set(({ traits }) => ({\n          traits: traits.filter((x) => JSON.stringify(x) !== JSON.stringify(trait)),\n        })),\n      reset: () => set(() => ({ traits: [], minRarity: '', maxRarity: '', markets: [] })),\n      setMinPrice: (price) => set(() => ({ minPrice: price })),\n      setMaxPrice: (price) => set(() => ({ maxPrice: price })),\n      setMinRarity: (range) => set(() => ({ minRarity: range })),\n      setMaxRarity: (range) => set(() => ({ maxRarity: range })),\n      toggleShowFullTraitName: ({ shouldShow, trait_value, trait_type }) =>\n        set(() => ({ showFullTraitName: { shouldShow, trait_value, trait_type } })),\n    }),\n    { name: 'useCollectionTraits' }\n  )\n)\n","import create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface State {\n  isCollectionNftsLoading: boolean\n  setIsCollectionNftsLoading: (isCollectionNftsLoading: boolean) => void\n  isCollectionStatsLoading: boolean\n  setIsCollectionStatsLoading: (isCollectionStatsLoading: boolean) => void\n}\n\nexport const useIsCollectionLoading = create<State>()(\n  devtools(\n    (set) => ({\n      isCollectionNftsLoading: false,\n      setIsCollectionNftsLoading: (isCollectionNftsLoading) =>\n        set(() => {\n          return { isCollectionNftsLoading }\n        }),\n      isCollectionStatsLoading: false,\n      setIsCollectionStatsLoading: (isCollectionStatsLoading) =>\n        set(() => {\n          return { isCollectionStatsLoading }\n        }),\n    }),\n    { name: 'useIsCollectionLoading' }\n  )\n)\n","import { BuyItem, GenieAsset, PriceInfo, RoutingItem, UpdatedGenieAsset } from 'nft/types'\nimport { formatWeiToDecimal } from 'nft/utils/currency'\n\nconst isTheSame = (item: GenieAsset, routeAsset: BuyItem | PriceInfo) => {\n  // if route asset has id, match by id\n  if ('id' in routeAsset && routeAsset.id) {\n    return routeAsset.id === item.id\n  } else {\n    return (\n      'address' in routeAsset &&\n      routeAsset.address.toLowerCase() === item.address.toLowerCase() &&\n      routeAsset.tokenId === item.tokenId\n    )\n  }\n}\n\nconst isPriceDiff = (oldPrice: string, newPrice: string) => {\n  return formatWeiToDecimal(oldPrice) !== formatWeiToDecimal(newPrice)\n}\n\nexport const combineBuyItemsWithTxRoute = (\n  items: UpdatedGenieAsset[],\n  txRoute?: RoutingItem[]\n): UpdatedGenieAsset[] => {\n  return items.map((item) => {\n    const route = txRoute && txRoute.find((r) => r.action === 'Buy' && isTheSame(item, r.assetOut))\n\n    // if the item is not found in txRoute, it means it's no longer for sale\n    if (txRoute && !route) {\n      return {\n        ...item,\n        isUnavailable: true,\n      }\n    }\n\n    const newPriceInfo = item.updatedPriceInfo ? item.updatedPriceInfo : item.priceInfo\n\n    // if the price changed\n    if (\n      route &&\n      'priceInfo' in route.assetOut &&\n      isPriceDiff(newPriceInfo.basePrice, route.assetOut.priceInfo.basePrice)\n    ) {\n      return {\n        ...item,\n        updatedPriceInfo: route.assetOut.priceInfo,\n      }\n    }\n\n    return {\n      ...item,\n      priceInfo: newPriceInfo,\n      updatedPriceInfo: undefined,\n      orderSource: route && 'orderSource' in route.assetOut ? route.assetOut.orderSource : undefined,\n    }\n  })\n}\n"],"sourceRoot":""}