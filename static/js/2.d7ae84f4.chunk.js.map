{"version":3,"sources":["nft/queries/openSea/constants.ts","nft/queries/openSea/OSCollectionsFetcher.ts","nft/queries/openSea/PostOpenSeaSellOrder.ts","nft/queries/genie/AssetsFetcher.ts","nft/queries/genie/CollectionStatsFetcher.ts","nft/queries/genie/logListing.ts","nft/queries/genie/MultipleCollectionStatsFetcher.ts","nft/queries/genie/RouteFetcher.ts","nft/queries/genie/SingleAssetFetcher.ts","nft/queries/genie/TrendingCollectionsFetcher.ts","nft/queries/genie/WalletAssetsFetcher.ts","nft/queries/looksRare/createLooksRareOrder.ts","nft/queries/looksRare/looksRareNonceFetcher.ts","nft/queries/x2y2/index.ts","nft/queries/genie/ActivityFetcher.ts"],"names":["OPENSEA_BASE_API_PATH","OPENSEA_FEE_ADDRESS","OPENSEA_DEFAULT_ZONE","OPENSEA_LISTINGS_API_PATH","OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY","OPENSEA_CROSS_CHAIN_CONDUIT","OPENSEA_KEY_TO_CONDUIT","OPENSEA_DEFAULT_FEE","INVERSE_BASIS_POINTS","OSCollectionsFetcher","a","params","hasEmptyFields","Object","values","undefined","fetch","URLSearchParams","toString","r","json","walletCollections","filter","collection","primary_asset_contracts","length","schema_name","map","address","name","image","image_url","count","owned_asset_count","PostOpenSeaSellOrder","apiPath","body","opts","fetchOpts","method","JSON","stringify","headers","Accept","_fetch","response","finalUrl","finalOpts","then","res","_handleApiResponse","ok","text","result","parse","status","errorMessage","errors","join","Error","formatTraits","traits","traitObj","nonMetaTraits","el","trait_type","trait","push","trait_value","formatPrice","x","parseEther","AssetsFetcher","contractAddress","tokenId","sort","markets","price","rarityRange","searchText","notForSale","pageParam","url","process","REACT_APP_GENIE_API_URL","payload","filters","toLowerCase","fields","id","imageUrl","currentPrice","currentUsdPrice","paymentToken","animationUrl","rarity","limit","offset","numberOfTraits","numTraits","traitCount","low","parseFloat","high","currentEthPrice","$gte","$lte","data","totalCount","numTraitsByAmount","console","log","CollectionStatsFetcher","addressOrName","recursive","isName","isAddress","$or","$regex","$options","stats","floorPrice","bannerImageUrl","twitter","externalUrl","instagram","discordUrl","marketplaceCount","logListing","listings","userAddress","listingsConsolidated","marketplaces","marketplacesById","listingsWithMarketsConsolidated","reduce","uniqueListings","curr","key","asset","asset_contract","marketplace","some","listing","fetchMultipleCollectionStats","addresses","$in","fetchRoute","toSell","toBuy","senderAddress","sell","buildRouteItem","buy","tokenType","sender","item","symbol","priceInfo","baseAsset","decimals","collectionName","amount","basePrice","ETHPrice","fetchSingleAsset","fetchTrendingCollections","REACT_APP_GENIE_V3_API_URL","fetchWalletAssets","ownerAddress","collectionAddresses","collectionAddressesString","str","collectionAddress","assets","collectionIsVerified","isVerified","lastPrice","last_sale","formatEther","total_price","creatorPercentage","dev_seller_fee_basis_points","date_acquired","event_timestamp","created_date","listing_date","sellOrders","Math","max","apply","order","Date","orderCreatedDate","floor_sell_order_price","min","ethPrice","includes","BigNumber","from","pow","split","round","createLooksRareOrder","code","looksRareNonceFetcher","statusText","newX2Y2Order","ac","AbortController","req","Request","signal","timeout","setTimeout","abort","clearTimeout","ActivityFetcher","cursor","filterParam","eventTypes","eventType"],"mappings":"kgBAAaA,EAAwB,yBACxBC,EAAsB,6CACtBC,EAAuB,6CACvBC,EAA4B,uCAC5BC,EACX,qEACWC,EAA8B,6CAC9BC,EAAsB,eAAMF,EAA0CC,GACtEE,EAAsB,KACtBC,EAAuB,I,wBCPvBC,EAAoB,uCAAG,uCAAAC,EAAA,sDAGlC,IAH2CC,EAAT,EAASA,OACvCC,GAAiB,EAErB,MAAgBC,OAAOC,OAAOH,GAA9B,oBACYI,IAD2B,OAEnCH,GAAiB,GALa,IAQ9BA,EAR8B,yCAQP,IARO,uBAUlBI,MAAM,6CAAD,OAA8C,IAAIC,gBAAgBN,GAAQO,aAV7D,cAU5BC,EAV4B,iBAWFA,EAAEC,OAXA,aAW5BC,EAX4B,kDAazBA,EACJC,QACC,SAACC,GAAD,OACEA,EAAWC,wBAAwBC,QAAgE,WAAtDF,EAAWC,wBAAwB,GAAGE,eAEtFC,KAAI,SAACJ,GAAD,MAAsB,CACzBK,QAASL,EAAWC,wBAAwB,GAAGI,QAC/CC,KAAMN,EAAWM,KACjBC,MAAOP,EAAWQ,UAClBC,MAAOT,EAAWU,uBAtBU,iCAyBzB,IAzByB,4CAAH,sD,QCA1B,SAAeC,EAAtB,oC,4CAAO,WACLC,EACAC,GAFK,+BAAA1B,EAAA,6DAGL2B,EAHK,+BAGe,GAEdC,EALD,aAMHC,OAAQ,OACRH,KAAMA,EAAOI,KAAKC,UAAUL,QAAQrB,EACpC2B,QAAS,CACPC,OAAQ,mBACR,eAAgB,qBAEfN,GAZA,SAekBO,EAAOT,EAASG,GAflC,cAeCO,EAfD,yBAgBEA,EAASzB,QAhBX,2C,iCAmBQwB,E,8EAAf,WAAsBT,GAAtB,+BAAAzB,EAAA,6DAAuC2B,EAAvC,+BAA2D,GAEnDS,EADU9C,EACWmC,EACrBY,EAHR,2BAIOV,GAJP,IAKIK,QAAQ,eACFL,EAAKK,SAAW,MAN1B,kBAUS1B,MAAM8B,EAAUC,GAAWC,KAA3B,uCAAgC,WAAOC,GAAP,SAAAvC,EAAA,+EAAewC,EAAmBD,IAAlC,2CAAhC,wDAVT,2C,iCAaeC,E,8EAAf,WAAkCL,GAAlC,iBAAAnC,EAAA,0DACMmC,EAASM,GADf,yCAEWN,GAFX,gCAQmBA,EAASO,OAR5B,OAQIC,EARJ,OASIA,EAASb,KAAKc,MAAMD,GATxB,6DAcUR,EAASU,OAdnB,OAeS,MAfT,QAkBS,MAlBT,MAmBS,MAnBT,QAsBS,MAtBT,QAyBS,MAzBT,QA8BS,MA9BT,gCAgBMC,EAAeH,GAAUA,EAAOI,OAASJ,EAAOI,OAAOC,KAAK,MAA7C,2BAAyElB,KAAKC,UAAUY,IAhB7G,oCAoBMG,EAAY,0CAAsChB,KAAKC,UAAUY,GAArD,KApBlB,oCAuBMG,EAAY,uCAAmChB,KAAKC,UAAUY,GAAlD,KAvBlB,oCA0BMG,EAAY,oKAAgKhB,KAAKC,UAC/KY,IA3BR,oCA+BMG,EAAY,uKAAmKhB,KAAKC,UAClLY,IAhCR,oCAoCMG,EAAY,mBAAehB,KAAKC,UAAUY,IApChD,mCAwCQ,IAAIM,MAAJ,oBAAuBd,EAASU,OAAhC,aAA2CC,IAxCnD,0D,2lBC7BaI,EAAe,SAACC,GAC3B,IAD+C,EACzCC,EAAqC,GACrCC,EAAgBF,EAAOvC,QAAO,SAAC0C,GAAD,MAA0B,qBAAlBA,EAAGC,cAFA,cAG3BF,GAH2B,IAG/C,2BAAmC,CAAC,IAAzBG,EAAwB,QAC5BJ,EAASI,EAAMD,YACfH,EAASI,EAAMD,YAAYE,KAAKD,EAAME,aADVN,EAASI,EAAMD,YAAc,CAACC,EAAME,cAJxB,8BAQ/C,OAAON,GAGHO,EAAc,SAACC,GAAD,OAAwBC,qBAAWD,EAAEpD,YAAYA,YAExDsD,EAAa,uCAAG,mEAAA9D,EAAA,6DAC3B+D,EAD2B,EAC3BA,gBACAC,EAF2B,EAE3BA,QACAC,EAH2B,EAG3BA,KACAC,EAJ2B,EAI3BA,QACAC,EAL2B,EAK3BA,MACAC,EAN2B,EAM3BA,YACAjB,EAP2B,EAO3BA,OACAkB,EAR2B,EAQ3BA,WACAC,EAT2B,EAS3BA,WACAC,EAV2B,EAU3BA,UAcMC,EAxBqB,UAwBZC,0zBAAYC,wBAxBA,WAyBrBC,EAAwB,CAC5BC,QAAQ,aACN1D,QAAS6C,EAAgBc,cACzB1B,OAAQ,GACRkB,aACAC,aACAN,WACGI,GAELU,OAAQ,CACN5D,QAAS,EACTC,KAAM,EACN4D,GAAI,EACJC,SAAU,EACVC,aAAc,EACdC,gBAAiB,EACjBC,aAAc,EACdC,aAAc,EACdd,WAAY,EACZe,OAAQ,EACRrB,QAAS,GAEXsB,MAAO,GACPC,OAAoB,GAAZhB,GAENN,IACFU,EAAQV,KAAOA,GAEbC,IACFS,EAAQT,QAAUA,IAEdsB,EAxDqB,OAwDJrC,QAxDI,IAwDJA,OAxDI,EAwDJA,EAAQvC,QAAO,SAAC4C,GAAD,MAAgC,qBAArBA,EAAMD,iBAErDoB,EAAQC,QAAQa,UAAYD,EAAevE,KAAI,SAACqC,GAAD,MAAS,CAAEoC,WAAYpC,EAAGI,iBAEvEP,IACFwB,EAAQC,QAAQzB,OAASD,EAAaC,IAGlCwC,GAAW,OAALxB,QAAK,IAALA,OAAA,EAAAA,EAAOwB,KAAMC,WAAWjC,EAAYQ,EAAMwB,WAAQtF,EACxDwF,GAAY,OAAL1B,QAAK,IAALA,OAAA,EAAAA,EAAO0B,MAAOD,WAAWjC,EAAYQ,EAAM0B,YAASxF,EAI5DiE,KACCqB,GAAOE,KACTlB,EAAQC,QAAQkB,gBAAkB,IAGhCH,GAAOhB,EAAQC,QAAQkB,kBACzBnB,EAAQC,QAAQkB,gBAAgBC,KAAOJ,GAGrCE,GAAQlB,EAAQC,QAAQkB,kBAC1BnB,EAAQC,QAAQkB,gBAAgBE,KAAOH,IA/EhB,oBAoFTvF,MAAMkE,EAAK,CACzB3C,OAAQ,OACRG,QAAS,CACP,eAAgB,oBAElBN,KAAMI,KAAKC,UAAU4C,KAzFE,eAoFnBlE,EApFmB,iBA2FNA,EAAEC,OA3FI,QA2FnBuF,EA3FmB,qBA8FTA,EAAKA,MA9FI,IA8FzB,4BAAWrC,EAAgB,SACvBsC,WAAaD,EAAKC,WACpBtC,EAAEuC,kBAAoBF,EAAKE,kBAhGJ,uDAsGlBF,EAAKA,MAtGa,0CAwGzBG,QAAQC,IAAR,MAxGyB,8EAAH,sD,QCdbC,EAAsB,uCAAG,WAAOC,GAAP,qCAAAvG,EAAA,yDAA8BwG,EAA9B,gCAC9BC,GAAUC,oBAAUH,EAAc1B,eAClCL,EAF8B,UAErBC,0zBAAYC,wBAFS,gBAI/B+B,GAAWD,EAJoB,0CAMnBF,EAAuBC,EAAc1B,eAAe,GANjC,yFAkB9BF,EAAU,CACdC,QAPc6B,EACZ,CACEE,IAAK,CAAC,CAAExF,KAAM,CAAEyF,OAAQL,EAAeM,SAAU,QAEnD,CAAE3F,QAASqF,GAIbjB,MAAOmB,EAAS,EAAI,EACpB3B,OAAQ2B,EACJ,CACEtF,KAAM,EACN6D,SAAU,EACV9D,QAAS,EACT4F,MAAO,EACPC,WAAY,GAEd,CACE5D,OAAQ,EACR2D,MAAO,EACP,wBAAyB,EACzB9B,SAAU,EACVgC,eAAgB,EAChBC,QAAS,EACTC,YAAa,EACbC,UAAW,EACXC,WAAY,EACZC,iBAAkB,EAClBN,WAAY,GAElBxB,OAAQ,GA1C0B,UA4CpBjF,MAAMkE,EAAK,CACzB3C,OAAQ,OACRG,QAAS,CACP,eAAgB,oBAElBN,KAAMI,KAAKC,UAAU4C,KAjDa,eA4C9BlE,EA5C8B,iBAoDjBA,EAAEC,OApDe,eAoD9BuF,EApD8B,0BAqDzB,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMA,MAAOA,EAAKA,KAAK,GAAK,IArDC,0DAAH,sDCEtBqB,EAAU,uCAAG,WAAOC,EAAwBC,GAA/B,yBAAAxH,EAAA,6DAClBwE,EADkB,UACTC,0zBAAYC,wBADH,iBAElB+C,EAAkCF,EAAStG,KAAI,SAACqC,GAAD,mBAAC,eAAaA,GAAd,IAAkBoE,aAAc,QAC/EC,EAAoD,GACpDC,EAAkCH,EAAqBI,QAAO,SAACC,EAAgBC,GACnF,IAAMC,EAAG,UAAMD,EAAKE,MAAMC,eAAehH,QAAhC,YAA2C6G,EAAKE,MAAMjE,SAU/D,OATI2D,EAAiBK,GACnBL,EAAiBK,GAAKvE,KAAKsE,EAAKI,aAEhCR,EAAiBK,GAAO,CAACD,EAAKI,aAE3BL,EAAeM,MAAK,SAACC,GAAD,MAAa,UAAGA,EAAQJ,MAAMC,eAAehH,QAAhC,YAA2CmH,EAAQJ,MAAMjE,WAAcgE,OAC3GD,EAAKL,aAAeC,EAAiBK,GACrCF,EAAerE,KAAKsE,IAEfD,IACN,IACGnD,EAAU,CACd4C,SAAUK,EACVJ,eAnBsB,SAqBRlH,MAAMkE,EAAK,CACzB3C,OAAQ,OACRG,QAAS,CACP,eAAgB,oBAElBN,KAAMI,KAAKC,UAAU4C,KA1BC,cAqBlBlE,EArBkB,yBA4BJ,MAAbA,EAAEoC,QA5Be,2CAAH,wDCJVyF,EAA4B,uCAAG,qCAAAtI,EAAA,6DAC1CuI,EAD0C,EAC1CA,UAIM/D,EALoC,UAK3BC,0zBAAYC,wBALe,sBASpCC,EAAU,CACdC,QAJc,CACd1D,QAAS,CAAEsH,IAAKD,IAIhBzD,OAAQ,CACNgC,MAAO,EACP9B,SAAU,EACV9D,QAAS,EACTC,KAAM,IAfgC,SAmB1Bb,MAAMkE,EAAK,CACzB3C,OAAQ,OACRG,QAAS,CACP,eAAgB,oBAElBN,KAAMI,KAAKC,UAAU4C,KAxBmB,cAmBpClE,EAnBoC,gBA0BvBA,EAAEC,OA1BqB,cA0BpCuF,EA1BoC,yBA2BnCA,EAAKA,MA3B8B,4CAAH,sD,QCA5BwC,EAAU,uCAAG,yCAAAzI,EAAA,6DACxB0I,EADwB,EACxBA,OACAC,EAFwB,EAExBA,MACAC,EAHwB,EAGxBA,cAMMpE,EATkB,UASTC,0zBAAYC,wBATH,UAUlBC,EAAU,CACdkE,KAAM,YAAIH,GAAQzH,KAAI,SAAC2C,GAAD,OAAOkF,EAAelF,MAC5CmF,IAAK,YAAIJ,GAAO/H,QAAO,SAACgD,GAAD,MAAuB,SAAhBA,EAAEoF,aAAsB/H,KAAI,SAAC2C,GAAD,OAAOkF,EAAelF,MAChFqF,OAAQL,GAbc,SAgBRtI,MAAMkE,EAAK,CACzB3C,OAAQ,OACRG,QAAS,CACP,eAAgB,oBAElBN,KAAMI,KAAKC,UAAU4C,KArBC,cAgBlBlE,EAhBkB,gBAuBLA,EAAEC,OAvBG,cAuBlBuF,EAvBkB,yBAyBjBA,GAzBiB,4CAAH,sDAgDjB6C,EAAiB,SAACI,GACtB,MAAO,CACLnE,GAAImE,EAAKnE,GACToE,OAAQD,EAAKE,UAAUC,UACvBlI,KAAM+H,EAAK/H,KACXmI,SAAUJ,EAAKI,UAAY,EAC3BpI,QAASgI,EAAKhI,QACd8H,UAAWE,EAAKF,UAChBhF,QAASkF,EAAKlF,QACdmE,YAAae,EAAKf,YAClBoB,eAAgBL,EAAKK,eACrBC,OAAQN,EAAKM,QAAU,EACvBJ,UAAW,CACTK,UAAWP,EAAKE,UAAUK,UAC1BJ,UAAWH,EAAKE,UAAUC,UAC1BK,SAAUR,EAAKE,UAAUM,YC/DlBC,EAAgB,uCAAG,qCAAA3J,EAAA,6DAC9B+D,EAD8B,EAC9BA,gBACAC,EAF8B,EAE9BA,QAKMQ,EAPwB,UAOfC,0zBAAYC,wBAPG,iCAO6CX,EAP7C,oBAOwEC,GAPxE,SAQd1D,MAAMkE,GARQ,cAQxB/D,EARwB,gBASXA,EAAEC,OATS,cASxBuF,EATwB,yBAUvB,CAACA,EAAKgC,MAAM,GAAIhC,EAAKpF,aAVE,2CAAH,sDCAhB+I,EAAwB,uCAAG,WAAOjF,GAAP,mBAAA3E,EAAA,6DAKhCwE,EALgC,UAKvBC,0zBAAYoF,2BALW,kCAMtBvJ,MAAMkE,EAAK,CACzB3C,OAAQ,OACRG,QAAS,CACP,eAAgB,oBAElBN,KAAMI,KAAKC,UAAU4C,KAXe,cAMhClE,EANgC,gBAcnBA,EAAEC,OAdiB,cAchCuF,EAdgC,yBAgB/BA,GAhB+B,2CAAH,sD,QCWxB6D,EAAiB,uCAAG,yCAAA9J,EAAA,6DAC/B+J,EAD+B,EAC/BA,aACAC,EAF+B,EAE/BA,oBACAzF,EAH+B,EAG/BA,UAMM0F,EAA4BD,EAC9BA,EAAoBnC,QAAO,SAACqC,EAAKC,GAAN,OAA4BD,EAAG,kCAA8BC,KAAqB,IAC7G,GACE3F,EAZyB,UAa7BC,0zBAAYC,wBAbiB,iCAcNqF,GAdM,OAcSE,EAdT,4BAckE,GAAZ1F,GAdtD,SAgBfjE,MAAMkE,EAAK,CACzB3C,OAAQ,MACRG,QAAS,CACP,eAAgB,sBAnBW,cAgBzBvB,EAhByB,gBAsBZA,EAAEC,OAtBU,cAsBzBuF,EAtByB,yBAuBxBA,EAAKA,KAAKmE,OAAOnJ,KAAI,SAACgH,GAAgB,IAAD,IAC1C,OAAO,2BACFA,GADL,IAEEoC,qBAAsBpC,EAAMC,eAAeoC,WAC3CC,UAAWtC,EAAMuC,WAAaC,sBAAYxC,EAAMuC,UAAUE,aAC1D3D,WAAU,UAAEkB,EAAMpH,kBAAR,aAAE,EAAkBkG,WAC9B4D,kBAAmB/E,WAAWqC,EAAMC,eAAe0C,6BAA+B,IAClFC,cAAe5C,EAAMuC,UAAYvC,EAAMuC,UAAUM,gBAAkB7C,EAAMC,eAAe6C,aACxFC,aAAc/C,EAAMgD,WAAWlK,OAC3BmK,KAAKC,IACFC,MACC,KACAnD,EAAMgD,WAAWhK,KAAI,SAAUoK,GAC7B,OAAO,IAAIC,KAAKD,EAAME,sBAGzB/K,WACH,KACJgL,wBAA6B,OAALvD,QAAK,IAALA,GAAA,UAAAA,EAAOgD,kBAAP,eAAmBlK,QACvCmK,KAAKO,IAAL,MAAAP,KAAI,YACCjD,EAAMgD,WAAWhK,KAAI,SAACoK,GACvB,OAAOzF,WAAW6E,uBApDXtG,EAoDmCkH,EAAMK,UAnDlDlL,WAAWmL,SAAS,KACrBC,IAAUC,KAAK,IAAIC,IAAI3H,EAAM3D,WAAWuL,MAAM,MAAM,IAAIvL,WAG1D0K,KAAKc,MAAM7H,GAAO3D,aALP,IAAC2D,OAuDX,WA/CuB,4CAAH,sDCbjB8H,EAAoB,uCAAG,WAAOtH,GAAP,mBAAA3E,EAAA,6DAC5BwE,EAD4B,UACnBC,0zBAAYC,wBADO,kCAEhBpE,MAAMkE,EAAK,CAC3B3C,OAAQ,OACRG,QAAS,CACP,eAAgB,oBAElBN,KAAMI,KAAKC,UAAU4C,KAPW,cAE5BpC,EAF4B,yBAUbA,EAAI7B,OAVS,cAU1BuF,EAV0B,yBAWX,MAAdA,EAAKiG,MAXoB,4DAazB,GAbyB,0DAAH,sDCEpBC,EAAqB,uCAAG,WAAOjL,GAAP,iBAAAlB,EAAA,sEACjBM,MAAM,GAAD,OAHG,mCAGH,iCAAgDY,IADpC,UAGhB,OAFbqB,EAD6B,QAG3BM,OAH2B,uBAIjCuD,QAAQC,IAAR,kDAAuD9D,EAAI6J,aAJ1B,0CAQhB7J,EAAI7B,OARY,cAQ7BA,EAR6B,yBAU5BkF,WAAWlF,EAAKuF,OAVY,4CAAH,sD,UCArBoG,EAAY,uCAAG,WAAO1H,GAAP,2BAAA3E,EAAA,6DACpB0B,EAAOI,KAAKC,UAAU4C,GACtBH,EAFoB,UAEXC,0zBAAYC,wBAFD,gCAGpB4H,EAAK,IAAIC,gBACTC,EAAM,IAAIC,QAAQjI,EAAK,CAC3B3C,OAAQ,OACRG,QAAS,CACP,eAAgB,mCAElBN,OACAgL,OAAQJ,EAAGI,SAEPC,EAAUC,YAAW,kBAAMN,EAAGO,UAAS,KAZnB,kBAcNvM,MAAMkM,GAdA,cAclBjK,EAdkB,iBAeLA,EAAI7B,OAfC,eAelBuF,EAfkB,yBAgBH,MAAdA,EAAKiG,MAhBY,4DAkBjB,GAlBiB,yBAoBxBY,aAAaH,GApBW,6EAAH,uD,gGCAZI,EAAe,uCAAG,WAC7BhJ,EACAa,EACAoI,GAH6B,uBAAAhN,EAAA,6DAKvBiN,EACJrI,GAAWA,EAAQsI,WAAnB,qBACQtI,EAAQsI,kBADhB,aACQ,EAAoBjM,KAAI,SAACkM,GAAD,8BAAgCA,MAAanK,KAAK,MAC9E,GACAwB,EATuB,UAU3BC,0zBAAYoF,2BAVe,wBAWb9F,EAXa,6BAWuBkJ,GAXvB,OAWqCD,EAAM,kBAAcA,GAAW,IAXpE,SAab1M,MAAMkE,EAAK,CACzB3C,OAAQ,MACRG,QAAS,CACP,eAAgB,sBAhBS,cAavBvB,EAbuB,gBAmBVA,EAAEC,OAnBQ,cAmBvBuF,EAnBuB,yBAoBtBA,EAAKA,MApBiB,2CAAH","file":"static/js/2.d7ae84f4.chunk.js","sourcesContent":["export const OPENSEA_BASE_API_PATH = 'https://api.opensea.io'\nexport const OPENSEA_FEE_ADDRESS = '0x8de9c5a032463c561423387a9648c5c7bcc5bc90'\nexport const OPENSEA_DEFAULT_ZONE = '0x004c00500000ad104d7dbd00e3ae0a5c00560c00'\nexport const OPENSEA_LISTINGS_API_PATH = '/v2/orders/ethereum/seaport/listings'\nexport const OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY =\n  '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\nexport const OPENSEA_CROSS_CHAIN_CONDUIT = '0x1e0049783f008a0085193e00003d00cd54003c71'\nexport const OPENSEA_KEY_TO_CONDUIT = { [OPENSEA_DEFAULT_CROSS_CHAIN_CONDUIT_KEY]: OPENSEA_CROSS_CHAIN_CONDUIT }\nexport const OPENSEA_DEFAULT_FEE = 0.025\nexport const INVERSE_BASIS_POINTS = 10000\n","import { WalletCollection } from '../../types'\n\nexport const OSCollectionsFetcher = async ({ params }: any): Promise<WalletCollection[]> => {\n  let hasEmptyFields = false\n\n  for (const v of Object.values(params)) {\n    if (v === undefined) {\n      hasEmptyFields = true\n    }\n  }\n  if (hasEmptyFields) return []\n\n  const r = await fetch(`https://api.opensea.io/api/v1/collections?${new URLSearchParams(params).toString()}`)\n  const walletCollections = await r.json()\n  if (walletCollections) {\n    return walletCollections\n      .filter(\n        (collection: any) =>\n          collection.primary_asset_contracts.length && collection.primary_asset_contracts[0].schema_name === 'ERC721'\n      )\n      .map((collection: any) => ({\n        address: collection.primary_asset_contracts[0].address,\n        name: collection.name,\n        image: collection.image_url,\n        count: collection.owned_asset_count,\n      }))\n  } else {\n    return []\n  }\n}\n","import { OPENSEA_BASE_API_PATH } from 'nft/queries/openSea'\n\nexport async function PostOpenSeaSellOrder<T>(\n  apiPath: string,\n  body?: Record<string, unknown>,\n  opts: RequestInit = {}\n): Promise<T> {\n  const fetchOpts = {\n    method: 'POST',\n    body: body ? JSON.stringify(body) : undefined,\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n    },\n    ...opts,\n  }\n\n  const response = await _fetch(apiPath, fetchOpts)\n  return response.json()\n}\n\nasync function _fetch(apiPath: string, opts: RequestInit = {}) {\n  const apiBase = OPENSEA_BASE_API_PATH\n  const finalUrl = apiBase + apiPath\n  const finalOpts = {\n    ...opts,\n    headers: {\n      ...(opts.headers || {}),\n    },\n  }\n\n  return fetch(finalUrl, finalOpts).then(async (res) => _handleApiResponse(res))\n}\n\nasync function _handleApiResponse(response: Response) {\n  if (response.ok) {\n    return response\n  }\n\n  let result\n  let errorMessage\n  try {\n    result = await response.text()\n    result = JSON.parse(result)\n  } catch {\n    // Result will be undefined or text\n  }\n\n  switch (response.status) {\n    case 400:\n      errorMessage = result && result.errors ? result.errors.join(', ') : `Invalid request: ${JSON.stringify(result)}`\n      break\n    case 401:\n    case 403:\n      errorMessage = `Unauthorized. Full message was '${JSON.stringify(result)}'`\n      break\n    case 404:\n      errorMessage = `Not found. Full message was '${JSON.stringify(result)}'`\n      break\n    case 500:\n      errorMessage = `Internal server error. OpenSea has been alerted, but if the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was ${JSON.stringify(\n        result\n      )}`\n      break\n    case 503:\n      errorMessage = `Service unavailable. Please try again in a few minutes. If the problem persists please contact us via Discord: https://discord.gg/ga8EJbv - full message was ${JSON.stringify(\n        result\n      )}`\n      break\n    default:\n      errorMessage = `Message: ${JSON.stringify(result)}`\n      break\n  }\n\n  throw new Error(`API Error ${response.status}: ${errorMessage}`)\n}\n","import { parseEther } from '@ethersproject/units'\n\nimport { Trait } from '../../hooks/useCollectionFilters'\nimport { AssetPayload, CollectionSort, GenieAsset } from '../../types'\n\nexport const formatTraits = (traits: Trait[]) => {\n  const traitObj: Record<string, string[]> = {}\n  const nonMetaTraits = traits.filter((el) => el.trait_type !== 'Number of traits')\n  for (const trait of nonMetaTraits) {\n    if (!traitObj[trait.trait_type]) traitObj[trait.trait_type] = [trait.trait_value]\n    else traitObj[trait.trait_type].push(trait.trait_value)\n  }\n\n  return traitObj\n}\n\nconst formatPrice = (x: number | string) => parseEther(x.toString()).toString()\n\nexport const AssetsFetcher = async ({\n  contractAddress,\n  tokenId,\n  sort,\n  markets,\n  price,\n  rarityRange,\n  traits,\n  searchText,\n  notForSale,\n  pageParam,\n}: {\n  contractAddress: string\n  tokenId?: string\n  offset?: number\n  sort?: CollectionSort\n  markets?: string[]\n  price?: { high?: number | string; low?: number | string; symbol: string }\n  rarityRange?: Record<string, unknown>\n  traits?: Trait[]\n  searchText?: string\n  notForSale?: boolean\n  pageParam: number\n}): Promise<GenieAsset[] | undefined> => {\n  const url = `${process.env.REACT_APP_GENIE_API_URL}/assets`\n  const payload: AssetPayload = {\n    filters: {\n      address: contractAddress.toLowerCase(),\n      traits: {},\n      searchText,\n      notForSale,\n      tokenId,\n      ...rarityRange,\n    },\n    fields: {\n      address: 1,\n      name: 1,\n      id: 1,\n      imageUrl: 1,\n      currentPrice: 1,\n      currentUsdPrice: 1,\n      paymentToken: 1,\n      animationUrl: 1,\n      notForSale: 1,\n      rarity: 1,\n      tokenId: 1,\n    },\n    limit: 25,\n    offset: pageParam * 25,\n  }\n  if (sort) {\n    payload.sort = sort\n  }\n  if (markets) {\n    payload.markets = markets\n  }\n  const numberOfTraits = traits?.filter((trait) => trait.trait_type === 'Number of traits')\n  if (numberOfTraits) {\n    payload.filters.numTraits = numberOfTraits.map((el) => ({ traitCount: el.trait_value }))\n  }\n  if (traits) {\n    payload.filters.traits = formatTraits(traits)\n  }\n\n  const low = price?.low ? parseFloat(formatPrice(price.low)) : undefined\n  const high = price?.high ? parseFloat(formatPrice(price.high)) : undefined\n\n  // Only consider sending eth price filters when searching\n  // across listed assets\n  if (!notForSale) {\n    if (low || high) {\n      payload.filters.currentEthPrice = {}\n    }\n\n    if (low && payload.filters.currentEthPrice) {\n      payload.filters.currentEthPrice.$gte = low\n    }\n\n    if (high && payload.filters.currentEthPrice) {\n      payload.filters.currentEthPrice.$lte = high\n    }\n  }\n\n  try {\n    const r = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(payload),\n    })\n    const data = await r.json()\n    // Unfortunately have to include totalCount into each element. The fetcher\n    // for swr infinite must return an array.\n    for (const x of data.data) {\n      x.totalCount = data.totalCount\n      x.numTraitsByAmount = data.numTraitsByAmount\n    }\n\n    // Uncomment the lines belo if you want to simulate a delay\n    // await (async () => await new Promise((resolve) => setTimeout(resolve, 50000)))();\n\n    return data.data\n  } catch (e) {\n    console.log(e)\n    return\n  }\n}\n","import { isAddress } from '@ethersproject/address'\n\nimport { GenieCollection } from '../../types'\n\nexport const CollectionStatsFetcher = async (addressOrName: string, recursive = false): Promise<GenieCollection> => {\n  const isName = !isAddress(addressOrName.toLowerCase())\n  const url = `${process.env.REACT_APP_GENIE_API_URL}/collections`\n\n  if (!isName && !recursive) {\n    try {\n      return await CollectionStatsFetcher(addressOrName.toLowerCase(), true)\n    } catch {\n      // Handle Error\n    }\n  }\n\n  const filters = isName\n    ? {\n        $or: [{ name: { $regex: addressOrName, $options: 'i' } }],\n      }\n    : { address: addressOrName }\n\n  const payload = {\n    filters,\n    limit: isName ? 6 : 1,\n    fields: isName\n      ? {\n          name: 1,\n          imageUrl: 1,\n          address: 1,\n          stats: 1,\n          floorPrice: 1,\n        }\n      : {\n          traits: 1,\n          stats: 1,\n          'indexingStats.openSea': 1,\n          imageUrl: 1,\n          bannerImageUrl: 1,\n          twitter: 1,\n          externalUrl: 1,\n          instagram: 1,\n          discordUrl: 1,\n          marketplaceCount: 1,\n          floorPrice: 1,\n        },\n    offset: 0,\n  }\n  const r = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  })\n\n  const data = await r.json()\n  return data?.data ? data.data[0] : {}\n}\n","import { ListingMarket, ListingRow } from 'nft/types'\n\ninterface Listing extends ListingRow {\n  marketplaces: ListingMarket[]\n}\n\nexport const logListing = async (listings: ListingRow[], userAddress: string): Promise<boolean> => {\n  const url = `${process.env.REACT_APP_GENIE_API_URL}/logGenieList`\n  const listingsConsolidated: Listing[] = listings.map((el) => ({ ...el, marketplaces: [] }))\n  const marketplacesById: Record<string, ListingMarket[]> = {}\n  const listingsWithMarketsConsolidated = listingsConsolidated.reduce((uniqueListings, curr) => {\n    const key = `${curr.asset.asset_contract.address}-${curr.asset.tokenId}`\n    if (marketplacesById[key]) {\n      marketplacesById[key].push(curr.marketplace)\n    } else {\n      marketplacesById[key] = [curr.marketplace]\n    }\n    if (!uniqueListings.some((listing) => `${listing.asset.asset_contract.address}-${listing.asset.tokenId}` === key)) {\n      curr.marketplaces = marketplacesById[key]\n      uniqueListings.push(curr)\n    }\n    return uniqueListings\n  }, [] as Listing[])\n  const payload = {\n    listings: listingsWithMarketsConsolidated,\n    userAddress,\n  }\n  const r = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  })\n  return r.status === 200\n}\n","import { GenieCollection } from '../../types'\n\nexport const fetchMultipleCollectionStats = async ({\n  addresses,\n}: {\n  addresses: string[]\n}): Promise<GenieCollection[]> => {\n  const url = `${process.env.REACT_APP_GENIE_API_URL}/searchCollections`\n  const filters = {\n    address: { $in: addresses },\n  }\n  const payload = {\n    filters,\n    fields: {\n      stats: 1,\n      imageUrl: 1,\n      address: 1,\n      name: 1,\n    },\n  }\n\n  const r = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  })\n  const data = await r.json()\n  return data.data\n}\n","import { GenieAsset, RouteResponse, TokenType } from '../../types'\n\nexport const fetchRoute = async ({\n  toSell,\n  toBuy,\n  senderAddress,\n}: {\n  toSell: any\n  toBuy: any\n  senderAddress: string\n}): Promise<RouteResponse> => {\n  const url = `${process.env.REACT_APP_GENIE_API_URL}/route`\n  const payload = {\n    sell: [...toSell].map((x) => buildRouteItem(x)),\n    buy: [...toBuy].filter((x) => x.tokenType !== 'Dust').map((x) => buildRouteItem(x)),\n    sender: senderAddress,\n  }\n\n  const r = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  })\n  const data = await r.json()\n\n  return data\n}\n\ntype ApiPriceInfo = {\n  basePrice: string\n  baseAsset: string\n  ETHPrice: string\n}\n\ntype RouteItem = {\n  id?: string\n  symbol?: string\n  name: string\n  decimals: number\n  address: string\n  priceInfo: ApiPriceInfo\n  tokenType: TokenType\n  tokenId: string\n  amount: number\n  marketplace?: string\n  collectionName?: string\n}\n\nconst buildRouteItem = (item: GenieAsset): RouteItem => {\n  return {\n    id: item.id,\n    symbol: item.priceInfo.baseAsset,\n    name: item.name,\n    decimals: item.decimals || 0, // 0 for fungible items\n    address: item.address,\n    tokenType: item.tokenType,\n    tokenId: item.tokenId,\n    marketplace: item.marketplace,\n    collectionName: item.collectionName,\n    amount: item.amount || 1, // default 1 for a single asset\n    priceInfo: {\n      basePrice: item.priceInfo.basePrice,\n      baseAsset: item.priceInfo.baseAsset,\n      ETHPrice: item.priceInfo.ETHPrice,\n    },\n  }\n}\n","import { CollectionInfoForAsset, GenieAsset } from '../../types'\n\nexport const fetchSingleAsset = async ({\n  contractAddress,\n  tokenId,\n}: {\n  contractAddress: string\n  tokenId?: string\n}): Promise<[GenieAsset, CollectionInfoForAsset]> => {\n  const url = `${process.env.REACT_APP_GENIE_API_URL}/assetDetails?address=${contractAddress}&tokenId=${tokenId}`\n  const r = await fetch(url)\n  const data = await r.json()\n  return [data.asset[0], data.collection]\n}\n","import { TimePeriod, TrendingCollection } from '../../types'\n\nexport const fetchTrendingCollections = async (payload: {\n  volumeType: 'eth' | 'nft'\n  timePeriod: TimePeriod\n  size: number\n}): Promise<TrendingCollection[]> => {\n  const url = `${process.env.REACT_APP_GENIE_V3_API_URL}/collections/trending`\n  const r = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  })\n\n  const data = await r.json()\n\n  return data\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\n\nimport { WalletAsset } from '../../types'\n\nconst getEthPrice = (price: any) => {\n  if (price.toString().includes('e')) {\n    return BigNumber.from(10).pow(price.toString().split('e+')[1]).toString()\n  }\n\n  return Math.round(price).toString()\n}\n\nexport const fetchWalletAssets = async ({\n  ownerAddress,\n  collectionAddresses,\n  pageParam,\n}: {\n  ownerAddress: string\n  collectionAddresses?: string[]\n  pageParam: number\n}): Promise<WalletAsset[]> => {\n  const collectionAddressesString = collectionAddresses\n    ? collectionAddresses.reduce((str, collectionAddress) => str + `&assetContractAddresses=${collectionAddress}`, '')\n    : ''\n  const url = `${\n    process.env.REACT_APP_GENIE_API_URL\n  }/walletAssets?address=${ownerAddress}${collectionAddressesString}&limit=25&offset=${pageParam * 25}`\n\n  const r = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n  const data = await r.json()\n  return data.data.assets.map((asset: any) => {\n    return {\n      ...asset,\n      collectionIsVerified: asset.asset_contract.isVerified,\n      lastPrice: asset.last_sale && formatEther(asset.last_sale.total_price),\n      floorPrice: asset.collection?.floorPrice,\n      creatorPercentage: parseFloat(asset.asset_contract.dev_seller_fee_basis_points) / 10000,\n      date_acquired: asset.last_sale ? asset.last_sale.event_timestamp : asset.asset_contract.created_date,\n      listing_date: asset.sellOrders.length\n        ? Math.max\n            .apply(\n              null,\n              asset.sellOrders.map(function (order: any) {\n                return new Date(order.orderCreatedDate)\n              })\n            )\n            .toString()\n        : null,\n      floor_sell_order_price: asset?.sellOrders?.length\n        ? Math.min(\n            ...asset.sellOrders.map((order: any) => {\n              return parseFloat(formatEther(getEthPrice(order.ethPrice)))\n            })\n          )\n        : null,\n    }\n  })\n}\n","export const createLooksRareOrder = async (payload: any): Promise<boolean> => {\n  const url = `${process.env.REACT_APP_GENIE_API_URL}/createLooksRareOrder`\n  const res = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(payload),\n  })\n  try {\n    const data = await res.json()\n    return data.code === 200\n  } catch (e) {\n    return false\n  }\n}\n","const looksRareApiAddress = 'https://api.looksrare.org/api/v1'\n\nexport const looksRareNonceFetcher = async (address: any): Promise<number | undefined> => {\n  const res = await fetch(`${looksRareApiAddress}/orders/nonce?address=${address}`)\n\n  if (res.status !== 200) {\n    console.log(`LooksRare nonce API errored with status ${res.statusText}`)\n    return\n  }\n\n  const json = await res.json()\n\n  return parseFloat(json.data)\n}\n","import { OrderPayload } from '../../utils/x2y2'\n\nexport const newX2Y2Order = async (payload: OrderPayload): Promise<boolean> => {\n  const body = JSON.stringify(payload)\n  const url = `${process.env.REACT_APP_GENIE_API_URL}/postX2Y2SellOrderWithApiKey`\n  const ac = new AbortController()\n  const req = new Request(url, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=utf-8',\n    },\n    body,\n    signal: ac.signal,\n  })\n  const timeout = setTimeout(() => ac.abort(), 60 * 1000)\n  try {\n    const res = await fetch(req)\n    const data = await res.json()\n    return data.code === 200\n  } catch (e) {\n    return false\n  } finally {\n    clearTimeout(timeout)\n  }\n}\n","import { ActivityEventResponse, ActivityFilter } from '../../types'\n\nexport const ActivityFetcher = async (\n  contractAddress: string,\n  filters?: ActivityFilter,\n  cursor?: string\n): Promise<ActivityEventResponse> => {\n  const filterParam =\n    filters && filters.eventTypes\n      ? `&${filters.eventTypes?.map((eventType) => `event_types[]=${eventType}`).join('&')}`\n      : ''\n  const url = `${\n    process.env.REACT_APP_GENIE_V3_API_URL\n  }/collections/${contractAddress}/activity?limit=25${filterParam}${cursor ? `&cursor=${cursor}` : ''}`\n\n  const r = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n  })\n  const data = await r.json()\n  return data.data\n}\n"],"sourceRoot":""}